<idea-plugin version="2">
  <!-- Components and extensions declared in this file work both in PyCharm and Python plugin. -->

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="com.intellij.diagnostic.ITNReporter"/>
    <fileTypeFactory implementation="com.jetbrains.python.PythonFileTypeFactory"/>
    <lang.syntaxHighlighterFactory key="Python" implementationClass="com.jetbrains.python.highlighting.PySyntaxHighlighterFactory"/>
    <lang.braceMatcher language="Python" implementationClass="com.jetbrains.python.PyBraceMatcher"/>
    <lang.parserDefinition language="Python" implementationClass="com.jetbrains.python.PythonParserDefinition"/>
    <lang.commenter language="Python" implementationClass="com.jetbrains.python.PythonCommenter"/>
    <lang.foldingBuilder language="Python" implementationClass="com.jetbrains.python.PythonFoldingBuilder"/>
    <lang.foldingBuilder language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.editor.DjangoTemplateFoldingBuilder"/>
    <lang.findUsagesProvider language="Python" implementationClass="com.jetbrains.python.findUsages.PythonFindUsagesProvider"/>
    <lang.formatter language="Python" implementationClass="com.jetbrains.python.PythonFormattingModelBuilder"/>
    <lang.whiteSpaceFormattingStrategy language="Python" implementationClass="com.jetbrains.python.formatter.PyWhiteSpaceFormattingStrategy"/>
    <lang.namesValidator language="Python" implementationClass="com.jetbrains.python.refactoring.rename.PythonNamesValidator"/>
    <lang.surroundDescriptor language="Python" implementationClass="com.jetbrains.python.refactoring.surround.PyStatementSurroundDescriptor"/>
    <lang.surroundDescriptor language="Python" implementationClass="com.jetbrains.python.refactoring.surround.PyExpressionSurroundDescriptor"/>
    <lang.psiStructureViewFactory language="Python" implementationClass="com.jetbrains.python.structureView.PyStructureViewFactory"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.PythonDocumentationProvider"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.console.PydevDocumentationProvider"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.validation.PyAnnotatingVisitor"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.validation.PyDumbAwareAnnotator"/>
    <backspaceHandlerDelegate implementation="com.jetbrains.python.editor.PythonBackspaceHandler"/>
    <quoteHandler fileType="Python" className="com.jetbrains.python.editor.PythonQuoteHandler"/>
    <enterHandlerDelegate implementation="com.jetbrains.python.editor.PythonEnterHandler"/>
    <sdkType implementation="com.jetbrains.python.sdk.PythonSdkType"/>
    <gotoClassContributor implementation="com.jetbrains.python.PyGotoClassContributor"/>
    <gotoSymbolContributor implementation="com.jetbrains.python.PyGotoSymbolContributor"/>
    <codeInsight.parameterInfo language="Python" implementationClass="com.jetbrains.python.PyParameterInfoHandler"/>
    <colorSettingsPage implementation="com.jetbrains.python.highlighting.PythonColorsPage"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyWordSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyLiteralSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyStatementSelectionHandler"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.python.codeInsight.PyKeywordCompletionContributor"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.python.codeInsight.PySpecialMethodNamesCompletionContributor"/>
    <lang.tokenSeparatorGenerator language="Python" implementationClass="com.jetbrains.python.PyTokenSeparatorGenerator"/>
    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyReferenceExpression" implementationClass="com.jetbrains.python.psi.impl.PyReferenceExpressionManipulator"/>

    <projectService serviceInterface="com.jetbrains.python.psi.PyElementGenerator"
                    serviceImplementation="com.jetbrains.python.psi.impl.PyElementGeneratorImpl"/>

    <typedHandler implementation="com.jetbrains.python.codeInsight.KeywordTypedHandler" id="pyCommaAfterKwd"/>
    <typedHandler implementation="com.jetbrains.django.lang.template.editor.DjangoBracesInterpolationTypedHandler" id="pyDjangoBraceInterpolation"/>
    <typedHandler implementation="com.jetbrains.python.editor.ColonTypedHandler" id="pyColonUnindent"/>

    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndexInsensitive"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyFunctionNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PySuperClassIndex"/>

    <fileTypeIndentOptionsProvider implementation="com.jetbrains.python.formatter.PyIndentOptionsProvider"/>

    
    <!-- Run/Debug -->
    <configurationType implementation="com.jetbrains.python.run.PythonConfigurationType"/>
    <programRunner implementation="com.jetbrains.python.run.PythonRunner"/>
    <programRunner implementation="com.jetbrains.python.debugger.PyDebugRunner"/>
    <configurationProducer implementation="com.jetbrains.python.run.PythonRunConfigurationProducer"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyLineBreakpointType"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyExceptionBreakpointType"/>

    <configurationType implementation="com.jetbrains.python.testing.PythonUnitTestConfigurationType"/>
    <configurationProducer implementation="com.jetbrains.python.testing.PythonUnitTestConfigurationProducer"/>
    <testSrcLocator implementation="com.jetbrains.python.testing.PythonUnitTestTestIdUrlProvider"/>

    <configurationType implementation="com.jetbrains.python.testing.pytest.PyTestRunConfigurationType"/>
    <configurationProducer implementation="com.jetbrains.python.testing.pytest.PyTestConfigurationProducer"/>

    <configurationType implementation="com.jetbrains.python.testing.doctest.PythonDocTestRunConfigurationType"/>
    <configurationProducer implementation="com.jetbrains.python.testing.doctest.PythonDocTestConfigurationProducer"/>

    <referenceImporter implementation="com.jetbrains.python.validation.PythonReferenceImporter"/>
    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.python.codeInsight.PyLineMarkerProvider"/>
    <definitionsSearch implementation="com.jetbrains.python.psi.search.PyDefinitionsSearch"/>
    <gotoTargetRendererProvider implementation="com.jetbrains.python.codeInsight.PyGotoTargetRendererProvider"/>

    <typeHierarchyProvider language="Python" implementationClass="com.jetbrains.python.hierarchy.PyTypeHierachyProvider"/>
    <highlightUsagesHandlerFactory implementation="com.jetbrains.python.codeInsight.highlighting.PyHighlightExitPointsHandlerFactory"/>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportToImportFromIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportFromToImportIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportToggleAliasIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PySplitIfIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyNegateComparisonIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyStringConcatenationToFormatIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ConvertFormatOperatorToMethodIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyFlipComparisonIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDemorganIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ReplaceListComprehensionWithForIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyJoinIfIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDictConstructorToLiteralFormIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDictLiteralFormToConstructorIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyQuotedStringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertLambdaToFunctionIntention</className>
      <category>Python</category>
    </intentionAction>

    <stubElementTypeHolder class="com.jetbrains.python.PyElementTypes"/>
    <inspectionToolProvider implementation="com.jetbrains.python.inspections.PythonInspectionToolProvider"/>

    <liveTemplateContext implementation="com.jetbrains.python.codeInsight.PythonTemplateContextType"/>
    <liveTemplateMacro implementation="com.jetbrains.python.codeInsight.CollectionElementNameMacro"/>

    <codeInsight.overrideMethod language="Python" implementationClass="com.jetbrains.python.codeInsight.override.PyOverrideMethodsHandler"/>
    <lang.refactoringSupport language="Python" implementationClass="com.jetbrains.python.refactoring.RefactoringProvider"/>
    <lang.refactoringSupport.classMembersRefactoringSupport language="Python" implementationClass="com.jetbrains.python.refactoring.classes.PyClassMembersRefactoringSupport"/>
    <inlineActionHandler implementation="com.jetbrains.python.refactoring.inline.PyInlineLocalHandler"/>
    <codeInsight.gotoSuper language="Python" implementationClass="com.jetbrains.python.codeInsight.PyGotoSuperHandler"/>
    <gotoDeclarationHandler implementation="com.jetbrains.python.codeInsight.PyBreakContinueGotoProvider" order="FIRST"/>
    <lang.smartEnterProcessor language="Python" implementationClass="com.jetbrains.python.codeInsight.editorActions.smartEnter.PySmartEnterProcessor"/>
    <statementUpDownMover implementation="com.jetbrains.python.codeInsight.editorActions.moveUpDown.StatementMover" id="statement"
                          order="before line"/>

    <filePropertyPusher implementation="com.jetbrains.python.psi.impl.PythonLanguageLevelPusher"/>

    <elementDescriptionProvider implementation="com.jetbrains.python.findUsages.PyElementDescriptionProvider"/>
    <fileStructureGroupRuleProvider implementation="com.jetbrains.python.findUsages.PyFunctionGroupingRuleProvider" id="py-function"/>
    <usageTypeProvider implementation="com.jetbrains.python.findUsages.PyUsageTypeProvider"/>

    <languageInjector implementation="com.jetbrains.python.codeInsight.PythonRegexpInjector"/>

    <applicationService serviceInterface="com.jetbrains.python.codeInsight.PyCodeInsightSettings"
                        serviceImplementation="com.jetbrains.python.codeInsight.PyCodeInsightSettings"/>
    <autoImportOptionsProvider instance="com.jetbrains.python.codeInsight.PyAutoImportOptions"/>

    <defaultLiveTemplatesProvider implementation="com.jetbrains.python.codeInsight.PyDefaultLiveTemplatesProvider"/>

    <completion.contributor language="Python" implementationClass="com.jetbrains.python.codeInsight.PyClassNameCompletionContributor"/>
    <weigher key="completion" implementationClass="com.jetbrains.python.codeInsight.PythonCompletionWeigher" order="first"/>
    <typedHandler implementation="com.jetbrains.python.console.PydevCompletionAutopopupBlockingHandler" id="pydevBlockAutoPopup"
                  order="before completionAutoPopup"/>

    <referencesSearch implementation="com.jetbrains.python.psi.search.PyInitReferenceSearchExecutor"/>
    <referencesSearch implementation="com.jetbrains.python.psi.search.PyStringReferenceSearch"/>
    <findUsagesHandlerFactory implementation="com.jetbrains.python.findUsages.PyFindUsagesHandlerFactory" id="Python"
                              order="last, before default"/>
    <readWriteAccessDetector implementation="com.jetbrains.python.findUsages.PyReadWriteAccessDetector"/>

    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyVariableProcessor" order="last" id="pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyFunctionProcessor" order="before pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyClassProcessor" order="before pyvar"/>

    <lang.importOptimizer language="Python" implementationClass="com.jetbrains.python.codeInsight.PyImportOptimizer"/>

    <codeStyleSettingsProvider implementation="com.jetbrains.python.formatter.PyCodeStyleSettingsProvider"/>
    <langCodeStyleSettingsProvider implementation="com.jetbrains.python.formatter.PyLanguageCodeStyleSettingsProvider"/>

    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyStringLiteralExpression"
                             implementationClass="com.jetbrains.python.psi.impl.PyStringLiteralExpressionManipulator"/>

    <analyzeStacktraceFilter implementation="com.jetbrains.python.run.PythonTracebackFilter"/>

    <internalFileTemplate name="Python Script"/>
    <internalFileTemplate name="Python Unit Test"/>

    <moduleService serviceInterface="com.jetbrains.python.psi.resolve.PythonPathCache"
                   serviceImplementation="com.jetbrains.python.psi.resolve.PythonModulePathCache"/>

    <preserveIndentOnPaste fileType="Python"/>

    <problemFileHighlightFilter implementation="com.jetbrains.python.codeInsight.PyProblemFileHighlightFilter"/>

    <editorSmartKeysConfigurable implementation="com.jetbrains.python.codeInsight.PySmartKeysOptions"/>

    <!-- Django -->
    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.django.annotator.ViewMethodLineMarkerProvider"/>
    <configurationType implementation="com.jetbrains.django.run.DjangoServerRunConfigurationType"/>
    <configurationType implementation="com.jetbrains.django.testRunner.DjangoTestsConfigurationType"/>
    <configurationProducer implementation="com.jetbrains.django.testRunner.DjangoTestsConfigurationProducer"/>

    <lang.substitutor language="XHTML" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <lang.substitutor language="HTML" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <lang.substitutor language="XML" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <lang.substitutor language="JavaScript" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <highlightErrorFilter implementation="com.jetbrains.django.lang.template.inspection.DjangoErrorFilter"/>

    <lang.parserDefinition language="DjangoTemplate"
                           implementationClass="com.jetbrains.django.lang.template.parsing.DjangoTemplateParserDefinition"/>
    <lang.fileViewProviderFactory language="DjangoTemplate"
                                  implementationClass="com.jetbrains.django.lang.template.DjangoTemplateFileProviderFactory"/>
    <lang.ast.factory language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.psi.impl.DjangoASTFactory"/>

    <lang.syntaxHighlighterFactory key="DjangoTemplate"
                                   implementationClass="com.jetbrains.django.lang.template.highlighting.DjangoTemplateHighlighterFactory"/>

    <psi.referenceContributor implementation="com.jetbrains.django.ref.DjangoReferenceContributor"/>

    <inspectionToolProvider implementation="com.jetbrains.django.lang.template.inspection.DjangoInspectionToolProvider"/>

    <moduleService serviceInterface="com.jetbrains.django.model.TemplateManager"
                   serviceImplementation="com.jetbrains.django.model.TemplateManager"/>

    <facetType implementation="com.jetbrains.django.facet.DjangoFacetType"/>

    <codeInsight.lineMarkerProvider language="DjangoTemplate" implementationClass="com.jetbrains.django.annotator.ViewLineMarkerProvider"/>

    <languageInjector implementation="com.jetbrains.django.codeInsight.DjangoRegexpInjector"/>

    <liveTemplateContext implementation="com.jetbrains.django.lang.template.DjangoTemplateContextType"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoVariableMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoBlockMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoTemplateTagsMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoFilterMacro"/>

    <colorSettingsPage implementation="com.jetbrains.django.lang.template.highlighting.DjangoTemplateColorsPage"/>

    <lang.commenter language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.editor.DjangoTemplateCommenter"/>

    <basicWordSelectionFilter implementation="com.jetbrains.django.lang.template.editor.DjangoTemplateWordSelectionFilter"/>
    <extendWordSelectionHandler implementation="com.jetbrains.django.lang.template.editor.DjangoTemplateTagSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.django.lang.template.editor.DjangoTemplateTagNameSelectionHandler"/>

    <lang.namesValidator language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.inspection.DjangoTemplateNamesValidator"/>

    <renamePsiElementProcessor implementation="com.jetbrains.django.refactoring.RenameDjangoNamedExpressionProcessor" order="last"/>

    <projectService serviceInterface="com.jetbrains.django.model.DjangoElementGenerator"
                    serviceImplementation="com.jetbrains.django.model.DjangoElementGenerator"/>

    <lang.refactoringSupport language="DjangoTemplate" implementationClass="com.jetbrains.django.refactoring.DjangoRefactoringProvider"/>

    <lang.surroundDescriptor language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.surround.DjangoTemplateTagSurroundDescriptor"
                             order="first"/>
    <lang.surroundDescriptor language="HTML" implementationClass="com.jetbrains.django.lang.template.surround.DjangoXmlSurroundDescriptor" order="after djangoHtmlSurround"/>
    <lang.surroundDescriptor language="XML" implementationClass="com.jetbrains.django.lang.template.surround.DjangoXmlSurroundDescriptor" order="after djangoXmlSurround"/>
    <lang.surroundDescriptor language="HTML" implementationClass="com.jetbrains.django.lang.template.surround.DjangoTemplateVariableSurroundDescriptor" order="first" id="djangoHtmlSurround"/>
    <lang.surroundDescriptor language="XML" implementationClass="com.jetbrains.django.lang.template.surround.DjangoTemplateVariableSurroundDescriptor" order="first" id="djangoXmlSurround"/>

    <lang.elementManipulator forClass="com.jetbrains.django.lang.template.psi.impl.DjangoStringLiteralImpl"
                             implementationClass="com.jetbrains.django.lang.template.ref.DjangoStringLiteralManipulator"/>

    <lang.findUsagesProvider language="DjangoTemplate"
                             implementationClass="com.jetbrains.django.lang.template.ref.DjangoTemplateFindUsagesProvider"/>
    
    <referencesSearch implementation="com.jetbrains.django.lang.template.ref.DjangoTemplateStringReferenceSearch"/>

    <quoteHandler fileType="DjangoTemplate" className="com.jetbrains.django.lang.template.editor.DjangoTemplateQuoteHandler"/>

    <lang.formatter language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.formatter.DjangoTemplateFormattingModelBuilder"/>

    <xml.zenCodingGenerator implementation="com.jetbrains.django.lang.template.DjangoTemplateZenCodingGenerator"/>

    <completion.contributor language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.editor.DjangoTemplateCompletionContributor"/>

    <lang.psiStructureViewFactory language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.structureView.DjangoStructureViewBuilderFactory"/>

    <editorSmartKeysConfigurable instance="com.jetbrains.django.lang.template.editor.DjangoEditorSmartKeysConfigurable"/>

    <enterHandlerDelegate implementation="com.jetbrains.django.lang.template.editor.EnterBetweenDjangoTagsHandler"/>

    <stubIndex implementation="com.jetbrains.django.model.stubs.DjangoForeignKeyIndex"/>

    <renamePsiElementProcessor implementation="com.jetbrains.django.refactoring.RenameDjangoParameterProcessor"/>
    <elementDescriptionProvider implementation="com.jetbrains.django.refactoring.DjangoElementDescriptionProvider"/>

    <completion.contributor language="Python" implementationClass="com.jetbrains.django.completion.DjangoUrlsCompletionContributor"/>

    <liveTemplatePreprocessor implementation="com.jetbrains.django.lang.template.DjangoTemplatePreprocessor"/>

    <!-- App Engine -->
    <facetType implementation="com.jetbrains.appengine.facet.AppEngineFacetType"/>

    <configurationType implementation="com.jetbrains.appengine.run.AppEngineServerRunConfigurationType"/>

    <lang.parserDefinition language="GQL" implementationClass="com.jetbrains.appengine.lang.gql.parsing.GqlParserDefinition"/>
    <multiHostInjector implementation="com.jetbrains.appengine.lang.gql.GqlLanguageInjector"/>
    <lang.syntaxHighlighterFactory key="GQL"
                                   implementationClass="com.jetbrains.appengine.lang.gql.highlighting.GqlHighlighterFactory"/>

    <completion.contributor language="Python" implementationClass="com.jetbrains.appengine.model.ModelAttributeCompletionContributor"/>
    <completion.contributor language="yaml" implementationClass="com.jetbrains.appengine.completion.AppYamlKeyCompletionContributor"/>
    <completion.contributor language="GQL" implementationClass="com.jetbrains.appengine.completion.GqlKeywordCompletionContributor"/>

    <psi.referenceContributor implementation="com.jetbrains.appengine.ref.AppEngineReferenceContributor"/>

    <inspectionToolProvider implementation="com.jetbrains.appengine.inspection.AppEngineInspectionToolProvider"/>

    <colorSettingsPage implementation="com.jetbrains.appengine.lang.gql.highlighting.GqlColorsPage"/>

    <projectService serviceInterface="org.jetbrains.yaml.YAMLElementGenerator"
                    serviceImplementation="org.jetbrains.yaml.YAMLElementGenerator"/>

    <!-- Buildout -->
    <facetType implementation="com.jetbrains.python.buildout.BuildoutFacetType"/>

    <lang.parserDefinition language="BuildoutCfg" implementationClass="com.jetbrains.python.buildout.config.BuildoutCfgParserDefinition"/>
    <fileTypeFactory implementation="com.jetbrains.python.buildout.config.BuildoutCfgFileTypeFactory"/>
    <lang.syntaxHighlighterFactory key="BuildoutCfg"
                                   implementationClass="com.jetbrains.python.buildout.config.BuildoutCfgHighlighterFactory"/>
    <inspectionToolProvider implementation="com.jetbrains.python.buildout.config.inspection.BuildoutInspectionToolProvider"/>
  </extensions>

  <extensionPoints>
    <extensionPoint qualifiedName="Pythonid.importResolver" interface="com.jetbrains.python.psi.impl.PyImportResolver"/>
    <extensionPoint qualifiedName="Pythonid.typeProvider" interface="com.jetbrains.python.psi.impl.PyTypeProvider"/>
    <extensionPoint qualifiedName="Pythonid.pySuperMethodsSearch" interface="com.intellij.util.QueryExecutor"/>
    <extensionPoint qualifiedName="Pythonid.pyClassInheritorsSearch" interface="com.intellij.util.QueryExecutor"/>
    <extensionPoint qualifiedName="Pythonid.pyClassMembersProvider" interface="com.jetbrains.python.psi.types.PyClassMembersProvider"/>
    <extensionPoint qualifiedName="Pythonid.pyModuleMembersProvider" interface="com.jetbrains.python.psi.types.PyModuleMembersProvider"/>
    <extensionPoint qualifiedName="Pythonid.pyOverridingMethodsSearch" interface="com.intellij.util.QueryExecutor"/>
    <extensionPoint qualifiedName="Pythonid.runnableScriptFilter" interface="com.jetbrains.python.run.RunnableScriptFilter"/>
    <extensionPoint qualifiedName="Pythonid.runnableUnitTestFilter" interface="com.jetbrains.python.testing.RunnableUnitTestFilter"/>
    <extensionPoint qualifiedName="Pythonid.unresolvedReferenceQuickFixProvider"
                    interface="com.jetbrains.python.inspections.PyUnresolvedReferenceQuickFixProvider"/>
    <extensionPoint qualifiedName="Pythonid.dumbAnnotator" interface="com.jetbrains.python.validation.PyAnnotator"/>
    <extensionPoint qualifiedName="Pythonid.unusedLocalFilter" interface="com.jetbrains.python.inspections.UnusedLocalFilter"/>
    <extensionPoint qualifiedName="Pythonid.customTargetExpressionStubType" interface="com.jetbrains.python.psi.impl.stubs.CustomTargetExpressionStubType"/>
  </extensionPoints>

  <extensions defaultExtensionNs="Pythonid">
    <pySuperMethodsSearch implementation="com.jetbrains.python.psi.search.PySuperMethodsSearchExecutor"/>
    <pyClassInheritorsSearch implementation="com.jetbrains.python.psi.search.PyClassInheritorsSearchExecutor"/>
    <pyOverridingMethodsSearch implementation="com.jetbrains.python.psi.search.PyOverridingMethodsSearchExecutor"/>
    <runnableScriptFilter implementation="com.jetbrains.python.testing.pytest.PyTestRunnableScriptFilter"/>
    <runnableScriptFilter implementation="com.jetbrains.python.testing.PythonUnitTestRunnableScriptFilter"/>
    <dumbAnnotator implementation="com.jetbrains.python.validation.DocStringAnnotator"/>
    <dumbAnnotator implementation="com.jetbrains.python.validation.PyDefinitionsAnnotator"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PropertyStubType"/>

    <pyClassMembersProvider implementation="com.jetbrains.python.codeInsight.PyStdlibClassMembersProvider"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.PyStdlibTypeProvider"/>

    <!-- Django -->
    <pyClassMembersProvider implementation="com.jetbrains.django.codeInsight.DjangoClassMembersProvider"/>
    <typeProvider implementation="com.jetbrains.django.codeInsight.DjangoTypeProvider"/>
    <unresolvedReferenceQuickFixProvider implementation="com.jetbrains.django.ref.DjangoViewReferenceQuickFixProvider"/>
    <runnableUnitTestFilter implementation="com.jetbrains.django.testRunner.DjangoUnitTestFilter"/>
    <unusedLocalFilter implementation="com.jetbrains.django.codeInsight.DjangoUnusedLocalFilter"/>
    <customTargetExpressionStubType implementation="com.jetbrains.django.model.stubs.DjangoForeignKeyStubType"/>

    <!-- App Engine -->
    <typeProvider implementation="com.jetbrains.appengine.model.AppEngineTypeProvider"/>
    <pyModuleMembersProvider implementation="com.jetbrains.appengine.model.AppEngineModuleMembersProvider"/>
  </extensions>

  <project-components>
    <component>
      <implementation-class>com.jetbrains.python.PythonPsiManager</implementation-class>
    </component>
    <component>
      <implementation-class>com.jetbrains.django.lang.template.DjangoTemplatePsiManager</implementation-class>
    </component>
    <component>
      <implementation-class>com.jetbrains.python.sdk.PythonSdkUpdater</implementation-class>
    </component>
  </project-components>

  <actions>
    <action
        id="Devmode.DumpPsi"
        class="com.jetbrains.python.devmode.DumpPsiToClipboardAction"
        text="Dump PSI to clipboard"
        internal="true"
        >
      <add-to-group group-id="ToolsMenu" anchor="after" relative-to-action="Macros"/>
    </action>

    <action id="Devmode.AnalyzeReturns" class="com.jetbrains.python.devmode.AnalyzeReturnsAction" text="Analyze return types"
            internal="true">
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </action>

    <group id="PyTypeHierarchyPopupMenu">
      <reference ref="TypeHierarchyBase.BaseOnThisType"/>
      <reference ref="TypeHierarchy.Class"/>
      <reference ref="TypeHierarchy.Subtypes"/>
      <reference ref="TypeHierarchy.Supertypes"/>
      <separator/>
      <reference ref="EditSource"/>
      <separator/>
      <reference ref="FindUsages"/>
      <reference ref="RefactoringMenu"/>
      <separator/>
      <reference ref="AddToFavorites"/>
      <reference ref="MoveToChangeList"/>
      <separator/>
      <reference ref="RunContextPopupGroup"/>
      <separator/>
      <reference ref="ReformatCode"/>
      <reference ref="OptimizeImports"/>
      <reference ref="$Delete"/>
      <separator/>
      <reference ref="VersionControlsGroup"/>
      <separator/>
      <reference ref="ExternalToolsGroup"/>
      <separator/>
      <reference ref="CompareTwoFiles"/>
      <reference ref="CompareFileWithEditor"/>
    </group>

    <group text="Google App Engine" popup="true">
      <action id="PythonAppEngine.UploadAppAction" class="com.jetbrains.appengine.action.UpdateAppAction"
              text="Upload App Engine app..."
              description="Uploads App Engine application to google server">

      </action>

      <action id="PythonAppEngine.GetLogsAction" class="com.jetbrains.appengine.action.GetLogsAction"
              text="Get App Engine logs..."
              description="Downloads App Engine logs">
      </action>
      <add-to-group group-id="ToolsMenu" anchor="after" relative-to-action="Django.RunManageTaskAction"/>
    </group>
    <action id="com.jetbrains.python.console.RunPythonConsoleAction"
            class="com.jetbrains.python.console.RunPythonConsoleAction"
            text="Run Python Console..." description="Allows to quickly run Python console">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <group text="Django">
      <action id="com.jetbrains.django.console.RunDjangoConsoleAction"
              class="com.jetbrains.django.console.RunDjangoConsoleAction"
              text="Run Django Console..." description="Allows to quickly run Django console">
      </action>

      <action id="Django.RunManageTaskAction" class="com.jetbrains.django.actions.RunManageTaskAction"
              text="Run manage.py task..."
              description="Runs manage.py task">

        <keyboard-shortcut keymap="Mac OS X" first-keystroke="alt R"/>
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt R"/>
        <keyboard-shortcut keymap="Mac OS X 10.5+" first-keystroke="alt R" replace-all="true"/>
        <keyboard-shortcut keymap="Visual Studio" first-keystroke="ctrl alt R" remove="true"/>
        <keyboard-shortcut keymap="Eclipse" first-keystroke="ctrl alt R" remove="true"/>
      </action>

      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="NewPythonFile" class="com.jetbrains.python.actions.CreatePythonFileAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml"/>
    </action>
    <action id="NewPythonPackage" class="com.jetbrains.python.actions.CreatePackageAction" text="Python Package"
            description="Create a new directory and __init__.py inside it" icon="/nodes/packageClosed.png">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewDir"/>
    </action>
  </actions>
</idea-plugin>
