<idea-plugin version="2">
  <!-- Components and extensions declared in this file work both in PyCharm and Python plugin. -->

  <resource-bundle>com.jetbrains.python.PyBundle</resource-bundle>

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="com.intellij.diagnostic.ITNReporter"/>
    <fileTypeFactory implementation="com.jetbrains.python.PythonFileTypeFactory"/>
    <fileTypeDetector implementation="com.jetbrains.python.PyFileTypeDetector"/>
    <lang.syntaxHighlighterFactory key="Python" implementationClass="com.jetbrains.python.highlighting.PySyntaxHighlighterFactory"/>
    <lang.braceMatcher language="Python" implementationClass="com.jetbrains.python.PyBraceMatcher"/>
    <lang.parserDefinition language="Python" implementationClass="com.jetbrains.python.PythonParserDefinition"/>
    <lang.commenter language="Python" implementationClass="com.jetbrains.python.PythonCommenter"/>
    <lang.foldingBuilder language="Python" implementationClass="com.jetbrains.python.PythonFoldingBuilder"/>
    <lang.foldingBuilder language="DjangoTemplate"
                         implementationClass="com.jetbrains.django.lang.template.editor.DjangoTemplateFoldingBuilder"/>
    <lang.findUsagesProvider language="Python" implementationClass="com.jetbrains.python.findUsages.PythonFindUsagesProvider"/>
    <lang.formatter language="Python" implementationClass="com.jetbrains.python.formatter.PythonFormattingModelBuilder"/>
    <lang.whiteSpaceFormattingStrategy language="Python"
                                       implementationClass="com.jetbrains.python.formatter.PyWhiteSpaceFormattingStrategy"/>
    <lang.namesValidator language="Python" implementationClass="com.jetbrains.python.refactoring.rename.PythonNamesValidator"/>
    <lang.surroundDescriptor language="Python"
                             implementationClass="com.jetbrains.python.refactoring.surround.PyStatementSurroundDescriptor"/>
    <lang.surroundDescriptor language="Python"
                             implementationClass="com.jetbrains.python.refactoring.surround.PyExpressionSurroundDescriptor"/>
    <lang.psiStructureViewFactory language="Python" implementationClass="com.jetbrains.python.structureView.PyStructureViewFactory"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.documentation.PythonDocumentationProvider"/>
    <lang.documentationProvider language="Python" implementationClass="com.jetbrains.python.console.PydevDocumentationProvider"/>
    <lang.emacs language="Python" implementationClass="com.jetbrains.python.editor.PyEmacsHandler"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.validation.PyAnnotatingVisitor"/>
    <annotator language="Python" implementationClass="com.jetbrains.python.validation.PyDumbAwareAnnotator"/>
    <backspaceHandlerDelegate implementation="com.jetbrains.python.editor.PythonBackspaceHandler"/>
    <quoteHandler fileType="Python" className="com.jetbrains.python.editor.PythonQuoteHandler"/>
    <enterHandlerDelegate implementation="com.jetbrains.python.editor.PythonEnterHandler"/>
    <enterHandlerDelegate implementation="com.jetbrains.python.editor.PyEnterBetweenBracketsHandler"/>
    <sdkType implementation="com.jetbrains.python.sdk.PythonSdkType"/>
    <gotoClassContributor implementation="com.jetbrains.python.PyGotoClassContributor"/>
    <gotoSymbolContributor implementation="com.jetbrains.python.PyGotoSymbolContributor"/>
    <codeInsight.parameterInfo language="Python" implementationClass="com.jetbrains.python.PyParameterInfoHandler"/>
    <colorSettingsPage implementation="com.jetbrains.python.highlighting.PythonColorsPage"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyWordSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyLiteralSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyStatementSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyListSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.python.editor.selectWord.PyCommaSelectionHandler"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyKeywordCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PySpecialMethodNamesCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PySuperMethodCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PySuperClassAttributesCompletionContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyDictKeyNamesCompletionContributor"/>
    <lang.tokenSeparatorGenerator language="Python" implementationClass="com.jetbrains.python.PyTokenSeparatorGenerator"/>
    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyReferenceExpression"
                             implementationClass="com.jetbrains.python.psi.impl.PyReferenceExpressionManipulator"/>

    <projectService serviceInterface="com.jetbrains.python.psi.PyElementGenerator"
                    serviceImplementation="com.jetbrains.python.psi.impl.PyElementGeneratorImpl"/>

    <typedHandler implementation="com.jetbrains.python.codeInsight.KeywordTypedHandler" id="pyCommaAfterKwd"/>
    <typedHandler implementation="com.jetbrains.django.lang.template.editor.DjangoBracesInterpolationTypedHandler"
                  id="pyDjangoBraceInterpolation"/>
    <typedHandler implementation="com.jetbrains.python.codeInsight.PyMethodNameTypedHandler" id="pyMethodNameTypedHandler"/>
    <typedHandler implementation="com.jetbrains.python.editor.PythonSpaceHandler"/>

    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyClassNameIndexInsensitive"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyFunctionNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PySuperClassIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyVariableNameIndex"/>
    <stubIndex implementation="com.jetbrains.python.psi.stubs.PyInstanceAttributeIndex"/>

    <bundledColorSchemesProvider implementation="com.jetbrains.python.PythonBundledColorSchemeProvider"/>

    <declarationRangeHandler key="com.jetbrains.python.psi.PyClass"
                             implementationClass="com.jetbrains.python.codeInsight.PyDeclarationRangeHandler"/>

    <declarationRangeHandler key="com.jetbrains.python.psi.PyFunction"
                             implementationClass="com.jetbrains.python.codeInsight.PyDeclarationRangeHandler"/>

    <!-- Run/Debug -->
    <applicationService serviceInterface="com.jetbrains.python.run.PythonRunConfigurationExtensionsManager"
                        serviceImplementation="com.jetbrains.python.run.PythonRunConfigurationExtensionsManager"/>
    <configurationType implementation="com.jetbrains.python.run.PythonConfigurationType"/>
    <programRunner implementation="com.jetbrains.python.run.PythonRunner"/>
    <programRunner implementation="com.jetbrains.python.debugger.PyDebugRunner"/>
    <programRunner implementation="com.jetbrains.python.debugger.remote.PyRemoteDebugRunner"/>
    <programRunner implementation="com.jetbrains.python.coverage.PythonCoverageRunner"/>
    <configurationProducer implementation="com.jetbrains.python.run.PythonRunConfigurationProducer"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyLineBreakpointType"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.DjangoTemplateLineBreakpointType"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.PyExceptionBreakpointType"/>
    <xdebugger.breakpointType implementation="com.jetbrains.python.debugger.django.DjangoExceptionBreakpointType"/>

    <configurationType implementation="com.jetbrains.python.testing.PythonTestConfigurationType"/>

    <configurationProducer implementation="com.jetbrains.python.testing.unittest.PythonUnitTestConfigurationProducer"/>
    <testSrcLocator implementation="com.jetbrains.python.testing.PythonUnitTestTestIdUrlProvider"/>

    <configurationProducer implementation="com.jetbrains.python.testing.pytest.PyTestConfigurationProducer"/>
    <configurationProducer implementation="com.jetbrains.python.testing.doctest.PythonDocTestConfigurationProducer"/>
    <configurationProducer implementation="com.jetbrains.python.testing.nosetest.PythonNoseTestConfigurationProducer"/>
    <configurationProducer implementation="com.jetbrains.python.testing.attest.PythonAtTestConfigurationProducer"/>

    <referenceImporter implementation="com.jetbrains.python.codeInsight.imports.PythonReferenceImporter"/>
    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.python.codeInsight.PyLineMarkerProvider"/>
    <definitionsSearch implementation="com.jetbrains.python.psi.search.PyDefinitionsSearch"/>
    <gotoTargetRendererProvider implementation="com.jetbrains.python.codeInsight.PyGotoTargetRendererProvider"/>

    <typeHierarchyProvider language="Python" implementationClass="com.jetbrains.python.hierarchy.PyTypeHierachyProvider"/>
    <highlightUsagesHandlerFactory implementation="com.jetbrains.python.codeInsight.highlighting.PyHighlightExitPointsHandlerFactory"/>

    <configurationType implementation="com.jetbrains.python.debugger.remote.PyRemoteDebugConfigurationType"/>
    <fileEditorProvider implementation="com.jetbrains.python.debugger.remote.vfs.PyRemoteDebugEditorProvider"/>

    <joinLinesHandler implementation="com.jetbrains.python.editor.PyJoinLinesHandler"/>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportToImportFromIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportFromToImportIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ImportToggleAliasIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PySplitIfIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyNegateComparisonIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyStringConcatenationToFormatIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ConvertFormatOperatorToMethodIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyFlipComparisonIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDemorganIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ReplaceListComprehensionWithForIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyJoinIfIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDictConstructorToLiteralFormIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDictLiteralFormToConstructorIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyQuotedStringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertLambdaToFunctionIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.ConvertVariadicParamIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyConvertTripleQuotedStringIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyTransformConditionalExpressionIntention</className>
      <category>Python</category>
    </intentionAction>

    <intentionAction>
      <className>com.jetbrains.python.codeInsight.intentions.PyDocStubIntention</className>
      <category>Python</category>
    </intentionAction>

    <testFinder implementation="com.jetbrains.python.codeInsight.testIntegration.PyTestFinder"/>
    <testCreator language="Python" implementationClass="com.jetbrains.python.codeInsight.testIntegration.PyTestCreator"/>
    <testGenerator implementation="com.jetbrains.python.codeInsight.testIntegration.PyTestGenerator"/>

    <stubElementTypeHolder class="com.jetbrains.python.PyElementTypes"/>
    <stubElementTypeHolder class="com.jetbrains.cython.psi.elementTypes.CythonElementTypes"/>

    <localInspection language="Python" shortName="PyArgumentListInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.incorrect.call.arguments" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyArgumentListInspection"/>
    <localInspection language="Python" shortName="PyRedeclarationInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.redeclaration" groupKey="INSP.GROUP.python" enabledByDefault="false"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyRedeclarationInspection"/>
    <localInspection language="Python" shortName="PyUnresolvedReferencesInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.unresolved.refs" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnresolvedReferencesInspection"/>
    <localInspection language="Python" shortName="PyMethodParametersInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.problematic.first.parameter" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodParametersInspection"/>
    <localInspection language="Python" shortName="PyUnreachableCodeInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.unreachable.code" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnreachableCodeInspection"/>
    <localInspection language="Python" shortName="PyMethodFirstArgAssignmentInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.first.arg.assign" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodFirstArgAssignmentInspection"/>
    <localInspection language="Python" shortName="PyStringFormatInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.str.format" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyStringFormatInspection"/>
    <localInspection language="Python" shortName="PyMethodOverridingInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.method.over" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMethodOverridingInspection"/>
    <localInspection language="Python" shortName="PyInitNewSignatureInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.new.init.signature" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyInitNewSignatureInspection"/>
    <localInspection language="Python" shortName="PyTrailingSemicolonInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.trailing.semicolon" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTrailingSemicolonInspection"/>
    <localInspection language="Python" shortName="PyReturnFromInitInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.init.return" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyReturnFromInitInspection"/>
    <localInspection language="Python" shortName="PyUnusedLocalInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.unused" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnusedLocalInspection"/>
    <localInspection language="Python" shortName="PyDictCreationInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.dict.creation" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDictCreationInspection"/>
    <localInspection language="Python" shortName="PyDictDuplicateKeysInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.duplicate.keys" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDictDuplicateKeysInspection"/>
    <localInspection language="Python" shortName="PyExceptClausesOrderInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.bad.except.clauses.order" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyExceptClausesOrderInspection"/>
    <localInspection language="Python" shortName="PyTupleAssignmentBalanceInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.incorrect.assignment" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTupleAssignmentBalanceInspection"/>
    <localInspection language="Python" shortName="PyClassicStyleClassInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.classic.class.usage" groupKey="INSP.GROUP.python" enabledByDefault="false"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyClassicStyleClassInspection"/>
    <localInspection language="Python" shortName="PyExceptionInheritInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.exception.not.inherit" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyExceptionInheritInspection"/>
    <localInspection language="Python" shortName="PyDefaultArgumentInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.default.argument" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDefaultArgumentInspection"/>
    <localInspection language="Python" shortName="PyRaisingNewStyleClassInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.raising.new.style.class" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyRaisingNewStyleClassInspection"/>
    <localInspection language="Python" shortName="PyDocstringInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.docstring" groupKey="INSP.GROUP.python" enabledByDefault="false"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDocstringInspection"/>
    <localInspection language="Python" shortName="PyUnboundLocalVariableInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.unbound" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnboundLocalVariableInspection"/>
    <localInspection language="Python" shortName="PyStatementEffectInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.statement.effect" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyStatementEffectInspection"/>
    <localInspection language="Python" shortName="PySimplifyBooleanCheckInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.check.can.be.simplified" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PySimplifyBooleanCheckInspection"/>
    <localInspection language="Python" shortName="PyFromFutureImportInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.from.future.import" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyFromFutureImportInspection"/>
    <localInspection language="Python" shortName="PyComparisonWithNoneInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.comparison.with.none" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyComparisonWithNoneInspection"/>
    <localInspection language="Python" shortName="PyStringExceptionInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.raising.string.exception" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyStringExceptionInspection"/>
    <localInspection language="Python" shortName="PySuperArgumentsInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.wrong.super.arguments" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PySuperArgumentsInspection"/>
    <localInspection language="Python" shortName="PyByteLiteralInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.byte.literal" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyByteLiteralInspection"/>
    <localInspection language="Python" shortName="PyTupleItemAssignmentInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.tuple.item.assignment" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTupleItemAssignmentInspection"/>
    <localInspection language="Python" shortName="PyCallingNonCallableInspection" displayName="Trying to call a non-callable object" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyCallingNonCallableInspection"/>
    <localInspection language="Python" shortName="PyPropertyAccessInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.property.access" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyPropertyAccessInspection"/>
    <localInspection language="Python" shortName="PyPropertyDefinitionInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.property.definition" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyPropertyDefinitionInspection"/>
    <localInspection language="Python" shortName="PyInconsistentIndentationInspection" displayName="Inconsistent indentation" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyInconsistentIndentationInspection"/>
    <localInspection language="Python" shortName="PyNestedDecoratorsInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.nested.decorators" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyNestedDecoratorsInspection"/>
    <localInspection language="Python" shortName="PyCallByClassInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.different.class.call" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WEAK WARNING" implementationClass="com.jetbrains.python.inspections.PyCallByClassInspection"/>
    <localInspection language="Python" shortName="PyBroadExceptionInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.too.broad.exception.clauses" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyBroadExceptionInspection"/>
    <localInspection language="Python" shortName="PyRedundantParenthesesInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.redundant.parentheses" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyRedundantParenthesesInspection"/>
    <localInspection language="Python" shortName="PyAugmentAssignmentInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.augment.assignment" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyAugmentAssignmentInspection"/>
    <localInspection language="Python" shortName="PyChainedComparisonsInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.chained.comparisons" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyChainedComparisonsInspection"/>
    <localInspection language="Python" shortName="PyOldStyleClassesInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.oldstyle.class" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyOldStyleClassesInspection"/>
    <localInspection language="Python" shortName="PyCompatibilityInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.compatibility" groupKey="INSP.GROUP.python" enabledByDefault="false"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyCompatibilityInspection"/>
    <localInspection language="Python" shortName="PyListCreationInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.list.creation" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyListCreationInspection"/>
    <localInspection language="Python" shortName="PyUnnecessaryBackslashInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.unnecessary.backslash" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyUnnecessaryBackslashInspection"/>
    <localInspection language="Python" shortName="PySingleQuotedDocstringInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.single.quoted.docstring" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PySingleQuotedDocstringInspection"/>
    <localInspection language="Python" shortName="PyMissingConstructorInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.missing.super.constructor" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMissingConstructorInspection"/>
    <localInspection language="Python" shortName="PyArgumentEqualDefaultInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.argument.equal.default" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyArgumentEqualDefaultInspection"/>
    <localInspection language="Python" shortName="PySetFunctionToLiteralInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.set.function.to.literal" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PySetFunctionToLiteralInspection"/>
    <localInspection language="Python" shortName="PyDecoratorInspection" bundle="com.jetbrains.python.PyBundle" key="INSP.NAME.decorator.outside.class" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDecoratorInspection"/>
    <localInspection language="Python" shortName="PyTypeCheckerInspection" displayName="Type checker" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyTypeCheckerInspection"/>
    <localInspection language="Python" shortName="PyDeprecationInspection" displayName="Deprecated function, class or module" groupKey="INSP.GROUP.python" enabledByDefault="true"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyDeprecationInspection"/>
    <localInspection language="Python" shortName="PyMandatoryEncodingInspection" displayName="No encoding specified for file" groupKey="INSP.GROUP.python" enabledByDefault="false"  level="WARNING" implementationClass="com.jetbrains.python.inspections.PyMandatoryEncodingInspection"/>

    <liveTemplateContext implementation="com.jetbrains.python.codeInsight.PythonTemplateContextType"/>
    <liveTemplateMacro implementation="com.jetbrains.python.codeInsight.CollectionElementNameMacro"/>

    <codeInsight.overrideMethod language="Python" implementationClass="com.jetbrains.python.codeInsight.override.PyOverrideMethodsHandler"/>
    <lang.refactoringSupport language="Python" implementationClass="com.jetbrains.python.refactoring.PyRefactoringProvider"/>
    <lang.refactoringSupport.classMembersRefactoringSupport language="Python"
                                                            implementationClass="com.jetbrains.python.refactoring.classes.PyClassMembersRefactoringSupport"/>
    <inlineActionHandler implementation="com.jetbrains.python.refactoring.inline.PyInlineLocalHandler"/>
    <codeInsight.gotoSuper language="Python" implementationClass="com.jetbrains.python.codeInsight.PyGotoSuperHandler"/>
    <gotoDeclarationHandler implementation="com.jetbrains.python.codeInsight.PyBreakContinueGotoProvider" order="FIRST"/>
    <lang.smartEnterProcessor language="Python"
                              implementationClass="com.jetbrains.python.codeInsight.editorActions.smartEnter.PySmartEnterProcessor"/>
    <statementUpDownMover implementation="com.jetbrains.python.codeInsight.editorActions.moveUpDown.StatementMover" id="statement"
                          order="before line"/>

    <filePropertyPusher implementation="com.jetbrains.python.psi.impl.PythonLanguageLevelPusher"/>

    <elementDescriptionProvider implementation="com.jetbrains.python.findUsages.PyElementDescriptionProvider"/>
    <fileStructureGroupRuleProvider implementation="com.jetbrains.python.findUsages.PyFunctionGroupingRuleProvider" id="py-function"/>
    <usageTypeProvider implementation="com.jetbrains.python.findUsages.PyUsageTypeProvider"/>
    <importFilteringRule implementation="com.jetbrains.python.findUsages.PyImportFilteringRule"/>

    <languageInjector implementation="com.jetbrains.python.codeInsight.regexp.PythonRegexpInjector"/>
    <lang.parserDefinition language="PythonRegExp"
                           implementationClass="com.jetbrains.python.codeInsight.regexp.PythonRegexpParserDefinition"/>
    <lang.parserDefinition language="PythonVerboseRegExp"
                           implementationClass="com.jetbrains.python.codeInsight.regexp.PythonVerboseRegexpParserDefinition"/>
    <lang.syntaxHighlighterFactory key="PythonVerboseRegExp"
                                   implementationClass="com.jetbrains.python.codeInsight.regexp.PythonVerboseRegexpSyntaxHighlighterFactory"/>

    <applicationService serviceInterface="com.jetbrains.python.codeInsight.PyCodeInsightSettings"
                        serviceImplementation="com.jetbrains.python.codeInsight.PyCodeInsightSettings"/>
    <autoImportOptionsProvider instance="com.jetbrains.python.codeInsight.imports.PyAutoImportOptions"/>

    <defaultLiveTemplatesProvider implementation="com.jetbrains.python.codeInsight.PyDefaultLiveTemplatesProvider"/>

    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.python.codeInsight.completion.PyClassNameCompletionContributor"/>
    <weigher key="completion" implementationClass="com.jetbrains.python.codeInsight.completion.PythonCompletionWeigher" order="first"/>
    <completion.confidence language="Python" implementationClass="com.jetbrains.python.codeInsight.completion.PyCompletionConfidence"/>
    <typedHandler implementation="com.jetbrains.python.console.completion.PythonConsoleAutopopupBlockingHandler" id="pydevBlockAutoPopup"
                  order="first, before completionAutoPopup"/>

    <referencesSearch implementation="com.jetbrains.python.psi.search.PyInitReferenceSearchExecutor"/>
    <referencesSearch implementation="com.jetbrains.python.psi.search.PyKeywordArgumentSearchExecutor"/>
    <referencesSearch implementation="com.jetbrains.python.psi.search.PyStringReferenceSearch"/>
    <findUsagesHandlerFactory implementation="com.jetbrains.python.findUsages.PyFindUsagesHandlerFactory" id="Python"
                              order="last, before default"/>
    <readWriteAccessDetector implementation="com.jetbrains.python.findUsages.PyReadWriteAccessDetector"/>

    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyVariableProcessor" order="last" id="pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyFunctionProcessor" order="before pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyClassProcessor" order="before pyvar"/>
    <renamePsiElementProcessor implementation="com.jetbrains.python.refactoring.rename.RenamePyFileProcessor" order="first"/>

    <automaticRenamerFactory implementation="com.jetbrains.python.refactoring.rename.PyContainingFileRenamerFactory"/>
    <automaticRenamerFactory implementation="com.jetbrains.python.refactoring.rename.PyInheritorRenameFactory"/>
    <automaticRenamerFactory implementation="com.jetbrains.python.refactoring.rename.PyParametersRenameFactory"/>

    <moveFileHandler implementation="com.jetbrains.python.refactoring.move.PyMoveFileHandler"/>
    <refactoring.moveHandler implementation="com.jetbrains.python.refactoring.move.PyMoveClassOrFunctionDelegate"/>

    <lang.importOptimizer language="Python" implementationClass="com.jetbrains.python.codeInsight.imports.PyImportOptimizer"/>

    <codeStyleSettingsProvider implementation="com.jetbrains.python.formatter.PyCodeStyleSettingsProvider"/>
    <langCodeStyleSettingsProvider implementation="com.jetbrains.python.formatter.PyLanguageCodeStyleSettingsProvider"/>

    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyStringLiteralExpression"
                             implementationClass="com.jetbrains.python.psi.impl.PyStringLiteralExpressionManipulator"/>
    <lang.elementManipulator forClass="com.jetbrains.python.psi.PyKeywordArgument"
                             implementationClass="com.jetbrains.python.psi.impl.PyKeywordArgumentManipulator"/>

    <analyzeStacktraceFilter implementation="com.jetbrains.python.run.PythonTracebackFilter"/>

    <internalFileTemplate name="Python Script"/>
    <internalFileTemplate name="Python Unit Test"/>

    <moduleService serviceInterface="com.jetbrains.python.psi.resolve.PythonPathCache"
                   serviceImplementation="com.jetbrains.python.psi.resolve.PythonModulePathCache"/>

    <preserveIndentOnPaste fileType="Python"/>

    <problemFileHighlightFilter implementation="com.jetbrains.python.codeInsight.PyProblemFileHighlightFilter"/>

    <editorSmartKeysConfigurable instance="com.jetbrains.python.codeInsight.PySmartKeysOptions"/>
    <editorSmartKeysConfigurable instance="com.jetbrains.python.codeInsight.PySpecificSmartKeysOptions"/>

    <psi.referenceContributor implementation="com.jetbrains.python.codeInsight.PyStdReferenceContributor"/>

    <applicationService serviceInterface="com.jetbrains.python.documentation.PythonDocumentationMap"
                        serviceImplementation="com.jetbrains.python.documentation.PythonDocumentationMap"/>
    <applicationConfigurable instance="com.jetbrains.python.documentation.PythonDocumentationConfigurable"/>
    <projectConfigurable instance="com.jetbrains.python.configuration.PyIntegratedToolsConfigurable"/>
    <projectConfigurable instance="com.jetbrains.python.templateLanguages.TemplateLanguageModulesConfigurable"/>
    <projectService serviceInterface="com.jetbrains.python.documentation.PyDocumentationSettings"
                    serviceImplementation="com.jetbrains.python.documentation.PyDocumentationSettings"/>
    <psi.referenceContributor implementation="com.jetbrains.python.documentation.DocStringReferenceContributor"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.python.documentation.DocStringTagCompletionContributor"/>

    <projectService serviceInterface="com.intellij.psi.search.ProjectScopeBuilder"
                    serviceImplementation="com.jetbrains.python.psi.search.PyProjectScopeBuilder"
                    overrides="true"/>

    <treeStructureProvider implementation="com.jetbrains.python.projectView.PyTreeStructureProvider"/>

    <project.converterProvider implementation="com.jetbrains.python.testing.converters.PythonTestConverterProvider"/>

    <projectConfigurable instance="com.jetbrains.python.console.PyConsoleOptionsConfigurable"/>
    <projectService serviceImplementation="com.jetbrains.python.console.PyConsoleOptionsProvider"/>

    <codeBlockProvider language="Python" implementationClass="com.jetbrains.python.codeInsight.PyCodeBlockProvider"/>

    <iconProvider implementation="com.jetbrains.python.PyDirectoryIconProvider"/>

    <!-- Cython -->
    <lang.parserDefinition language="Cython" implementationClass="com.jetbrains.cython.parser.CythonParserDefinition"/>
    <lang.syntaxHighlighterFactory key="Cython" implementationClass="com.jetbrains.cython.CythonSyntaxHighlighterFactory"/>
    <annotator language="Cython" implementationClass="com.jetbrains.cython.CythonBuiltinAnnotator"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.cython.CythonKeywordCompletionContributor"/>
    <lang.psiStructureViewFactory language="Cython" implementationClass="com.jetbrains.cython.structureView.CythonStructureViewFactory"/>
    <lang.formatter language="Cython" implementationClass="com.jetbrains.cython.CythonFormattingModelBuilder"/>

    <coverageEngine implementation="com.jetbrains.python.coverage.PyCoverageEngine"/>
    <coverageRunner implementation="com.jetbrains.python.coverage.PyCoverageRunner"/>
    <coverageOptions implementation="com.jetbrains.python.coverage.PyCoverageOptions"/>
    <projectService serviceImplementation="com.jetbrains.python.coverage.PyCoverageOptionsProvider"/>

    <projectService serviceInterface="com.jetbrains.python.coverage.PyCoverageAnnotator"
                    serviceImplementation="com.jetbrains.python.coverage.PyCoverageAnnotator"/>

    <postStartupActivity implementation="com.jetbrains.python.sdk.PythonSdkUpdater"/>

    <!-- Django -->
    <codeInsight.lineMarkerProvider language="Python" implementationClass="com.jetbrains.django.annotator.ViewMethodLineMarkerProvider"/>
    <configurationType implementation="com.jetbrains.django.run.DjangoServerRunConfigurationType"/>
    <configurationType implementation="com.jetbrains.django.testRunner.DjangoTestsConfigurationType"/>
    <configurationProducer implementation="com.jetbrains.django.testRunner.DjangoTestsConfigurationProducer"/>

    <lang.substitutor language="XHTML" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <lang.substitutor language="HTML" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <lang.substitutor language="XML" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <lang.substitutor language="JavaScript" implementationClass="com.jetbrains.django.lang.template.DjangoTemplateLanguageSubstitutor"/>
    <highlightErrorFilter implementation="com.jetbrains.django.lang.template.inspection.DjangoErrorFilter"/>

    <lang.parserDefinition language="DjangoTemplate"
                           implementationClass="com.jetbrains.django.lang.template.parsing.DjangoTemplateParserDefinition"/>
    <lang.fileViewProviderFactory language="DjangoTemplate"
                                  implementationClass="com.jetbrains.django.lang.template.DjangoTemplateFileProviderFactory"/>
    <lang.ast.factory language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.psi.impl.DjangoASTFactory"/>

    <lang.syntaxHighlighterFactory key="DjangoTemplate"
                                   implementationClass="com.jetbrains.django.lang.template.highlighting.DjangoTemplateHighlighterFactory"/>

    <psi.referenceContributor implementation="com.jetbrains.django.ref.DjangoReferenceContributor"/>

    <localInspection language="DjangoTemplate" shortName="DjangoCloseTagInspection" bundle="com.jetbrains.django.ui.Django" key="inspection.close.tag.name"
                     groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.TemplateCloseTagInspection"/>
    <localInspection language="DjangoTemplate" shortName="DuplicatedBlockNamesInspection" bundle="com.jetbrains.django.ui.Django"
                     key="INSP.NAME.duplicated.block.names" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.DuplicatedBlockNamesInspection"/>
    <localInspection language="DjangoTemplate" shortName="ExtendsTagPositionInspection" bundle="com.jetbrains.django.ui.Django" key="INSP.NAME.extends.tag.position"
                     groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.ExtendsTagPositionInspection"/>
    <localInspection language="DjangoTemplate" shortName="DjangoUnresolvedTemplateReferenceInspection" bundle="com.jetbrains.django.ui.Django"
                     key="inspection.unresolved-template-reference.display-name" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.UnresolvedTemplateReferenceInspection"/>
    <localInspection language="DjangoTemplate" shortName="DjangoUnresolvedStaticReferenceInspection" bundle="com.jetbrains.django.ui.Django"
                     key="inspection.unresolved-static-reference.display-name" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.UnresolvedStaticReferenceInspection"/>
    <localInspection language="DjangoTemplate" shortName="DjangoBrokenLineCommentInspection" bundle="com.jetbrains.django.ui.Django"
                     key="broken.line.comment.inspection.name" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.DjangoBrokenLineCommentInspection"/>
    <localInspection language="DjangoTemplate" shortName="DjangoUnresolvedTagInspection" bundle="com.jetbrains.django.ui.Django"
                     key="inspection.unresolved-tag.display-name" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.UnresolvedTagInspection"/>
    <localInspection language="DjangoTemplate" shortName="DjangoUnresolvedFilterInspection" bundle="com.jetbrains.django.ui.Django"
                     key="inspection.unresolved-filter.display-name" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.UnresolvedFilterInspection"/>
    <localInspection language="DjangoTemplate" shortName="DjangoUnresolvedLoadInspection" bundle="com.jetbrains.django.ui.Django"
                     key="inspection.unresolved-load.display-name" groupKey="django" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.django.lang.template.inspection.UnresolvedLoadReferenceInspection"/>

    <moduleService serviceInterface="com.jetbrains.django.model.TemplateManager"
                   serviceImplementation="com.jetbrains.django.model.TemplateManager"/>

    <projectService serviceInterface="com.jetbrains.django.model.TagLibrary"
                    serviceImplementation="com.jetbrains.django.model.TagLibrary"/>

    <facetType implementation="com.jetbrains.django.facet.DjangoFacetType"/>

    <codeInsight.lineMarkerProvider language="DjangoTemplate" implementationClass="com.jetbrains.django.annotator.ViewLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="HTML" implementationClass="com.jetbrains.django.annotator.ViewLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="XML" implementationClass="com.jetbrains.django.annotator.ViewLineMarkerProvider"/>

    <codeInsight.lineMarkerProvider language="DjangoTemplate" implementationClass="com.jetbrains.django.annotator.LocaleLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="HTML" implementationClass="com.jetbrains.django.annotator.LocaleLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="XML" implementationClass="com.jetbrains.django.annotator.LocaleLineMarkerProvider"/>

    <languageInjector implementation="com.jetbrains.django.codeInsight.DjangoRegexpInjector"/>

    <liveTemplateContext implementation="com.jetbrains.django.lang.template.DjangoTemplateContextType"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoVariableMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoBlockMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoTemplateTagsMacro"/>
    <liveTemplateMacro implementation="com.jetbrains.django.lang.template.macros.DjangoFilterMacro"/>

    <colorSettingsPage implementation="com.jetbrains.django.lang.template.highlighting.DjangoTemplateColorsPage"/>

    <lang.commenter language="DjangoTemplate" implementationClass="com.jetbrains.django.lang.template.editor.DjangoTemplateCommenter"/>

    <basicWordSelectionFilter implementation="com.jetbrains.django.lang.template.editor.DjangoTemplateWordSelectionFilter"/>
    <extendWordSelectionHandler implementation="com.jetbrains.django.lang.template.editor.DjangoTemplateTagSelectionHandler"/>
    <extendWordSelectionHandler implementation="com.jetbrains.django.lang.template.editor.DjangoTemplateTagNameSelectionHandler"/>

    <lang.namesValidator language="DjangoTemplate"
                         implementationClass="com.jetbrains.django.lang.template.inspection.DjangoTemplateNamesValidator"/>

    <renamePsiElementProcessor implementation="com.jetbrains.django.refactoring.RenameDjangoNamedExpressionProcessor" order="last"/>

    <projectService serviceInterface="com.jetbrains.django.lang.template.DjangoTemplateElementGenerator"
                    serviceImplementation="com.jetbrains.django.lang.template.DjangoTemplateElementGenerator"/>

    <lang.refactoringSupport language="DjangoTemplate" implementationClass="com.jetbrains.django.refactoring.DjangoRefactoringProvider"/>

    <lang.surroundDescriptor language="DjangoTemplate"
                             implementationClass="com.jetbrains.django.lang.template.surround.DjangoTemplateTagSurroundDescriptor"
                             order="first"/>
    <lang.surroundDescriptor language="HTML" implementationClass="com.jetbrains.django.lang.template.surround.DjangoXmlSurroundDescriptor"
                             order="after djangoHtmlSurround"/>
    <lang.surroundDescriptor language="XML" implementationClass="com.jetbrains.django.lang.template.surround.DjangoXmlSurroundDescriptor"
                             order="after djangoXmlSurround"/>
    <lang.surroundDescriptor language="HTML"
                             implementationClass="com.jetbrains.django.lang.template.surround.DjangoTemplateVariableSurroundDescriptor"
                             order="first" id="djangoHtmlSurround"/>
    <lang.surroundDescriptor language="XML"
                             implementationClass="com.jetbrains.django.lang.template.surround.DjangoTemplateVariableSurroundDescriptor"
                             order="first" id="djangoXmlSurround"/>

    <lang.elementManipulator forClass="com.jetbrains.django.lang.template.psi.impl.DjangoStringLiteralImpl"
                             implementationClass="com.jetbrains.django.lang.template.ref.DjangoStringLiteralManipulator"/>

    <lang.findUsagesProvider language="DjangoTemplate"
                             implementationClass="com.jetbrains.django.lang.template.ref.DjangoTemplateFindUsagesProvider"/>

    <referencesSearch implementation="com.jetbrains.django.lang.template.ref.DjangoTemplateStringReferenceSearch"/>

    <quoteHandler fileType="DjangoTemplate" className="com.jetbrains.django.lang.template.editor.DjangoTemplateQuoteHandler"/>

    <lang.formatter language="DjangoTemplate"
                    implementationClass="com.jetbrains.django.lang.template.formatter.DjangoTemplateFormattingModelBuilder"/>

    <xml.zenCodingGenerator implementation="com.jetbrains.django.lang.template.DjangoTemplateZenCodingGenerator"/>
    <xml.elementDescriptorProvider implementation="com.jetbrains.django.lang.template.DjangoTemplateDescriptorProvider"/>

    <completion.contributor language="DjangoTemplate"
                            implementationClass="com.jetbrains.django.lang.template.editor.DjangoTemplateCompletionContributor"/>

    <lang.psiStructureViewFactory language="DjangoTemplate"
                                  implementationClass="com.jetbrains.django.lang.template.structureView.DjangoStructureViewBuilderFactory"/>

    <editorSmartKeysConfigurable instance="com.jetbrains.django.lang.template.editor.DjangoEditorSmartKeysConfigurable"/>

    <enterHandlerDelegate implementation="com.jetbrains.django.lang.template.editor.EnterBetweenDjangoTagsHandler"/>

    <stubIndex implementation="com.jetbrains.django.model.stubs.DjangoForeignKeyIndex"/>

    <renamePsiElementProcessor implementation="com.jetbrains.django.refactoring.RenameDjangoParameterProcessor"/>
    <elementDescriptionProvider implementation="com.jetbrains.django.refactoring.DjangoElementDescriptionProvider"/>

    <liveTemplatePreprocessor implementation="com.jetbrains.django.lang.template.DjangoTemplatePreprocessor"/>

    <completion.contributor language="Python" implementationClass="com.jetbrains.django.completion.DjangoSettingsPyCompletionContributor"/>
    <completion.contributor language="Python" implementationClass="com.jetbrains.django.completion.DjangoAsViewArgsCompletionContributor"/>

    <intentionAction>
      <className>com.jetbrains.django.ref.DjangoClassViewMigrationIntention</className>
      <category>Python</category>
    </intentionAction>

    <lang.braceMatcher language="DjangoTemplate"
                       implementationClass="com.jetbrains.django.lang.template.highlighting.DjangoTemplateBraceMatcher"/>

    <intentionAction>
      <className>com.jetbrains.django.localization.ref.WrapTransTagIntention</className>
      <category>Django</category>
    </intentionAction>

    <webBrowserUrlProvider implementation="com.jetbrains.django.lang.template.DjangoWebBrowserUrlProvider"/>

    <xml.xmlExtension implementation="com.jetbrains.django.lang.template.DjangoXmlExtension" order="first"/>

    <!-- App Engine -->
    <facetType implementation="com.jetbrains.appengine.facet.AppEngineFacetType"/>
    <framework.detector implementation="com.jetbrains.appengine.facet.AppEngineFrameworkDetector"/>

    <configurationType implementation="com.jetbrains.appengine.run.AppEngineServerRunConfigurationType"/>

    <lang.parserDefinition language="GQL" implementationClass="com.jetbrains.appengine.lang.gql.parsing.GqlParserDefinition"/>
    <multiHostInjector implementation="com.jetbrains.appengine.lang.gql.GqlLanguageInjector"/>
    <lang.syntaxHighlighterFactory key="GQL"
                                   implementationClass="com.jetbrains.appengine.lang.gql.highlighting.GqlHighlighterFactory"/>

    <completion.contributor language="Python" implementationClass="com.jetbrains.appengine.model.ModelAttributeCompletionContributor"/>
    <completion.contributor language="yaml" implementationClass="com.jetbrains.appengine.completion.AppYamlKeyCompletionContributor"/>
    <completion.contributor language="GQL" implementationClass="com.jetbrains.appengine.completion.GqlKeywordCompletionContributor"/>

    <psi.referenceContributor implementation="com.jetbrains.appengine.ref.AppEngineReferenceContributor"/>

    <localInspection language="GQL" shortName="Query_index_required" bundle="com.jetbrains.appengine.ui.Messages" key="query-inspection-name"
                     groupKey="app-engine-python" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.appengine.inspection.IndexRequiredQueryInspection"/>
    <localInspection language="GQL" shortName="Query_restricted" bundle="com.jetbrains.appengine.ui.Messages" key="restricted-query-inspection-name"
                     groupKey="app-engine-python" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.appengine.inspection.RestrictedQueryInspection"/>
    <localInspection language="GQL" shortName="Query_bound_parameters" bundle="com.jetbrains.appengine.ui.Messages" key="query-bound-param-inspection-name"
                     groupKey="app-engine-python" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.appengine.inspection.QueryBoundParametersInspection"/>
    <localInspection language="Python" shortName="Restricted_Python_calls" bundle="com.jetbrains.appengine.ui.Messages" key="sandbox-inspection-name"
                     groupKey="app-engine-python" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.appengine.inspection.SandboxInspection"/>

    <colorSettingsPage implementation="com.jetbrains.appengine.lang.gql.highlighting.GqlColorsPage"/>

    <projectService serviceInterface="org.jetbrains.yaml.YAMLElementGenerator"
                    serviceImplementation="org.jetbrains.yaml.YAMLElementGenerator"/>

    <!-- Buildout -->
    <facetType implementation="com.jetbrains.python.buildout.BuildoutFacetType"/>
    <framework.detector implementation="com.jetbrains.python.buildout.BuildoutFrameworkDetector"/>

    <lang.parserDefinition language="BuildoutCfg" implementationClass="com.jetbrains.python.buildout.config.BuildoutCfgParserDefinition"/>
    <fileTypeFactory implementation="com.jetbrains.python.buildout.config.BuildoutCfgFileTypeFactory"/>
    <lang.syntaxHighlighterFactory key="BuildoutCfg"
                                   implementationClass="com.jetbrains.python.buildout.config.BuildoutCfgHighlighterFactory"/>

    <localInspection language="BuildoutCfg" shortName="BuildoutUnresolvedPartInspection" bundle="com.jetbrains.python.PyBundle"
                     key="buildout.unresolved.part.inspection" groupKey="buildout" enabledByDefault="true" level="WARNING"
                     implementationClass="com.jetbrains.python.buildout.config.inspection.BuildoutUnresolvedPartInspection"/>

    <colorSettingsPage implementation="com.jetbrains.python.buildout.config.BuildoutCfgColorsPage"/>
    <projectService serviceInterface="com.jetbrains.python.testing.TestRunnerService"
                    serviceImplementation="com.jetbrains.python.testing.TestRunnerService"/>

    <problemFileHighlightFilter implementation="com.jetbrains.python.buildout.config.BuildoutCfgProblemFileHighlightFilter"/>


    <!-- Locale -->
    <colorSettingsPage implementation="com.jetbrains.django.localization.LocaleColorsPage"/>
    <lang.syntaxHighlighterFactory key="Locale"
                                   implementationClass="com.jetbrains.django.localization.LocaleHighlighterFactory"/>
    <lang.parserDefinition language="Locale" implementationClass="com.jetbrains.django.localization.LocaleParserDefinition"/>
    <fileTypeFactory implementation="com.jetbrains.django.localization.LocaleFileTypeFactory"/>
    <annotator language="Locale" implementationClass="com.jetbrains.django.localization.validation.LocaleAnnotatingVisitor"/>
    <quoteHandler fileType="Locale" className="com.jetbrains.django.localization.editor.LocaleQuoteHandler"/>
    <problemFileHighlightFilter implementation="com.jetbrains.django.localization.LocaleProblemFileHighlightFilter"/>
    <!--<fileEditorProvider implementation="com.jetbrains.django.localization.editor.LocaleFileEditorProvider"/>-->
    <qualifiedNameProvider implementation="com.jetbrains.python.actions.PyQualifiedNameProvider"/>

    <!-- ReST files -->

    <fileTypeFactory implementation="com.jetbrains.rest.RestFileTypeFactory"/>
    <lang.syntaxHighlighterFactory key="ReST"
                                   implementationClass="com.jetbrains.rest.RestHighlighterFactory"/>
    <lang.parserDefinition language="ReST" implementationClass="com.jetbrains.rest.parsing.RestParserDefinition"/>
    <colorSettingsPage implementation="com.jetbrains.rest.RestColorsPage"/>

    <projectService serviceInterface="com.jetbrains.rest.ReSTService"
                    serviceImplementation="com.jetbrains.rest.ReSTService"/>
    <completion.contributor language="ReST" implementationClass="com.jetbrains.rest.completion.DirectiveCompletionContributor"/>
    <completion.contributor language="ReST" implementationClass="com.jetbrains.rest.completion.OptionCompletionContributor"/>
    <completion.contributor language="ReST" implementationClass="com.jetbrains.rest.completion.ReferenceCompletionContributor"/>
    <gotoDeclarationHandler implementation="com.jetbrains.rest.RestGotoProvider" order="FIRST"/>
    <lang.fileViewProviderFactory language="ReST"
                                  implementationClass="com.jetbrains.rest.RestFileProviderFactory"/>
    <lang.psiStructureViewFactory language="ReST"
                                  implementationClass="com.jetbrains.rest.structureView.RestStructureViewFactory"/>
    <annotator language="ReST" implementationClass="com.jetbrains.rest.validation.RestAnnotatingVisitor"/>

    <localInspection language="ReST" shortName="RestRoleInspection" bundle="com.jetbrains.rest.RestBundle" key="INSP.role.not.defined"
                     groupKey="INSP.GROUP.rest" enabledByDefault="false" level="WARNING"
                     implementationClass="com.jetbrains.rest.inspections.RestRoleInspection"/>

    <lang.substitutor language="TEXT" implementationClass="com.jetbrains.rest.RestLanguageSubstitutor"/>
    <configurationType implementation="com.jetbrains.rest.run.RestRunConfigurationType"/>
    <configurationProducer implementation="com.jetbrains.rest.run.docutils.DocutilsConfigurationProducer"/>
    <configurationProducer implementation="com.jetbrains.rest.run.sphinx.SphinxConfigurationProducer"/>

    <!-- Mako files -->
    <lang.substitutor language="HTML" implementationClass="com.jetbrains.python.templateLanguages.TemplateLanguageSubstitutor"/>
    <lang.substitutor language="XHTML" implementationClass="com.jetbrains.python.templateLanguages.TemplateLanguageSubstitutor"/>
    <lang.substitutor language="XML" implementationClass="com.jetbrains.python.templateLanguages.TemplateLanguageSubstitutor"/>
    <lang.substitutor language="JavaScript" implementationClass="com.jetbrains.python.templateLanguages.TemplateLanguageSubstitutor"/>

    <colorSettingsPage implementation="com.jetbrains.mako.highlighting.MakoColorsPage"/>
    <lang.syntaxHighlighterFactory key="Mako"
                                   implementationClass="com.jetbrains.mako.highlighting.MakoHighlighterFactory"/>
    <lang.parserDefinition language="Mako" implementationClass="com.jetbrains.mako.parser.MakoParserDefinition"/>
    <lang.fileViewProviderFactory language="Mako"
                                  implementationClass="com.jetbrains.mako.MakoFileProviderFactory"/>

    <lang.commenter language="Mako" implementationClass="com.jetbrains.mako.editor.MakoCommenter"/>
    <lang.braceMatcher language="Mako" implementationClass="com.jetbrains.mako.highlighting.MakoBraceMatcher"/>
    <quoteHandler fileType="Mako" className="com.jetbrains.mako.editor.MakoQuoteHandler"/>
    <completion.contributor language="Mako"
                            implementationClass="com.jetbrains.mako.editor.MakoCompletionContributor"/>
    <completion.contributor language="Mako"
                            implementationClass="com.jetbrains.mako.editor.MakoTagAttributesContributor"/>
    <completion.contributor language="Python"
                            implementationClass="com.jetbrains.mako.editor.MakoKeywordCompletionContributor"/>
    <completion.contributor language="HTML"
                            implementationClass="com.jetbrains.mako.editor.MakoControlCompletionContributor"/>
    <completion.contributor language="XML"
                            implementationClass="com.jetbrains.mako.editor.MakoControlCompletionContributor"/>

    <typedHandler implementation="com.jetbrains.mako.editor.MakoBracesHandler"
                  id="MakoBracesHandler"/>
    <annotator language="Mako" implementationClass="com.jetbrains.mako.validation.MakoAnnotatingVisitor"/>
    <editorHighlighterProvider filetype="Mako" implementationClass="com.jetbrains.mako.highlighting.MakoEditorHighlighterProvider"/>
    <lang.findUsagesProvider language="Mako" implementationClass="com.jetbrains.python.findUsages.PythonFindUsagesProvider"/>
    <lang.formatter language="Mako"
                    implementationClass="com.jetbrains.mako.formatter.MakoFormattingModelBuilder"/>
    <lang.whiteSpaceFormattingStrategy language="Mako"
                                       implementationClass="com.jetbrains.mako.formatter.MakoWhiteSpaceFormattingStrategy"/>
    <lang.psiStructureViewFactory language="Mako" implementationClass="com.jetbrains.mako.structureView.MakoStructureViewFactory"/>

    <lang.elementManipulator forClass="com.jetbrains.mako.psi.impl.MakoTagAttribute"
                             implementationClass="com.jetbrains.mako.psi.MakoTagAttributeManipulator"/>

    <localInspection language="Python" shortName="MakoArgumentListInspection" displayName="Incorrect call arguments"
                     groupKey="INSP.GROUP.mako" enabledByDefault="true"  level="WARNING"
                     implementationClass="com.jetbrains.mako.inspection.MakoArgumentListInspection"/>

    <moduleService serviceInterface="com.jetbrains.python.templateLanguages.TemplatesService"
                    serviceImplementation="com.jetbrains.python.templateLanguages.TemplatesService"/>

    <!-- Jinja2 -->
    <editorHighlighterProvider filetype="Jinja2" implementationClass="com.jetbrains.jinja2.highlighting.Jinja2EditorHighlighterProvider"/>
    <lang.syntaxHighlighterFactory key="Jinja2" implementationClass="com.jetbrains.jinja2.highlighting.Jinja2HighlighterFactory"/>
    <lang.parserDefinition language="Jinja2"
                           implementationClass="com.jetbrains.jinja2.parsing.Jinja2ParserDefinition"/>
    <lang.fileViewProviderFactory language="Jinja2"
                                  implementationClass="com.jetbrains.jinja2.Jinja2FileViewProviderFactory"/>
    <annotator language="Jinja2" implementationClass="com.jetbrains.jinja2.highlighting.Jinja2Annotator"/>
    <useScopeEnlarger implementation="com.jetbrains.jinja2.findUsages.Jinja2UseScopeEnlarger"/>
    <usageTypeProvider implementation="com.jetbrains.jinja2.findUsages.Jinja2UsageTypeProvider"/>
    <lang.commenter language="Jinja2" implementationClass="com.jetbrains.jinja2.Jinja2Commenter"/>
  </extensions>

  <extensionPoints>
    <extensionPoint qualifiedName="Pythonid.importResolver" interface="com.jetbrains.python.psi.impl.PyImportResolver"/>
    <extensionPoint qualifiedName="Pythonid.typeProvider" interface="com.jetbrains.python.psi.impl.PyTypeProvider"/>
    <extensionPoint qualifiedName="Pythonid.pySuperMethodsSearch" interface="com.intellij.util.QueryExecutor"/>
    <extensionPoint qualifiedName="Pythonid.pyClassInheritorsSearch" interface="com.intellij.util.QueryExecutor"/>
    <extensionPoint qualifiedName="Pythonid.pyClassMembersProvider" interface="com.jetbrains.python.psi.types.PyClassMembersProvider"/>
    <extensionPoint qualifiedName="Pythonid.pyModuleMembersProvider" interface="com.jetbrains.python.psi.types.PyModuleMembersProvider"/>
    <extensionPoint qualifiedName="Pythonid.pyOverridingMethodsSearch" interface="com.intellij.util.QueryExecutor"/>
    <extensionPoint qualifiedName="Pythonid.runnableScriptFilter" interface="com.jetbrains.python.run.RunnableScriptFilter"/>
    <extensionPoint qualifiedName="Pythonid.runnableUnitTestFilter" interface="com.jetbrains.python.testing.RunnableUnitTestFilter"/>
    <extensionPoint qualifiedName="Pythonid.unresolvedReferenceQuickFixProvider"
                    interface="com.jetbrains.python.inspections.PyUnresolvedReferenceQuickFixProvider"/>
    <extensionPoint qualifiedName="Pythonid.dumbAnnotator" interface="com.jetbrains.python.validation.PyAnnotator"/>
    <extensionPoint qualifiedName="Pythonid.unusedLocalFilter" interface="com.jetbrains.python.inspections.UnusedLocalFilter"/>
    <extensionPoint qualifiedName="Pythonid.customTargetExpressionStubType"
                    interface="com.jetbrains.python.psi.impl.stubs.CustomTargetExpressionStubType"/>
    <extensionPoint qualifiedName="Pythonid.knownDecoratorProvider" interface="com.jetbrains.python.psi.PyKnownDecoratorProvider"/>
    <extensionPoint qualifiedName="Pythonid.documentationLinkProvider" interface="com.jetbrains.python.documentation.PythonDocumentationLinkProvider"/>
    <extensionPoint qualifiedName="Pythonid.importCandidateProvider" interface="com.jetbrains.python.codeInsight.imports.PyImportCandidateProvider"/>
    <extensionPoint qualifiedName="Pythonid.dialectsTokenSetContributor" interface="com.jetbrains.python.PythonDialectsTokenSetContributor"/>    
    <extensionPoint qualifiedName="Pythonid.templateLanguageCoreTags"
                    beanClass="com.intellij.lang.LanguageExtensionPoint"/>
    <extensionPoint qualifiedName="Pythonid.runConfigurationExtension" interface="com.jetbrains.python.run.PythonRunConfigurationExtension"/>
    <extensionPoint qualifiedName="Pythonid.javascriptDebugger"
                    interface="com.jetbrains.django.run.PythonJavaScriptDebuggerStarter" />
    <extensionPoint qualifiedName="Pythonid.visitorFilter" beanClass="com.intellij.lang.LanguageExtensionPoint"/>
  </extensionPoints>

  <extensions defaultExtensionNs="Pythonid">
    <pySuperMethodsSearch implementation="com.jetbrains.python.psi.search.PySuperMethodsSearchExecutor"/>
    <pyClassInheritorsSearch implementation="com.jetbrains.python.psi.search.PyClassInheritorsSearchExecutor"/>
    <pyOverridingMethodsSearch implementation="com.jetbrains.python.psi.search.PyOverridingMethodsSearchExecutor"/>
    <runnableScriptFilter implementation="com.jetbrains.python.testing.pytest.PyTestRunnableScriptFilter"/>
    <runnableScriptFilter implementation="com.jetbrains.python.testing.PythonUnitTestRunnableScriptFilter"/>
    <dumbAnnotator implementation="com.jetbrains.python.validation.DocStringAnnotator"/>
    <dumbAnnotator implementation="com.jetbrains.python.validation.PyDefinitionsAnnotator"/>
    <customTargetExpressionStubType implementation="com.jetbrains.python.psi.impl.stubs.PropertyStubType"/>
    <dialectsTokenSetContributor implementation="com.jetbrains.python.PythonTokenSetContributor"/>
    <runConfigurationExtension implementation="com.jetbrains.python.coverage.PythonCoverageRunConfigurationExtension"/>

    <pyClassMembersProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibClassMembersProvider"/>
    <typeProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibTypeProvider"/>
    <pyModuleMembersProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibModuleMembersProvider"/>
    <documentationLinkProvider implementation="com.jetbrains.python.codeInsight.stdlib.PyStdlibDocumentationLinkProvider"/>

    <!-- Django -->
    <pyClassMembersProvider implementation="com.jetbrains.django.codeInsight.DjangoClassMembersProvider"/>
    <typeProvider implementation="com.jetbrains.django.codeInsight.DjangoTypeProvider"/>
    <unresolvedReferenceQuickFixProvider implementation="com.jetbrains.django.ref.DjangoReferenceQuickFixProvider"/>
    <runnableUnitTestFilter implementation="com.jetbrains.django.testRunner.DjangoUnitTestFilter"/>
    <unusedLocalFilter implementation="com.jetbrains.django.codeInsight.DjangoUnusedLocalFilter"/>
    <customTargetExpressionStubType implementation="com.jetbrains.django.model.stubs.DjangoForeignKeyStubType"/>
    <knownDecoratorProvider implementation="com.jetbrains.django.codeInsight.DjangoKnownDecoratorProvider"/>
    <documentationLinkProvider implementation="com.jetbrains.django.codeInsight.DjangoDocumentationLinkProvider"/>
    <templateLanguageCoreTags language="DjangoTemplate" implementationClass="com.jetbrains.django.model.DjangoTagLibrary"/>

    <!-- App Engine -->
    <typeProvider implementation="com.jetbrains.appengine.model.AppEngineTypeProvider"/>
    <pyModuleMembersProvider implementation="com.jetbrains.appengine.model.AppEngineModuleMembersProvider"/>
    <documentationLinkProvider implementation="com.jetbrains.appengine.AppEngineDocumentationLinkProvider"/>

    <!-- Jinja2 -->
    <templateLanguageCoreTags language="Jinja2" implementationClass="com.jetbrains.jinja2.tags.Jinja2TagLibrary"/>

    <!-- Cython -->
    <dialectsTokenSetContributor implementation="com.jetbrains.cython.CythonTokenSetContributor"/>
    <typeProvider implementation="com.jetbrains.cython.types.CythonTypeProvider"/>
    <importResolver implementation="com.jetbrains.cython.PyCythonImportResolver"/>
    <visitorFilter language="Cython" implementationClass="com.jetbrains.cython.CythonVisitorFilter"/>

    <!-- Mako -->
    <dialectsTokenSetContributor implementation="com.jetbrains.mako.MakoTokenSetContributor"/>
    <visitorFilter language="Mako" implementationClass="com.jetbrains.mako.highlighting.MakoVisitorFilter"/>

    <!-- Console -->
    <visitorFilter language="Python" implementationClass="com.jetbrains.python.console.ConsoleVisitorFilter"/>
  </extensions>

  <project-components>
    <component>
      <implementation-class>com.jetbrains.python.PythonPsiManager</implementation-class>
    </component>
    <component>
      <implementation-class>com.jetbrains.django.lang.template.DjangoTemplatePsiManager</implementation-class>
    </component>
  </project-components>

  <actions>
    <action
        id="Devmode.DumpPsi"
        class="com.jetbrains.python.devmode.DumpPsiToClipboardAction"
        text="Dump PSI to clipboard"
        internal="true"
        >
      <add-to-group group-id="ToolsMenu" anchor="after" relative-to-action="Macros"/>
    </action>

    <action id="Devmode.AnalyzeReturns" class="com.jetbrains.python.devmode.AnalyzeReturnsAction" text="Analyze return types"
            internal="true">
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </action>

    <action id="Devmode.AnalyzeTypeParser" class="com.jetbrains.python.devmode.AnalyzeTypeParserAction" text="Analyze type parser"
            internal="true">
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </action>

    <group id="PyTypeHierarchyPopupMenu">
      <reference ref="TypeHierarchyBase.BaseOnThisType"/>
      <reference ref="TypeHierarchy.Class"/>
      <reference ref="TypeHierarchy.Subtypes"/>
      <reference ref="TypeHierarchy.Supertypes"/>
      <separator/>
      <reference ref="EditSource"/>
      <separator/>
      <reference ref="FindUsages"/>
      <reference ref="RefactoringMenu"/>
      <separator/>
      <reference ref="AddToFavorites"/>
      <reference ref="MoveToChangeList"/>
      <separator/>
      <reference ref="RunContextPopupGroup"/>
      <separator/>
      <reference ref="ReformatCode"/>
      <reference ref="OptimizeImports"/>
      <reference ref="$Delete"/>
      <separator/>
      <reference ref="VersionControlsGroup"/>
      <separator/>
      <reference ref="ExternalToolsGroup"/>
      <separator/>
      <reference ref="CompareTwoFiles"/>
      <reference ref="CompareFileWithEditor"/>
    </group>

    <group text="Google App Engine" popup="true">
      <action id="PythonAppEngine.UploadAppAction" class="com.jetbrains.appengine.action.UpdateAppAction"
              text="Upload App Engine app..."
              description="Uploads App Engine application to google server">

      </action>

      <action id="PythonAppEngine.GetLogsAction" class="com.jetbrains.appengine.action.GetLogsAction"
              text="Get App Engine logs..."
              description="Downloads App Engine logs">
      </action>
      <add-to-group group-id="ToolsMenu" anchor="after" relative-to-action="Django.RunManageTaskAction"/>
    </group>
    <action id="com.jetbrains.python.console.RunPythonConsoleAction"
            class="com.jetbrains.python.console.RunPythonConsoleAction"
            text="Run Python Console..." description="Allows to quickly run Python console">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <group text="Django">
      <action id="com.jetbrains.django.console.RunDjangoConsoleAction"
              class="com.jetbrains.django.console.RunDjangoConsoleAction"
              text="Run Django Console..." description="Allows to quickly run Django console">
      </action>

      <action id="Django.RunManageTaskAction" class="com.jetbrains.django.actions.RunManageTaskAction"
              text="Run manage.py task..."
              description="Runs manage.py task">

        <keyboard-shortcut keymap="Mac OS X" first-keystroke="alt R"/>
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt R"/>
        <keyboard-shortcut keymap="Mac OS X 10.5+" first-keystroke="alt R" replace-all="true"/>
        <keyboard-shortcut keymap="Visual Studio" first-keystroke="ctrl alt R" remove="true"/>
        <keyboard-shortcut keymap="Eclipse" first-keystroke="ctrl alt R" remove="true"/>
      </action>

      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="com.jetbrains.rest.actions.sphinx.RunSphinxQuickStartAction"
            class="com.jetbrains.rest.actions.sphinx.RunSphinxQuickStartAction"
            text="Sphinx quickstart" description="Allows to run sphinx quick-start action">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>

    <action id="ExecuteInPyConsoleAction"
            class="com.jetbrains.python.actions.ExecuteInConsoleAction"
            text="Execute selection in console"
            description="Executes selected code fragment in Python/Django console">
      <add-to-group group-id="EditorPopupMenu" anchor="before" relative-to-action="CompareClipboardWithSelection"/>

      <keyboard-shortcut keymap="$default" first-keystroke="alt shift E"/>
      <keyboard-shortcut keymap="Eclipse" first-keystroke="ctrl alt E" replace-all="true"/>
      <keyboard-shortcut keymap="NetBeans 6.5" first-keystroke="ctrl alt E" replace-all="true"/>
    </action>

    <action id="NewPythonFile" class="com.jetbrains.python.actions.CreatePythonFileAction">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml"/>
    </action>

    <action id="NewPythonPackage" class="com.jetbrains.python.actions.CreatePackageAction" text="Python Package"
            description="Create a new directory and __init__.py inside it" icon="/nodes/packageClosed.png">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewDir"/>
    </action>

    <action id="CompuleQrc" class="com.jetbrains.pyqt.CompileQrcAction" text="Compile .qrc file">
      <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="first"/>
    </action>

    <group id="PyCoverageMenu">
      <action id="SwitchPyCoverage" class="com.intellij.coverage.actions.SwitchCoverageSuiteAction" text="Show Code Co_verage Data"
          use-shortcut-of="SwitchCoverage"/>
      <action id="GeneratePyCoverageReport" class="com.intellij.coverage.actions.GenerateCoverageReportAction"
              text="_Generate Coverage Report"/>
      <separator/>
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </group>

    <action id="MarkTemplateDirectory" class="com.jetbrains.python.templateLanguages.MarkTemplateDirectoryAction" text="Template Directory">
      <add-to-group group-id="MarkRootGroup" anchor="after" relative-to-action="MarkSourceRoot"/>
    </action>
  </actions>

  <extensions defaultExtensionNs="com.intellij.spellchecker">
    <support language="Python" implementationClass="com.jetbrains.python.spellchecker.PythonSpellcheckerStrategy"/>
    <support language="ReST" implementationClass="com.jetbrains.python.spellchecker.RestSpellcheckerStrategy"/>
    <bundledDictionaryProvider implementation="com.jetbrains.python.spellchecker.PythonBundledDictionaryProvider"/>
  </extensions>

  <actions>
    <action id="PythonGenerateDictionaries" class="com.jetbrains.python.spellchecker.PythonSpellcheckerGenerateDictionariesAction"
            text="Generate Python Spellchecker Dictionaries" internal="true">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>
  </actions>

  <application-components>
    <component>
      <implementation-class>com.jetbrains.python.testing.VFSTestFrameworkListener</implementation-class>
    </component>
  </application-components>

</idea-plugin>
