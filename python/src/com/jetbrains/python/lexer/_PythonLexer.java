/* The following code was generated by JFlex 1.4.3 on 22.02.11 16:31 */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22.02.11 16:31 from the specification file
 * <tt>C:/JetBrains/IDEA/tools/lexer/../../python/src/com/jetbrains/python/lexer/Python.flex</tt>
 */
class _PythonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\37\1\0\1\42\1\13\22\0\1\40\1\73\1\36"+
    "\1\12\1\0\1\65\1\66\1\34\1\75\1\76\1\63\1\61\1\104"+
    "\1\26\1\23\1\64\1\1\1\5\6\3\2\2\1\105\1\107\1\72"+
    "\1\62\1\71\1\0\1\103\1\15\1\20\2\15\1\25\1\15\3\14"+
    "\1\27\1\14\1\21\2\14\1\17\2\14\1\32\2\14\1\30\2\14"+
    "\1\16\2\14\1\77\1\35\1\100\1\70\1\14\1\106\1\43\1\10"+
    "\1\51\1\45\1\24\1\4\1\56\1\60\1\52\1\27\1\50\1\11"+
    "\1\55\1\44\1\7\1\53\1\14\1\33\1\46\1\47\1\31\1\14"+
    "\1\57\1\6\1\54\1\14\1\101\1\67\1\102\1\74\53\0\1\14"+
    "\12\0\1\14\4\0\1\14\5\0\27\14\1\0\7\14\30\14\1\0"+
    "\10\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\2\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\2\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\2\14"+
    "\1\14\1\14\1\14\1\14\3\14\2\14\1\14\1\14\1\14\2\14"+
    "\1\14\3\14\2\14\4\14\1\14\2\14\1\14\3\14\3\14\2\14"+
    "\1\14\2\14\1\14\1\14\1\14\1\14\1\14\2\14\1\14\1\14"+
    "\2\14\1\14\1\14\2\14\1\14\3\14\1\14\1\14\1\14\2\14"+
    "\2\14\1\14\1\14\3\14\4\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\2\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\2\14\1\14\1\14"+
    "\1\14\1\14\1\14\3\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\4\14\31\0\140\14\22\14\4\0\14\14\16\0\5\14"+
    "\11\0\1\14\21\0\130\22\5\0\23\22\12\0\1\14\13\0\1\14"+
    "\1\0\3\14\1\0\1\14\1\0\2\14\1\14\21\14\1\0\11\14"+
    "\43\14\1\0\2\14\3\14\3\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\5\14\1\14"+
    "\1\14\1\0\1\14\1\14\2\14\1\14\4\0\60\14\60\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\0\4\22\3\0\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\2\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\0\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\2\0\1\14\1\14\6\0\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\41\0\46\14\2\0\1\14\7\0\47\14\11\0"+
    "\21\22\1\0\27\22\1\0\3\22\1\0\1\22\1\0\2\22\1\0"+
    "\1\22\13\0\33\14\5\0\3\14\35\0\6\22\13\0\32\14\5\0"+
    "\1\14\12\14\16\22\7\0\12\22\4\0\2\14\1\22\143\14\1\0"+
    "\1\14\7\22\2\0\6\22\2\14\2\22\1\0\4\22\2\14\12\22"+
    "\3\14\2\0\1\14\20\0\1\14\1\22\36\14\33\22\2\0\3\14"+
    "\60\0\46\14\13\22\1\14\u014f\0\2\22\1\22\66\14\2\0\1\22"+
    "\1\14\3\22\10\22\4\22\1\22\2\0\1\14\4\22\3\0\12\14"+
    "\2\22\2\0\12\22\21\0\1\22\2\22\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\2\0\1\22"+
    "\1\14\3\22\4\22\2\0\2\22\2\0\2\22\1\22\11\0\1\22"+
    "\4\0\2\14\1\0\3\14\2\22\2\0\12\22\2\14\17\0\2\22"+
    "\1\22\1\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14\1\0"+
    "\2\14\1\0\2\14\1\0\2\14\2\0\1\22\1\0\3\22\2\22"+
    "\4\0\2\22\2\0\3\22\13\0\4\14\1\0\1\14\7\0\12\22"+
    "\2\22\3\14\14\0\2\22\1\22\1\0\11\14\1\0\3\14\1\0"+
    "\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\22\1\14"+
    "\3\22\5\22\1\0\2\22\1\22\1\0\2\22\1\22\2\0\1\14"+
    "\17\0\2\14\2\22\2\0\12\22\21\0\1\22\2\22\1\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\22\1\14\1\22\1\22\1\22\3\22\3\0\2\22\2\0"+
    "\2\22\1\22\10\0\1\22\1\22\4\0\2\14\1\0\3\14\4\0"+
    "\12\22\1\0\1\14\20\0\1\22\1\14\1\0\6\14\3\0\3\14"+
    "\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14"+
    "\3\0\3\14\3\0\10\14\1\0\3\14\4\0\2\22\1\22\2\22"+
    "\3\0\3\22\1\0\3\22\1\22\11\0\1\22\17\0\11\22\21\0"+
    "\3\22\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0"+
    "\5\14\4\0\3\22\4\22\1\0\3\22\1\0\4\22\7\0\2\22"+
    "\11\0\2\14\4\0\12\22\22\0\2\22\1\0\10\14\1\0\3\14"+
    "\1\0\27\14\1\0\12\14\1\0\5\14\2\0\1\22\1\14\1\22"+
    "\1\22\5\22\1\0\1\22\2\22\1\0\2\22\2\22\7\0\2\22"+
    "\7\0\1\14\1\0\2\14\4\0\12\22\22\0\2\22\1\0\10\14"+
    "\1\0\3\14\1\0\27\14\1\0\20\14\4\0\3\22\3\22\2\0"+
    "\3\22\1\0\3\22\1\22\11\0\1\22\10\0\2\14\4\0\12\22"+
    "\22\0\2\22\1\0\22\14\3\0\30\14\1\0\11\14\1\0\1\14"+
    "\2\0\7\14\3\0\1\22\4\0\3\22\3\22\1\0\1\22\1\0"+
    "\10\22\22\0\2\22\15\0\60\14\1\22\2\14\7\22\5\0\6\14"+
    "\1\14\10\22\1\0\12\22\47\0\2\14\1\0\1\14\2\0\2\14"+
    "\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14"+
    "\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\22\2\14"+
    "\6\22\1\0\2\22\1\14\2\0\5\14\1\0\1\14\1\0\6\22"+
    "\2\0\12\22\2\0\2\14\42\0\1\14\27\0\2\22\6\0\12\22"+
    "\13\0\1\22\1\0\1\22\1\0\1\22\4\0\2\22\10\14\1\0"+
    "\42\14\6\0\16\22\1\22\5\22\1\0\2\22\4\14\4\0\10\22"+
    "\1\0\44\22\11\0\1\22\71\0\42\14\1\0\5\14\1\0\2\14"+
    "\1\0\1\22\4\22\1\22\1\22\3\0\2\22\1\22\1\22\6\0"+
    "\12\22\6\0\6\14\2\22\2\22\106\0\46\14\12\0\51\14\7\0"+
    "\132\14\5\0\104\14\5\0\122\14\6\0\7\14\1\0\77\14\1\0"+
    "\1\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0"+
    "\47\14\1\0\1\14\1\0\4\14\2\0\37\14\1\0\1\14\1\0"+
    "\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\7\14\1\0"+
    "\7\14\1\0\27\14\1\0\37\14\1\0\1\14\1\0\4\14\2\0"+
    "\7\14\1\0\47\14\1\0\23\14\16\0\11\22\56\0\125\14\14\0"+
    "\u026c\14\2\0\10\14\12\0\32\14\5\0\113\14\3\0\3\14\17\0"+
    "\15\14\1\0\4\14\3\22\13\0\22\14\3\22\13\0\22\14\2\22"+
    "\14\0\15\14\1\0\3\14\1\0\2\22\14\0\64\14\2\0\1\22"+
    "\7\22\10\22\1\22\2\22\13\22\3\0\1\14\4\0\1\14\1\22"+
    "\2\0\12\22\41\0\3\22\2\0\12\22\6\0\43\14\1\14\64\14"+
    "\10\0\51\14\1\22\126\0\35\14\3\0\3\22\4\22\2\22\3\22"+
    "\4\0\2\22\1\22\6\22\3\22\12\0\12\22\36\14\2\0\5\14"+
    "\u038b\0\54\14\66\14\12\14\224\0\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\7\14\4\0\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\6\0\10\14\10\14\6\14"+
    "\2\0\6\14\2\0\10\14\10\14\10\14\10\14\6\14\2\0\6\14"+
    "\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\10\14\10\14\16\14\2\0\10\14\10\14\10\14\10\14\10\14\10\14"+
    "\5\14\1\0\2\14\4\14\1\14\1\0\1\14\3\0\3\14\1\0"+
    "\2\14\4\14\1\14\3\0\4\14\2\0\2\14\4\14\4\0\10\14"+
    "\5\14\5\0\3\14\1\0\2\14\4\14\1\14\102\0\2\22\23\0"+
    "\1\22\34\0\1\14\15\0\1\14\120\0\15\22\4\0\1\22\3\0"+
    "\6\22\27\0\1\14\4\0\1\14\2\0\1\14\3\14\2\14\3\14"+
    "\1\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\4\14\1\0\1\14\2\14\1\0\1\14\1\14\4\14"+
    "\1\14\3\0\1\14\2\14\5\0\1\14\4\14\26\0\44\14\u0e81\0"+
    "\1\14\1\14\1\14\31\0\11\14\6\22\1\0\5\14\2\0\3\14"+
    "\1\14\1\14\4\0\126\14\2\0\2\22\2\0\2\14\1\14\1\0"+
    "\132\14\1\22\3\14\1\14\5\0\50\14\4\0\136\14\21\0\30\14"+
    "\70\0\20\14\u0200\0\u19b6\14\112\0\u51a6\14\132\0\u048d\14\u0773\0\u2ba4\14"+
    "\u215c\0\u012e\14\2\0\73\14\225\0\7\14\14\0\5\14\5\0\1\14"+
    "\1\22\12\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14\2\0\66\14"+
    "\50\0\14\14\4\0\20\22\20\0\4\22\17\0\2\22\30\0\3\22"+
    "\40\0\5\14\1\0\207\14\23\0\12\22\7\0\32\14\4\0\1\22"+
    "\1\0\32\14\12\0\1\22\12\14\1\14\55\14\2\14\37\14\3\0"+
    "\6\14\2\0\6\14\2\0\6\14\2\0\3\14\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\5\3\1\4\1\3\1\5\1\3"+
    "\1\6\2\3\1\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\12\3\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\1\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\2\4\0\1\2\1\43\1\0\1\44\3\3"+
    "\1\45\4\3\1\46\2\3\6\7\7\3\1\47\1\50"+
    "\1\51\5\3\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\3\2\1\43\1\0\1\72\11\3\3\7"+
    "\1\73\1\3\1\74\1\75\1\76\1\77\7\3\1\100"+
    "\1\101\1\102\1\103\1\104\4\3\1\105\1\106\2\3"+
    "\4\0\4\3\1\107\4\3\1\110\3\3\1\111\1\0"+
    "\2\7\1\0\2\3\1\112\1\3\1\113\1\3\1\114"+
    "\1\3\1\115\1\116\1\117\2\7\1\120\1\3\1\121"+
    "\1\122\1\123\2\0\1\3\2\7\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\110\0\u04c8\0\110\0\110\0\110\0\110\0\u0510"+
    "\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750"+
    "\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\110\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\110\0\110"+
    "\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\110\0\u0c60\0\u0ca8"+
    "\0\110\0\u0cf0\0\u0d38\0\u0d80\0\u0168\0\u0dc8\0\u0e10\0\u0e58"+
    "\0\u0ea0\0\110\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050"+
    "\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290"+
    "\0\u12d8\0\u0168\0\u0168\0\u0168\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\110\0\110\0\110\0\u1488\0\110\0\u14d0\0\110"+
    "\0\110\0\110\0\110\0\110\0\u1518\0\110\0\110\0\u1560"+
    "\0\110\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u0168\0\u1710"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950"+
    "\0\110\0\u1998\0\u19e0\0\u0168\0\u1a28\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20"+
    "\0\110\0\110\0\110\0\110\0\u0168\0\u1c68\0\u1cb0\0\u1cf8"+
    "\0\u1d40\0\u0168\0\u0168\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u0168\0\u2058\0\u20a0"+
    "\0\u20e8\0\u2130\0\u0168\0\u2178\0\u21c0\0\u2208\0\u0168\0\u2250"+
    "\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u0168\0\u2400\0\u0168"+
    "\0\u2448\0\u0168\0\u2490\0\u0168\0\u0168\0\u0168\0\u24d8\0\u2520"+
    "\0\u0168\0\u2568\0\u0168\0\u0168\0\u0168\0\u25b0\0\u25f8\0\u2640"+
    "\0\u2250\0\u2328\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\4\6\1\13\1\6\1\2\1\14"+
    "\1\15\1\6\1\16\1\6\2\13\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\6\1\33\1\6\1\34\1\35\1\36\1\37"+
    "\1\6\1\40\1\41\1\6\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\111\0\1\71\1\72\1\71\1\0"+
    "\1\71\1\73\1\74\1\75\1\76\4\0\1\73\1\74"+
    "\1\75\1\76\1\0\1\77\2\100\1\0\1\101\61\0"+
    "\3\4\1\0\1\4\3\0\1\76\7\0\1\76\1\0"+
    "\1\77\2\100\1\0\1\101\61\0\6\6\1\102\2\6"+
    "\2\0\7\6\1\0\2\6\1\0\4\6\1\103\7\0"+
    "\7\6\1\104\6\6\30\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\7\0\16\6\30\0\11\6\2\0"+
    "\7\6\1\0\2\6\1\0\4\6\1\105\7\0\16\6"+
    "\30\0\11\6\2\0\7\6\1\0\2\6\1\0\3\6"+
    "\1\17\1\106\1\21\1\0\1\23\4\0\16\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\1\107\15\6\27\0\13\12\1\0\23\12\1\0\50\12"+
    "\1\0\11\6\2\0\7\6\1\0\2\6\1\0\3\6"+
    "\2\17\1\21\1\0\1\23\4\0\16\6\30\0\3\77"+
    "\1\0\1\77\103\0\5\6\1\110\2\6\1\111\2\0"+
    "\7\6\1\0\2\6\1\0\5\6\7\0\16\6\111\0"+
    "\1\112\26\0\11\6\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\1\21\1\0\1\23\4\0\16\6\30\0\11\6"+
    "\2\0\7\6\1\0\1\113\1\6\1\0\5\6\1\21"+
    "\1\0\1\23\4\0\1\114\15\6\27\0\13\115\1\0"+
    "\20\115\1\116\1\117\1\115\1\0\50\115\13\120\1\0"+
    "\21\120\1\121\1\122\1\0\50\120\1\0\11\6\2\0"+
    "\7\6\1\0\2\6\1\0\5\6\7\0\1\6\1\123"+
    "\1\6\1\124\12\6\30\0\6\6\1\125\2\6\2\0"+
    "\7\6\1\0\2\6\1\0\5\6\7\0\16\6\30\0"+
    "\11\6\2\0\7\6\1\0\1\126\1\6\1\0\5\6"+
    "\7\0\16\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\4\6\1\127\7\0\16\6\30\0\6\6\1\130"+
    "\1\6\1\131\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\16\6\30\0\3\6\1\132\5\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\1\6\1\133\1\6"+
    "\1\134\6\6\1\135\3\6\30\0\11\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\1\136\15\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\7\6\1\137\6\6\30\0\10\6\1\140\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\16\6\30\0\11\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\15\6"+
    "\1\141\111\0\1\142\107\0\1\143\107\0\1\144\1\145"+
    "\106\0\1\146\1\0\1\147\105\0\1\150\107\0\1\151"+
    "\107\0\1\152\107\0\1\153\107\0\1\154\6\0\1\155"+
    "\100\0\1\156\6\0\1\157\1\160\77\0\1\161\26\0"+
    "\1\71\1\72\1\71\1\0\1\71\3\0\1\76\7\0"+
    "\1\76\1\0\1\77\2\100\1\0\1\101\61\0\3\72"+
    "\1\0\1\72\15\0\1\77\2\100\1\0\1\101\61\0"+
    "\5\162\2\0\1\162\4\0\1\162\2\0\1\162\3\0"+
    "\2\162\15\0\1\162\1\0\1\162\3\0\1\162\37\0"+
    "\1\163\1\0\1\163\1\0\1\163\103\0\1\164\3\0"+
    "\1\164\103\0\3\77\1\0\1\77\16\0\2\100\1\0"+
    "\1\101\61\0\3\165\1\0\1\165\20\0\1\166\32\0"+
    "\1\166\27\0\11\6\2\0\7\6\1\0\2\6\1\0"+
    "\4\6\1\167\7\0\16\6\30\0\6\6\1\170\2\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\16\6"+
    "\30\0\11\6\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\1\6\1\171\14\6\30\0\11\6\2\0\7\6"+
    "\1\0\1\172\1\6\1\0\5\6\1\21\1\0\1\23"+
    "\4\0\16\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\12\6\1\173\3\6\30\0\11\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\6\6"+
    "\1\174\7\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\3\6\1\175\3\6\1\176\6\6"+
    "\30\0\11\6\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\4\6\1\177\11\6\30\0\11\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\7\6\1\200\6\6"+
    "\27\0\13\115\1\0\20\115\1\201\1\117\1\115\1\0"+
    "\50\115\34\0\1\202\53\0\110\115\13\120\1\0\21\120"+
    "\1\121\1\201\1\0\160\120\36\0\1\203\52\0\11\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\2\6"+
    "\1\204\13\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\3\6\1\205\12\6\30\0\11\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\4\6"+
    "\1\206\11\6\30\0\3\6\1\207\4\6\1\210\2\0"+
    "\7\6\1\0\2\6\1\0\5\6\7\0\16\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\11\6\1\211\4\6\30\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\7\0\1\6\1\212\14\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\1\213\15\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\10\6\1\214\5\6\30\0\11\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\3\6"+
    "\1\215\12\6\30\0\11\6\2\0\7\6\1\0\1\216"+
    "\1\6\1\0\5\6\7\0\16\6\30\0\6\6\1\217"+
    "\2\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\16\6\30\0\11\6\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\7\0\7\6\1\220\6\6\111\0\1\221\107\0"+
    "\1\222\107\0\1\223\107\0\1\224\26\0\5\162\2\0"+
    "\1\162\1\76\3\0\1\162\2\0\1\162\1\76\2\0"+
    "\2\162\15\0\1\162\1\0\1\162\3\0\1\162\37\0"+
    "\1\163\1\0\1\163\1\0\1\163\3\0\1\76\7\0"+
    "\1\76\67\0\1\164\3\0\1\164\3\0\1\76\7\0"+
    "\1\76\67\0\3\165\1\0\1\165\21\0\1\101\61\0"+
    "\3\165\1\0\1\165\103\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\7\0\12\6\1\225\3\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\1\226\15\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\1\227\15\6\30\0\7\6\1\230"+
    "\1\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\16\6\30\0\11\6\2\0\7\6\1\0\1\231\1\6"+
    "\1\0\5\6\7\0\16\6\30\0\11\6\2\0\7\6"+
    "\1\0\1\232\1\6\1\0\5\6\7\0\16\6\30\0"+
    "\3\6\1\233\5\6\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\7\0\16\6\30\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\234\2\6\7\0\16\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\3\6\1\235\12\6\27\0\34\202\1\236\1\237\52\202"+
    "\35\203\1\240\1\241\51\203\1\0\11\6\2\0\7\6"+
    "\1\0\1\242\1\6\1\0\5\6\7\0\16\6\30\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\4\6\1\243\11\6\30\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\7\0\3\6\1\244\12\6\30\0"+
    "\6\6\1\245\2\6\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\7\0\16\6\30\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\7\0\3\6\1\246\12\6\30\0"+
    "\10\6\1\247\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\16\6\30\0\7\6\1\250\1\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\16\6\30\0\10\6"+
    "\1\251\2\0\7\6\1\0\2\6\1\0\5\6\7\0"+
    "\16\6\30\0\10\6\1\252\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\16\6\30\0\11\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\5\6\1\253\10\6"+
    "\30\0\11\6\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\2\6\1\254\13\6\30\0\11\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\10\6\1\255\5\6"+
    "\30\0\11\6\2\0\7\6\1\0\2\6\1\0\4\6"+
    "\1\256\7\0\16\6\30\0\11\6\2\0\7\6\1\0"+
    "\1\257\1\6\1\0\5\6\7\0\16\6\27\0\34\202"+
    "\1\260\1\261\162\202\145\203\1\262\1\263\51\203\1\0"+
    "\11\6\2\0\7\6\1\0\2\6\1\0\4\6\1\264"+
    "\7\0\16\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\7\6\1\265\6\6\30\0\11\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\7\0\3\6"+
    "\1\266\12\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\4\6\1\267\7\0\16\6\30\0\11\6\2\0"+
    "\7\6\1\0\2\6\1\0\5\6\7\0\2\6\1\270"+
    "\13\6\30\0\11\6\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\7\0\1\271\15\6\30\0\11\6\2\0\7\6"+
    "\1\0\1\272\1\6\1\0\5\6\7\0\16\6\30\0"+
    "\10\6\1\273\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\16\6\30\0\11\6\2\0\7\6\1\0\2\6"+
    "\1\0\5\6\7\0\1\274\15\6\30\0\11\6\2\0"+
    "\7\6\1\0\2\6\1\0\5\6\7\0\4\6\1\275"+
    "\11\6\30\0\11\6\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\7\0\1\6\1\276\14\6\27\0\34\202\1\201"+
    "\1\261\106\202\1\277\1\261\52\202\35\203\1\262\1\300"+
    "\106\203\1\262\1\201\51\203\1\0\11\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\4\6\1\301\11\6"+
    "\30\0\11\6\2\0\7\6\1\0\2\6\1\0\5\6"+
    "\7\0\1\6\1\302\14\6\30\0\11\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\7\0\4\6\1\303\11\6"+
    "\30\0\10\6\1\304\2\0\7\6\1\0\2\6\1\0"+
    "\5\6\7\0\16\6\30\0\11\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\7\0\11\6\1\305\4\6\27\0"+
    "\34\202\1\306\1\261\52\202\35\203\1\262\1\307\51\203"+
    "\1\0\11\6\2\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\310\2\6\7\0\16\6\27\0\34\202\1\311\1\261"+
    "\52\202\35\203\1\262\1\312\51\203\1\0\11\6\2\0"+
    "\7\6\1\0\1\313\1\6\1\0\5\6\7\0\16\6"+
    "\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\1\1\4\11\25\1\14\11"+
    "\1\1\4\0\1\11\1\1\1\0\1\11\10\1\1\11"+
    "\27\1\3\11\1\1\1\11\1\1\5\11\1\1\2\11"+
    "\1\1\1\11\4\1\1\0\12\1\1\11\17\1\4\11"+
    "\11\1\4\0\16\1\1\0\2\1\1\0\22\1\2\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PythonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3336) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 75: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 85: break;
        case 2: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 86: break;
        case 16: 
          { return PyTokenTypes.DIV;
          }
        case 87: break;
        case 17: 
          { return PyTokenTypes.PERC;
          }
        case 88: break;
        case 8: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 89: break;
        case 25: 
          { return PyTokenTypes.RPAR;
          }
        case 90: break;
        case 1: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 91: break;
        case 28: 
          { return PyTokenTypes.LBRACE;
          }
        case 92: break;
        case 6: 
          { return PyTokenTypes.MINUS;
          }
        case 93: break;
        case 72: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 94: break;
        case 27: 
          { return PyTokenTypes.RBRACKET;
          }
        case 95: break;
        case 5: 
          { return PyTokenTypes.DOT;
          }
        case 96: break;
        case 3: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 97: break;
        case 24: 
          { return PyTokenTypes.LPAR;
          }
        case 98: break;
        case 22: 
          { return PyTokenTypes.LT;
          }
        case 99: break;
        case 40: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 100: break;
        case 73: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 101: break;
        case 7: 
          { return PyTokenTypes.STRING_LITERAL;
          }
        case 102: break;
        case 66: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 103: break;
        case 10: 
          { return PyTokenTypes.SPACE;
          }
        case 104: break;
        case 78: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 105: break;
        case 36: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 106: break;
        case 12: 
          { return PyTokenTypes.FORMFEED;
          }
        case 107: break;
        case 34: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 108: break;
        case 21: 
          { return PyTokenTypes.GT;
          }
        case 109: break;
        case 26: 
          { return PyTokenTypes.LBRACKET;
          }
        case 110: break;
        case 32: 
          { return PyTokenTypes.COLON;
          }
        case 111: break;
        case 67: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 112: break;
        case 19: 
          { return PyTokenTypes.OR;
          }
        case 113: break;
        case 69: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 114: break;
        case 44: 
          { return PyTokenTypes.MULTEQ;
          }
        case 115: break;
        case 83: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 116: break;
        case 76: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 117: break;
        case 15: 
          { return PyTokenTypes.MULT;
          }
        case 118: break;
        case 80: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 119: break;
        case 47: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 120: break;
        case 82: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 121: break;
        case 77: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 122: break;
        case 51: 
          { return PyTokenTypes.XOREQ;
          }
        case 123: break;
        case 58: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 124: break;
        case 30: 
          { return PyTokenTypes.AT;
          }
        case 125: break;
        case 60: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 126: break;
        case 13: 
          { return PyTokenTypes.PLUS;
          }
        case 127: break;
        case 38: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 128: break;
        case 57: 
          { return PyTokenTypes.NE;
          }
        case 129: break;
        case 31: 
          { return PyTokenTypes.COMMA;
          }
        case 130: break;
        case 43: 
          { return PyTokenTypes.EQEQ;
          }
        case 131: break;
        case 33: 
          { return PyTokenTypes.TICK;
          }
        case 132: break;
        case 45: 
          { return PyTokenTypes.EXP;
          }
        case 133: break;
        case 84: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 134: break;
        case 56: 
          { return PyTokenTypes.LTLT;
          }
        case 135: break;
        case 54: 
          { return PyTokenTypes.LE;
          }
        case 136: break;
        case 59: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 137: break;
        case 37: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 138: break;
        case 71: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 139: break;
        case 4: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 140: break;
        case 50: 
          { return PyTokenTypes.OREQ;
          }
        case 141: break;
        case 53: 
          { return PyTokenTypes.GTGT;
          }
        case 142: break;
        case 18: 
          { return PyTokenTypes.AND;
          }
        case 143: break;
        case 46: 
          { return PyTokenTypes.DIVEQ;
          }
        case 144: break;
        case 79: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 145: break;
        case 81: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 146: break;
        case 52: 
          { return PyTokenTypes.GE;
          }
        case 147: break;
        case 42: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 148: break;
        case 61: 
          { return PyTokenTypes.DEF_KEYWORD;
          }
        case 149: break;
        case 41: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 150: break;
        case 35: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 151: break;
        case 65: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 152: break;
        case 9: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 153: break;
        case 48: 
          { return PyTokenTypes.PERCEQ;
          }
        case 154: break;
        case 63: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 155: break;
        case 49: 
          { return PyTokenTypes.ANDEQ;
          }
        case 156: break;
        case 14: 
          { return PyTokenTypes.EQ;
          }
        case 157: break;
        case 68: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 158: break;
        case 64: 
          { return PyTokenTypes.EXPEQ;
          }
        case 159: break;
        case 70: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 160: break;
        case 29: 
          { return PyTokenTypes.RBRACE;
          }
        case 161: break;
        case 74: 
          { return PyTokenTypes.CLASS_KEYWORD;
          }
        case 162: break;
        case 39: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 163: break;
        case 11: 
          { return PyTokenTypes.TAB;
          }
        case 164: break;
        case 55: 
          { return PyTokenTypes.NE_OLD;
          }
        case 165: break;
        case 23: 
          { return PyTokenTypes.TILDE;
          }
        case 166: break;
        case 20: 
          { return PyTokenTypes.XOR;
          }
        case 167: break;
        case 62: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 168: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
