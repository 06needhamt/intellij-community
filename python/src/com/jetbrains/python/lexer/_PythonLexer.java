/* The following code was generated by JFlex 1.4.3 on 5/28/13 2:23 PM */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/28/13 2:23 PM from the specification file
 * <tt>/home/ktisha/IDEA/tools/lexer/../../python/src/com/jetbrains/python/lexer/Python.flex</tt>
 */
class _PythonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int PENDING_DOCSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\37\1\43\1\42\1\13\22\0\1\40\1\74\1\36"+
    "\1\12\1\0\1\66\1\67\1\34\1\76\1\77\1\64\1\62\1\105"+
    "\1\26\1\23\1\65\1\1\1\5\6\3\2\2\1\106\1\110\1\73"+
    "\1\63\1\72\1\0\1\104\1\15\1\20\1\31\1\15\1\25\1\15"+
    "\3\14\1\27\1\14\1\21\2\14\1\17\2\14\1\32\2\14\1\32"+
    "\2\14\1\16\2\14\1\100\1\35\1\101\1\71\1\14\1\107\1\44"+
    "\1\10\1\30\1\46\1\24\1\4\1\57\1\61\1\53\1\27\1\52"+
    "\1\11\1\56\1\45\1\7\1\54\1\14\1\50\1\47\1\51\1\33"+
    "\1\14\1\60\1\6\1\55\1\14\1\102\1\70\1\103\1\75\6\0"+
    "\1\43\44\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\0"+
    "\7\14\30\14\1\0\10\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\2\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\2\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\2\14\1\14\1\14\1\14\1\14\3\14\2\14\1\14"+
    "\1\14\1\14\2\14\1\14\3\14\2\14\4\14\1\14\2\14\1\14"+
    "\3\14\3\14\2\14\1\14\2\14\1\14\1\14\1\14\1\14\1\14"+
    "\2\14\1\14\1\14\2\14\1\14\1\14\2\14\1\14\3\14\1\14"+
    "\1\14\1\14\2\14\2\14\1\14\1\14\3\14\4\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\2\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\2\14\1\14\1\14\1\14\1\14\1\14\3\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\4\14\31\0\140\14\22\14\4\0"+
    "\14\14\16\0\5\14\11\0\1\14\21\0\130\22\5\0\23\22\12\0"+
    "\1\14\13\0\1\14\1\0\3\14\1\0\1\14\1\0\2\14\1\14"+
    "\21\14\1\0\11\14\43\14\1\0\2\14\3\14\3\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\5\14\1\14\1\14\1\0\1\14\1\14\2\14\1\14\4\0"+
    "\60\14\60\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\0\4\22\3\0\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\2\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\0\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\2\0\1\14\1\14\6\0"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\41\0\46\14\2\0\1\14"+
    "\7\0\47\14\11\0\21\22\1\0\27\22\1\0\3\22\1\0\1\22"+
    "\1\0\2\22\1\0\1\22\13\0\33\14\5\0\3\14\35\0\6\22"+
    "\13\0\32\14\5\0\1\14\12\14\16\22\7\0\12\22\4\0\2\14"+
    "\1\22\143\14\1\0\1\14\7\22\2\0\6\22\2\14\2\22\1\0"+
    "\4\22\2\14\12\22\3\14\2\0\1\14\20\0\1\14\1\22\36\14"+
    "\33\22\2\0\3\14\60\0\46\14\13\22\1\14\u014f\0\2\22\1\22"+
    "\66\14\2\0\1\22\1\14\3\22\10\22\4\22\1\22\2\0\1\14"+
    "\4\22\3\0\12\14\2\22\2\0\12\22\21\0\1\22\2\22\1\0"+
    "\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0"+
    "\4\14\2\0\1\22\1\14\3\22\4\22\2\0\2\22\2\0\2\22"+
    "\1\22\11\0\1\22\4\0\2\14\1\0\3\14\2\22\2\0\12\22"+
    "\2\14\17\0\2\22\1\22\1\0\6\14\4\0\2\14\2\0\26\14"+
    "\1\0\7\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\22"+
    "\1\0\3\22\2\22\4\0\2\22\2\0\3\22\13\0\4\14\1\0"+
    "\1\14\7\0\12\22\2\22\3\14\14\0\2\22\1\22\1\0\11\14"+
    "\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\22\1\14\3\22\5\22\1\0\2\22\1\22\1\0\2\22"+
    "\1\22\2\0\1\14\17\0\2\14\2\22\2\0\12\22\21\0\1\22"+
    "\2\22\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\22\1\14\1\22\1\22\1\22\3\22"+
    "\3\0\2\22\2\0\2\22\1\22\10\0\1\22\1\22\4\0\2\14"+
    "\1\0\3\14\4\0\12\22\1\0\1\14\20\0\1\22\1\14\1\0"+
    "\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0"+
    "\2\14\3\0\2\14\3\0\3\14\3\0\10\14\1\0\3\14\4\0"+
    "\2\22\1\22\2\22\3\0\3\22\1\0\3\22\1\22\11\0\1\22"+
    "\17\0\11\22\21\0\3\22\1\0\10\14\1\0\3\14\1\0\27\14"+
    "\1\0\12\14\1\0\5\14\4\0\3\22\4\22\1\0\3\22\1\0"+
    "\4\22\7\0\2\22\11\0\2\14\4\0\12\22\22\0\2\22\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0\5\14\2\0"+
    "\1\22\1\14\1\22\1\22\5\22\1\0\1\22\2\22\1\0\2\22"+
    "\2\22\7\0\2\22\7\0\1\14\1\0\2\14\4\0\12\22\22\0"+
    "\2\22\1\0\10\14\1\0\3\14\1\0\27\14\1\0\20\14\4\0"+
    "\3\22\3\22\2\0\3\22\1\0\3\22\1\22\11\0\1\22\10\0"+
    "\2\14\4\0\12\22\22\0\2\22\1\0\22\14\3\0\30\14\1\0"+
    "\11\14\1\0\1\14\2\0\7\14\3\0\1\22\4\0\3\22\3\22"+
    "\1\0\1\22\1\0\10\22\22\0\2\22\15\0\60\14\1\22\2\14"+
    "\7\22\5\0\6\14\1\14\10\22\1\0\12\22\47\0\2\14\1\0"+
    "\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0"+
    "\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0"+
    "\4\14\1\22\2\14\6\22\1\0\2\22\1\14\2\0\5\14\1\0"+
    "\1\14\1\0\6\22\2\0\12\22\2\0\2\14\42\0\1\14\27\0"+
    "\2\22\6\0\12\22\13\0\1\22\1\0\1\22\1\0\1\22\4\0"+
    "\2\22\10\14\1\0\42\14\6\0\16\22\1\22\5\22\1\0\2\22"+
    "\4\14\4\0\10\22\1\0\44\22\11\0\1\22\71\0\42\14\1\0"+
    "\5\14\1\0\2\14\1\0\1\22\4\22\1\22\1\22\3\0\2\22"+
    "\1\22\1\22\6\0\12\22\6\0\6\14\2\22\2\22\106\0\46\14"+
    "\12\0\51\14\7\0\132\14\5\0\104\14\5\0\122\14\6\0\7\14"+
    "\1\0\77\14\1\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14"+
    "\1\0\4\14\2\0\47\14\1\0\1\14\1\0\4\14\2\0\37\14"+
    "\1\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\0\7\14\1\0\27\14\1\0\37\14\1\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\47\14\1\0\23\14\16\0\11\22"+
    "\56\0\125\14\14\0\u026c\14\2\0\10\14\12\0\32\14\5\0\113\14"+
    "\3\0\3\14\17\0\15\14\1\0\4\14\3\22\13\0\22\14\3\22"+
    "\13\0\22\14\2\22\14\0\15\14\1\0\3\14\1\0\2\22\14\0"+
    "\64\14\2\0\1\22\7\22\10\22\1\22\2\22\13\22\3\0\1\14"+
    "\4\0\1\14\1\22\2\0\12\22\41\0\3\22\2\0\12\22\6\0"+
    "\43\14\1\14\64\14\10\0\51\14\1\22\126\0\35\14\3\0\3\22"+
    "\4\22\2\22\3\22\4\0\2\22\1\22\6\22\3\22\12\0\12\22"+
    "\36\14\2\0\5\14\u038b\0\54\14\66\14\12\14\224\0\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\7\14\4\0\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\6\0"+
    "\10\14\10\14\6\14\2\0\6\14\2\0\10\14\10\14\10\14\10\14"+
    "\6\14\2\0\6\14\2\0\10\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\10\14\10\14\16\14\2\0\10\14\10\14\10\14"+
    "\10\14\10\14\10\14\5\14\1\0\2\14\4\14\1\14\1\0\1\14"+
    "\3\0\3\14\1\0\2\14\4\14\1\14\3\0\4\14\2\0\2\14"+
    "\4\14\4\0\10\14\5\14\5\0\3\14\1\0\2\14\4\14\1\14"+
    "\53\0\2\43\25\0\2\22\23\0\1\22\34\0\1\14\15\0\1\14"+
    "\120\0\15\22\4\0\1\22\3\0\6\22\27\0\1\14\4\0\1\14"+
    "\2\0\1\14\3\14\2\14\3\14\1\14\1\0\1\14\3\0\5\14"+
    "\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0\1\14"+
    "\2\14\1\0\1\14\1\14\4\14\1\14\3\0\1\14\2\14\5\0"+
    "\1\14\4\14\26\0\44\14\u0e81\0\1\14\1\14\1\14\31\0\11\14"+
    "\6\22\1\0\5\14\2\0\3\14\1\14\1\14\4\0\126\14\2\0"+
    "\2\22\2\0\2\14\1\14\1\0\132\14\1\22\3\14\1\14\5\0"+
    "\50\14\4\0\136\14\21\0\30\14\70\0\20\14\u0200\0\u19b6\14\112\0"+
    "\u51a6\14\132\0\u048d\14\u0773\0\u2ba4\14\u215c\0\u012e\14\2\0\73\14\225\0"+
    "\7\14\14\0\5\14\5\0\1\14\1\22\12\14\1\0\15\14\1\0"+
    "\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\154\14\41\0"+
    "\u016b\14\22\0\100\14\2\0\66\14\50\0\14\14\4\0\20\22\20\0"+
    "\4\22\17\0\2\22\30\0\3\22\40\0\5\14\1\0\207\14\23\0"+
    "\12\22\7\0\32\14\4\0\1\22\1\0\32\14\12\0\1\22\12\14"+
    "\1\14\55\14\2\14\37\14\3\0\6\14\2\0\6\14\2\0\6\14"+
    "\2\0\3\14\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\5\3\1\4\1\3\1\5\1\3"+
    "\1\6\1\3\1\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\12\3\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\1\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\2\43\2\44\3\3\2\7\1\3\1\40\1\2"+
    "\4\0\1\2\1\45\1\0\1\46\3\3\1\47\5\3"+
    "\1\50\2\3\1\7\1\51\2\7\2\51\3\7\1\51"+
    "\7\3\1\52\1\53\1\54\5\3\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\0\3\44\1\75"+
    "\3\44\2\3\6\7\1\76\1\0\3\2\1\45\1\0"+
    "\1\77\12\3\1\7\1\100\1\101\2\51\1\101\1\102"+
    "\1\3\1\103\1\104\1\105\2\3\1\106\5\3\1\107"+
    "\1\110\1\111\1\112\1\0\1\44\1\113\1\114\1\0"+
    "\1\113\1\3\1\7\2\101\1\115\1\3\2\0\3\3"+
    "\1\116\1\117\2\3\1\120\2\0\2\120\2\0\1\120"+
    "\4\3\1\121\3\3\3\0\2\114\7\0\1\3\2\0"+
    "\1\122\3\3\1\123\1\124\1\0\1\101\1\124\1\101"+
    "\1\0\2\3\1\125\1\3\1\126\1\3\1\127\3\0"+
    "\2\113\4\0\2\101\1\0\1\3\1\130\1\131\1\3"+
    "\3\101\1\132\1\133\1\134\1\135\3\113\3\101\1\136"+
    "\1\3\2\120\6\0\1\137\1\124\2\101\2\113\2\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\333\0\u0522\0\333\0\333\0\333\0\333"+
    "\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a"+
    "\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2"+
    "\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\333\0\333\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\333\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\333\0\u0faf\0\u0ff8\0\333\0\u1041\0\u108a\0\u10d3"+
    "\0\u01ff\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\333\0\u1289"+
    "\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\333\0\u131b\0\u143f"+
    "\0\u1488\0\u14d1\0\u143f\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u01ff\0\u01ff\0\u01ff\0\u1719\0\u1762\0\u17ab"+
    "\0\u17f4\0\u183d\0\333\0\333\0\333\0\u1886\0\333\0\u18cf"+
    "\0\333\0\333\0\333\0\333\0\333\0\u1918\0\333\0\333"+
    "\0\u1961\0\333\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\333\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u1da8\0\333\0\u0df9\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc"+
    "\0\u1f15\0\u01ff\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb"+
    "\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\333\0\u2281\0\u22ca"+
    "\0\u2313\0\u235c\0\u01ff\0\u23a5\0\u01ff\0\u01ff\0\u01ff\0\u23ee"+
    "\0\u2437\0\u01ff\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\333"+
    "\0\333\0\333\0\333\0\u25ed\0\u2636\0\u267f\0\333\0\u2636"+
    "\0\u26c8\0\u2711\0\333\0\u275a\0\u27a3\0\u01ff\0\u27ec\0\u2835"+
    "\0\u287e\0\u28c7\0\u2910\0\u2959\0\u01ff\0\u01ff\0\u29a2\0\u29eb"+
    "\0\u2a34\0\u2a7d\0\u2ac6\0\u2281\0\u2b0f\0\u2b58\0\u2ba1\0\u235c"+
    "\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u01ff\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8"+
    "\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u01ff"+
    "\0\u3230\0\u3279\0\u32c2\0\u01ff\0\u2281\0\u330b\0\u3354\0\u235c"+
    "\0\u339d\0\u33e6\0\u342f\0\u3478\0\u01ff\0\u34c1\0\u01ff\0\u350a"+
    "\0\u01ff\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u1c84"+
    "\0\u1da8\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u01ff\0\u01ff"+
    "\0\u3876\0\u38bf\0\u3908\0\u3951\0\u01ff\0\u01ff\0\u01ff\0\u01ff"+
    "\0\u2636\0\u399a\0\u39e3\0\333\0\u3a2c\0\u3a75\0\u01ff\0\u3abe"+
    "\0\u3b07\0\333\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd"+
    "\0\u01ff\0\333\0\u3d06\0\u3d4f\0\u35e5\0\u36c0\0\u3709\0\u37e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\4\4\10\1\15\1\10\1\4\1\16"+
    "\1\17\1\10\1\20\1\10\1\21\3\15\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\4\1\31\1\32"+
    "\1\33\1\10\1\34\1\35\1\10\1\36\1\37\1\40"+
    "\1\10\1\41\1\42\1\10\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\10\72\1\73\1\72\1\14\5\72"+
    "\1\73\7\72\4\73\1\74\1\23\1\75\1\25\1\26"+
    "\1\27\1\30\5\72\1\73\40\72\1\4\1\5\2\6"+
    "\1\7\1\6\1\10\1\11\1\76\1\13\1\14\1\4"+
    "\4\10\1\77\1\10\1\4\1\16\1\17\1\10\1\20"+
    "\1\10\1\100\3\77\1\101\1\23\1\102\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\10\1\103"+
    "\1\35\1\10\1\36\1\37\1\40\1\10\1\41\1\42"+
    "\1\10\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\104\1\70\1\71"+
    "\112\0\1\105\1\106\1\105\1\0\1\105\1\107\1\110"+
    "\1\111\1\112\4\0\1\107\1\110\1\111\1\112\1\0"+
    "\1\113\2\114\1\0\1\115\62\0\3\6\1\0\1\6"+
    "\3\0\1\112\7\0\1\112\1\0\1\113\2\114\1\0"+
    "\1\115\62\0\6\10\1\116\2\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\4\10\1\117\2\10\1\120"+
    "\6\10\30\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\16\10\30\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\4\10\1\121\11\10\30\0"+
    "\7\10\1\122\1\10\2\0\4\10\1\122\2\10\1\0"+
    "\2\10\1\0\1\10\4\122\1\22\1\0\1\24\5\0"+
    "\4\10\1\123\11\10\30\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\1\124\15\10\27\0\13\14"+
    "\1\0\23\14\1\0\51\14\1\0\7\10\1\122\1\10"+
    "\2\0\4\10\1\122\2\10\1\0\2\10\1\0\1\10"+
    "\4\122\1\22\1\0\1\24\5\0\4\10\1\122\11\10"+
    "\30\0\3\113\1\0\1\113\104\0\5\10\1\125\2\10"+
    "\1\126\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\16\10\112\0\1\127\26\0\6\10\1\130\1\122\1\131"+
    "\2\0\4\10\1\122\2\10\1\0\2\10\1\0\1\10"+
    "\4\122\1\22\1\0\1\24\5\0\4\10\1\122\11\10"+
    "\27\0\13\132\1\133\20\132\1\134\1\135\1\132\1\136"+
    "\2\132\2\137\45\132\13\140\1\133\21\140\1\141\1\142"+
    "\1\136\2\140\2\143\45\140\1\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\1\10\1\144\1\10"+
    "\1\145\12\10\30\0\6\10\1\146\2\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\16\10\30\0\11\10"+
    "\2\0\7\10\1\0\1\147\1\10\1\0\5\10\10\0"+
    "\16\10\30\0\7\10\1\122\1\10\2\0\4\10\1\122"+
    "\2\10\1\0\1\150\1\10\1\0\1\10\4\122\1\22"+
    "\1\0\1\24\5\0\1\151\3\10\1\122\11\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\4\10\1\152\11\10\30\0\3\10\1\153\5\10\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\1\10\1\154"+
    "\1\10\1\155\6\10\1\156\3\10\30\0\11\10\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\1\157\15\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\7\10\1\160\6\10\30\0\10\10\1\161\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\16\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\15\10\1\162\112\0\1\163\110\0\1\164\110\0\1\165"+
    "\1\166\107\0\1\167\1\0\1\170\106\0\1\171\110\0"+
    "\1\172\110\0\1\173\110\0\1\174\110\0\1\175\6\0"+
    "\1\176\101\0\1\177\6\0\1\200\1\201\100\0\1\202"+
    "\35\0\1\203\7\0\1\203\7\0\4\203\1\74\1\0"+
    "\1\75\11\0\1\203\40\0\13\204\1\0\20\204\1\205"+
    "\1\206\1\204\1\207\51\204\13\210\1\0\21\210\1\211"+
    "\1\212\1\207\51\210\1\0\7\10\1\213\1\10\2\0"+
    "\4\10\1\213\2\10\1\0\2\10\1\0\1\10\4\213"+
    "\1\101\1\0\1\102\5\0\4\10\1\214\11\10\30\0"+
    "\7\10\1\213\1\10\2\0\4\10\1\213\2\10\1\0"+
    "\2\10\1\0\1\10\4\213\1\101\1\0\1\102\5\0"+
    "\4\10\1\213\11\10\30\0\6\10\1\130\1\213\1\131"+
    "\2\0\4\10\1\213\2\10\1\0\2\10\1\0\1\10"+
    "\4\213\1\101\1\0\1\102\5\0\4\10\1\213\11\10"+
    "\27\0\13\215\1\0\20\215\1\216\1\217\1\215\1\0"+
    "\51\215\13\220\1\0\21\220\1\221\1\222\1\0\51\220"+
    "\1\0\7\10\1\213\1\10\2\0\4\10\1\213\2\10"+
    "\1\0\1\150\1\10\1\0\1\10\4\213\1\101\1\0"+
    "\1\102\5\0\1\151\3\10\1\213\11\10\66\0\1\223"+
    "\1\224\51\0\1\105\1\106\1\105\1\0\1\105\3\0"+
    "\1\112\7\0\1\112\1\0\1\113\2\114\1\0\1\115"+
    "\62\0\3\106\1\0\1\106\15\0\1\113\2\114\1\0"+
    "\1\115\62\0\5\225\2\0\1\225\4\0\1\225\2\0"+
    "\1\225\3\0\2\225\2\0\2\225\12\0\1\225\1\0"+
    "\1\225\43\0\1\226\1\0\1\226\1\0\1\226\104\0"+
    "\1\227\3\0\1\227\104\0\3\113\1\0\1\113\16\0"+
    "\2\114\1\0\1\115\62\0\3\230\1\0\1\230\20\0"+
    "\1\231\33\0\1\231\27\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\4\10\1\232\11\10\30\0"+
    "\6\10\1\233\2\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\16\10\30\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\1\10\1\234\14\10\30\0"+
    "\7\10\1\235\1\10\2\0\4\10\1\235\2\10\1\0"+
    "\2\10\1\0\1\10\4\235\1\22\1\0\1\24\5\0"+
    "\4\10\1\235\11\10\30\0\7\10\1\235\1\10\2\0"+
    "\4\10\1\235\2\10\1\0\1\236\1\10\1\0\1\10"+
    "\4\235\1\22\1\0\1\24\5\0\4\10\1\235\11\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\12\10\1\237\3\10\30\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\1\10\1\240\3\10\10\0\16\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\3\10\1\241\3\10\1\242\6\10\30\0\11\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\10\0\1\10"+
    "\1\243\14\10\30\0\11\10\2\0\7\10\1\0\2\10"+
    "\1\0\5\10\10\0\1\244\15\10\27\0\13\132\1\133"+
    "\20\132\1\245\1\135\1\132\1\136\2\132\2\137\45\132"+
    "\37\0\1\246\64\0\1\133\20\0\1\247\2\0\1\136"+
    "\2\0\2\136\45\0\13\132\1\250\23\132\1\137\2\132"+
    "\2\137\45\132\13\140\1\133\21\140\1\141\1\245\1\136"+
    "\2\140\2\143\60\140\1\251\23\140\1\143\2\140\2\143"+
    "\45\140\13\0\1\133\22\0\1\252\1\136\2\0\2\136"+
    "\46\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\2\10\1\253\13\10\30\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\3\10\1\254\12\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\5\10\1\255\10\10\30\0\3\10\1\256\4\10"+
    "\1\257\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\16\10\30\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\5\10\1\260\10\10\30\0\11\10\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\7\10\1\261"+
    "\6\10\30\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\11\10\1\262\4\10\30\0\11\10\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\10\10\1\263"+
    "\5\10\30\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\3\10\1\264\12\10\30\0\11\10\2\0"+
    "\7\10\1\0\1\265\1\10\1\0\5\10\10\0\16\10"+
    "\30\0\6\10\1\266\2\10\2\0\7\10\1\0\2\10"+
    "\1\0\5\10\10\0\16\10\30\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\7\10\1\267\6\10"+
    "\112\0\1\270\110\0\1\271\110\0\1\272\110\0\1\273"+
    "\35\0\1\274\7\0\1\274\7\0\4\274\1\74\1\0"+
    "\1\75\11\0\1\274\40\0\13\204\1\0\20\204\1\275"+
    "\1\206\1\204\1\207\51\204\34\0\1\276\1\277\1\0"+
    "\1\207\2\300\46\0\1\207\111\204\13\210\1\0\21\210"+
    "\1\211\1\275\1\207\162\210\35\0\1\277\1\301\1\207"+
    "\2\300\46\0\1\207\1\0\7\10\1\302\1\10\2\0"+
    "\4\10\1\302\2\10\1\0\2\10\1\0\1\10\4\302"+
    "\1\101\1\0\1\102\5\0\4\10\1\302\11\10\30\0"+
    "\7\10\1\302\1\10\2\0\4\10\1\302\2\10\1\0"+
    "\1\236\1\10\1\0\1\10\4\302\1\101\1\0\1\102"+
    "\5\0\4\10\1\302\11\10\27\0\13\215\1\0\20\215"+
    "\1\303\1\217\1\215\1\0\51\215\34\0\1\304\54\0"+
    "\111\215\13\220\1\0\21\220\1\221\1\303\1\0\162\220"+
    "\36\0\1\305\53\0\5\225\2\0\1\225\1\112\3\0"+
    "\1\225\2\0\1\225\1\112\2\0\2\225\2\0\2\225"+
    "\12\0\1\225\1\0\1\225\43\0\1\226\1\0\1\226"+
    "\1\0\1\226\3\0\1\112\7\0\1\112\70\0\1\227"+
    "\3\0\1\227\3\0\1\112\7\0\1\112\70\0\3\230"+
    "\1\0\1\230\21\0\1\115\62\0\3\230\1\0\1\230"+
    "\104\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\12\10\1\306\3\10\30\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\1\307\15\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\5\10\1\310"+
    "\1\0\1\311\5\0\16\10\30\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\1\312\15\10\30\0"+
    "\7\10\1\313\1\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\16\10\30\0\11\10\2\0\7\10\1\0"+
    "\1\314\1\10\1\0\5\10\10\0\16\10\30\0\11\10"+
    "\2\0\7\10\1\0\1\315\1\10\1\0\5\10\10\0"+
    "\16\10\30\0\3\10\1\316\5\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\16\10\30\0\11\10\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\5\10\1\317"+
    "\10\10\30\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\3\10\1\320\12\10\42\0\1\133\23\0"+
    "\1\136\2\0\2\136\45\0\13\247\1\321\20\247\1\322"+
    "\1\323\1\247\1\324\2\247\2\324\45\247\13\132\1\133"+
    "\20\132\1\245\1\135\1\132\1\246\2\132\2\137\45\132"+
    "\13\140\1\133\21\140\1\141\1\245\1\246\2\140\2\143"+
    "\45\140\13\252\1\325\21\252\1\326\1\327\1\330\2\252"+
    "\2\330\45\252\1\0\11\10\2\0\7\10\1\0\1\331"+
    "\1\10\1\0\5\10\10\0\16\10\30\0\11\10\2\0"+
    "\7\10\1\0\2\10\1\0\4\10\1\332\10\0\16\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\3\10\1\333\12\10\30\0\6\10\1\334\2\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\10\0\16\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\3\10\1\335\12\10\30\0\10\10\1\336\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\16\10\30\0"+
    "\7\10\1\337\1\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\16\10\30\0\10\10\1\340\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\16\10\63\0\1\341"+
    "\1\0\1\342\107\0\1\277\1\0\1\207\2\300\46\0"+
    "\1\207\34\276\1\343\1\344\53\276\35\301\1\345\1\346"+
    "\52\301\1\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\1\347\1\0\1\350\5\0\16\10\27\0\34\304"+
    "\1\351\1\352\53\304\35\305\1\353\1\354\52\305\1\0"+
    "\10\10\1\355\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\16\10\63\0\1\356\112\0\1\357\53\0\11\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\10\0\6\10"+
    "\1\360\7\10\30\0\11\10\2\0\7\10\1\0\2\10"+
    "\1\0\5\10\10\0\2\10\1\361\13\10\30\0\11\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\10\0\10\10"+
    "\1\362\5\10\30\0\11\10\2\0\7\10\1\0\2\10"+
    "\1\0\5\10\10\0\7\10\1\363\6\10\30\0\11\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\10\0\3\10"+
    "\1\364\12\10\27\0\13\247\1\321\20\247\1\322\1\323"+
    "\1\247\1\365\2\247\2\324\101\247\1\366\1\367\164\247"+
    "\13\252\1\325\21\252\1\326\1\327\1\370\2\252\2\330"+
    "\213\252\1\371\1\372\52\252\1\0\11\10\2\0\7\10"+
    "\1\0\2\10\1\0\5\10\10\0\4\10\1\373\11\10"+
    "\30\0\11\10\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\4\10\1\374\11\10\30\0\11\10\2\0\7\10"+
    "\1\0\1\375\1\10\1\0\5\10\10\0\16\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\4\10\1\376\11\10\30\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\2\10\1\377\13\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\1\u0100\15\10\30\0\11\10\2\0\7\10\1\0\1\u0101"+
    "\1\10\1\0\5\10\10\0\16\10\63\0\1\u0102\112\0"+
    "\1\u0103\52\0\34\276\1\u0104\1\u0105\164\276\146\301\1\u0106"+
    "\1\u0107\52\301\34\0\1\u0108\112\0\1\u0109\52\0\34\304"+
    "\1\u010a\1\u010b\164\304\146\305\1\u010c\1\u010d\52\305\1\0"+
    "\10\10\1\u010e\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\16\10\63\0\1\247\112\0\1\252\53\0\11\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\10\0\1\u010f"+
    "\15\10\30\0\11\10\2\0\7\10\1\0\2\10\1\0"+
    "\5\10\10\0\5\10\1\u0110\10\10\30\0\11\10\2\0"+
    "\7\10\1\0\2\10\1\0\5\10\10\0\1\10\1\u0111"+
    "\14\10\27\0\34\247\1\u0112\1\367\66\247\1\321\20\247"+
    "\1\u0113\1\367\1\247\1\324\2\247\2\324\45\247\13\252"+
    "\1\325\21\252\1\371\1\u0114\1\330\2\252\2\330\102\252"+
    "\1\371\1\u0112\52\252\1\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\5\10\1\u0115\10\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\5\10\10\0"+
    "\1\10\1\u0116\14\10\30\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\5\10\1\u0117\10\10\30\0"+
    "\10\10\1\u0118\2\0\7\10\1\0\2\10\1\0\5\10"+
    "\10\0\16\10\63\0\1\276\112\0\1\301\52\0\34\276"+
    "\1\u0119\1\u0105\107\276\1\u011a\1\u0105\53\276\35\301\1\u0106"+
    "\1\u011b\107\301\1\u0106\1\u0119\52\301\34\304\1\u011c\1\u010b"+
    "\107\304\1\u011d\1\u010b\53\304\35\305\1\u010c\1\u011e\107\305"+
    "\1\u010c\1\u011c\52\305\1\0\11\10\2\0\7\10\1\0"+
    "\2\10\1\0\5\10\10\0\11\10\1\u011f\4\10\30\0"+
    "\11\10\2\0\7\10\1\0\2\10\1\0\4\10\1\u0120"+
    "\10\0\16\10\42\0\1\u0121\23\0\1\u0122\2\0\2\u0122"+
    "\45\0\13\247\1\321\20\247\1\u0123\1\367\1\247\1\324"+
    "\2\247\2\324\45\247\13\252\1\325\21\252\1\371\1\u0124"+
    "\1\330\2\252\2\330\45\252\34\276\1\u0125\1\u0105\53\276"+
    "\35\301\1\u0106\1\u0126\52\301\34\304\1\u0127\1\u010b\53\304"+
    "\35\305\1\u010c\1\u0128\52\305\1\0\11\10\2\0\7\10"+
    "\1\0\1\u0129\1\10\1\0\5\10\10\0\16\10\66\0"+
    "\1\u012a\51\0\34\247\1\u012b\1\367\53\247\35\252\1\371"+
    "\1\u012c\52\252\34\276\1\u012d\1\u0105\53\276\35\301\1\u0106"+
    "\1\u012e\52\301\34\304\1\u012f\1\u010b\53\304\35\305\1\u010c"+
    "\1\u0130\52\305\13\247\1\321\20\247\1\u0112\1\367\1\247"+
    "\1\324\2\247\2\324\45\247\13\252\1\325\21\252\1\371"+
    "\1\u0112\1\330\2\252\2\330\45\252";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15768];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\16\1\1\11\1\1\4\11\25\1\15\11"+
    "\13\1\4\0\1\11\1\1\1\0\1\11\11\1\1\11"+
    "\6\1\1\11\24\1\3\11\1\1\1\11\1\1\5\11"+
    "\1\1\2\11\1\1\1\11\1\0\3\1\1\11\13\1"+
    "\1\11\1\0\4\1\1\0\14\1\1\11\21\1\4\11"+
    "\1\0\2\1\1\11\1\0\2\1\1\11\4\1\2\0"+
    "\10\1\2\0\2\1\2\0\11\1\3\0\2\1\7\0"+
    "\1\1\2\0\6\1\1\0\3\1\1\0\7\1\3\0"+
    "\2\1\4\0\2\1\1\0\16\1\1\11\5\1\1\11"+
    "\6\0\1\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private int getSpaceLength(CharSequence string) {
int i = Math.max(StringUtil.lastIndexOf(string, '"', 0, string.length()), StringUtil.lastIndexOf(string, '\'', 0, string.length()));
return yylength()-i-1;

}


  _PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PythonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3346) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 86: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 96: break;
        case 2: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 97: break;
        case 16: 
          { return PyTokenTypes.DIV;
          }
        case 98: break;
        case 17: 
          { return PyTokenTypes.PERC;
          }
        case 99: break;
        case 8: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 100: break;
        case 25: 
          { return PyTokenTypes.RPAR;
          }
        case 101: break;
        case 1: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 102: break;
        case 28: 
          { return PyTokenTypes.LBRACE;
          }
        case 103: break;
        case 35: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 104: break;
        case 68: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 105: break;
        case 83: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 106: break;
        case 76: 
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 107: break;
        case 6: 
          { return PyTokenTypes.MINUS;
          }
        case 108: break;
        case 82: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 109: break;
        case 27: 
          { return PyTokenTypes.RBRACKET;
          }
        case 110: break;
        case 61: 
          { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
          }
        case 111: break;
        case 5: 
          { return PyTokenTypes.DOT;
          }
        case 112: break;
        case 3: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 113: break;
        case 24: 
          { return PyTokenTypes.LPAR;
          }
        case 114: break;
        case 22: 
          { return PyTokenTypes.LT;
          }
        case 115: break;
        case 43: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 116: break;
        case 84: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { if (zzCurrentPos == 0) return PyTokenTypes.DOCSTRING; return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 117: break;
        case 80: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (zzCurrentPos == 0) return PyTokenTypes.DOCSTRING; return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 118: break;
        case 85: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 119: break;
        case 73: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 120: break;
        case 10: 
          { return PyTokenTypes.SPACE;
          }
        case 121: break;
        case 89: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 122: break;
        case 38: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 123: break;
        case 7: 
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 124: break;
        case 12: 
          { return PyTokenTypes.FORMFEED;
          }
        case 125: break;
        case 34: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 126: break;
        case 21: 
          { return PyTokenTypes.GT;
          }
        case 127: break;
        case 26: 
          { return PyTokenTypes.LBRACKET;
          }
        case 128: break;
        case 32: 
          { return PyTokenTypes.COLON;
          }
        case 129: break;
        case 74: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 130: break;
        case 78: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 131: break;
        case 19: 
          { return PyTokenTypes.OR;
          }
        case 132: break;
        case 47: 
          { return PyTokenTypes.MULTEQ;
          }
        case 133: break;
        case 94: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 134: break;
        case 87: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 135: break;
        case 15: 
          { return PyTokenTypes.MULT;
          }
        case 136: break;
        case 90: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 137: break;
        case 50: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 138: break;
        case 93: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 139: break;
        case 36: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 140: break;
        case 88: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 141: break;
        case 54: 
          { return PyTokenTypes.XOREQ;
          }
        case 142: break;
        case 63: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 143: break;
        case 30: 
          { return PyTokenTypes.AT;
          }
        case 144: break;
        case 67: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 145: break;
        case 13: 
          { return PyTokenTypes.PLUS;
          }
        case 146: break;
        case 40: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 147: break;
        case 60: 
          { return PyTokenTypes.NE;
          }
        case 148: break;
        case 31: 
          { return PyTokenTypes.COMMA;
          }
        case 149: break;
        case 46: 
          { return PyTokenTypes.EQEQ;
          }
        case 150: break;
        case 33: 
          { return PyTokenTypes.TICK;
          }
        case 151: break;
        case 48: 
          { return PyTokenTypes.EXP;
          }
        case 152: break;
        case 65: 
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 153: break;
        case 95: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 154: break;
        case 59: 
          { return PyTokenTypes.LTLT;
          }
        case 155: break;
        case 57: 
          { return PyTokenTypes.LE;
          }
        case 156: break;
        case 66: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 157: break;
        case 39: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 158: break;
        case 81: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 159: break;
        case 62: 
          { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 160: break;
        case 4: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 161: break;
        case 53: 
          { return PyTokenTypes.OREQ;
          }
        case 162: break;
        case 56: 
          { return PyTokenTypes.GTGT;
          }
        case 163: break;
        case 18: 
          { return PyTokenTypes.AND;
          }
        case 164: break;
        case 49: 
          { return PyTokenTypes.DIVEQ;
          }
        case 165: break;
        case 91: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 166: break;
        case 92: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 167: break;
        case 55: 
          { return PyTokenTypes.GE;
          }
        case 168: break;
        case 45: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 169: break;
        case 75: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 170: break;
        case 44: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 171: break;
        case 72: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 172: break;
        case 37: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 173: break;
        case 9: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 174: break;
        case 51: 
          { return PyTokenTypes.PERCEQ;
          }
        case 175: break;
        case 70: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 176: break;
        case 52: 
          { return PyTokenTypes.ANDEQ;
          }
        case 177: break;
        case 14: 
          { return PyTokenTypes.EQ;
          }
        case 178: break;
        case 77: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 179: break;
        case 41: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (zzCurrentPos == 0) return PyTokenTypes.DOCSTRING; return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 180: break;
        case 64: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { if (zzCurrentPos == 0) return PyTokenTypes.DOCSTRING; return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 181: break;
        case 71: 
          { return PyTokenTypes.EXPEQ;
          }
        case 182: break;
        case 79: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 183: break;
        case 29: 
          { return PyTokenTypes.RBRACE;
          }
        case 184: break;
        case 42: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 185: break;
        case 11: 
          { return PyTokenTypes.TAB;
          }
        case 186: break;
        case 58: 
          { return PyTokenTypes.NE_OLD;
          }
        case 187: break;
        case 23: 
          { return PyTokenTypes.TILDE;
          }
        case 188: break;
        case 20: 
          { return PyTokenTypes.XOR;
          }
        case 189: break;
        case 69: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 190: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
