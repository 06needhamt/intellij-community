# Python 2.7 stdlib

## 2. Built-in functions

__builtin__.abs = \
  :type number: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.all = \
  :type iterable: collections.Iterable \n\
  :rtype: bool \n\

__builtin__.any = \
  :type iterable: collections.Iterable \n\
  :rtype: bool \n\

__builtin__.bin = \
  :type number: int or long or float or complex \n\
  :rtype: bytes \n\

__builtin__.callable = \
  :rtype: bool \n\

__builtin__.chr = \
  :type i: int \n\
  :rtype: bytes \n\

__builtin__.dir = \
  :rtype: list of bytes \n\

__builtin__.divmod = \
  :type x: int or long or float or complex \n\
  :type y: int or long or float or complex \n\
  :rtype: (int or long or float, int or long or float) \n\

__builtin__.enumerate.__init__ = \
  :type iterable: collections.Iterable of T \n\
  :type start: int or long \n\
  :rtype: enumerate of (int, T) \n\

__builtin__.enumerate.__iter__ = \
  :rtype: enumerate of (int, T) \n\

__builtin__.enumerate.next = \
  :rtype: (int, T) \n\

__builtin__.filter = \
  :type function_or_none: collections.Callable or None \n\
  :type sequence: collections.Iterable of T \n\
  :rtype: list of T \n\

__builtin__.filter.1 = \
  :type sequence: bytes \n\
  :rtype: bytes \n\

__builtin__.filter.2 = \
  :type sequence: unicode \n\
  :rtype: unicode \n\

__builtin__.filter.3 = \
  :type sequence: tuple \n\
  :rtype: tuple \n\

__builtin__.getattr = \
  :type name: string \n\
  :rtype: unknown \n\

__builtin__.globals = \
  :rtype: dict of (bytes, object)

__builtin__.hasattr = \
  :type name: string \n\
  :rtype: bool \n\

__builtin__.hash = \
  :rtype: int \n\

__builtin__.iter = \
  :type source: collections.Iterable of T \n\
  :rtype: collections.Iterator of T \n\

__builtin__.len = \
  :type p_object: collections.Sized \n\
  :rtype: int \n\

__builtin__.locals = \
  :rtype: dict of (bytes, object)

__builtin__.map = \
  :type function: collections.Callable \n\
  :type sequence: collections.Iterable \n\
  :rtype: list \n\

__builtin__.next = \
  :type iterator: collections.Iterator of T \n\
  :rtype: T \n\

__builtin__.open = \
  :type name: string \n\
  :type mode: string \n\
  :type buffering: int \n\
  :type encoding: string or None \n\
  :type errors: string or None \n\
  :rtype: file \n\

__builtin__.open.1 = \
  :type mode: unicode \n\
  :rtype: io.TextIOWrapper \n\

__builtin__.open.2 = \
  :type mode: bytes \n\
  :rtype: io.FileIO \n\

__builtin__.ord = \
  :type c: string \n\
  :rtype: int \n\

__builtin__.pow = \
  :type x: int or long or float or complex \n\
  :type y: int or long or float or complex \n\
  :rtype: int or long or float \n\

__builtin__.range = \
  :type start: int or None \n\
  :type stop: int or None \n\
  :type step: int or None \n\
  :rtype: list of int \n\

__builtin__.reduce = \
  :type function: collections.Callable \n\
  :type sequence: collections.Iterable \n\
  :type initial: object or None \n\
  :rtype: unknown \n\

__builtin__.round = \
  :type number: int or long or float \n\
  :type ndigits: int or long or float or None \n\
  :rtype: float \n\

__builtin__.vars = \
  :rtype: dict of (bytes, object)


## 5.4. Numeric types

__builtin__.int.__init__ = \
  :type x: object \n\
  :type base: bool or int or long or float or complex or None \n\
  :rtype: int \n\

__builtin__.int.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__pos__ = \
  :rtype: int \n\

__builtin__.int.__neg__ = \
  :rtype: int \n\

__builtin__.int.__invert__ = \
  :rtype: int \n\

__builtin__.long.__init__ = \
  :type x: object \n\
  :type base: bool or int or long or float or complex or None \n\
  :rtype: long \n\

__builtin__.long.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__pos__ = \
  :rtype: long \n\

__builtin__.long.__neg__ = \
  :rtype: long \n\

__builtin__.long.__invert__ = \
  :rtype: long \n\

__builtin__.float.__init__ = \
  :type x: object \n\
  :rtype: float \n\

__builtin__.float.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__pos__ = \
  :rtype: float \n\

__builtin__.float.__neg__ = \
  :rtype: float \n\

__builtin__.complex.__init__ = \
  :type real: object \n\
  :type imag: object or None \n\
  :rtype: complex \n\

__builtin__.complex.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__pos__ = \
  :rtype: complex \n\

__builtin__.complex.__neg__ = \
  :rtype: complex \n\


## 5.6. Sequence types

__builtin__.str.__init__ = \
  :rtype: bytes \n\

__builtin__.str.__add__ = \
  :type y: string \n\
  :rtype: bytes \n\

__builtin__.str.__mul__ = \
  :type n: int or long \n\
  :rtype: bytes \n\

__builtin__.str.__mod__ = \
  :type y: object \n\
  :rtype: bytes \n\

__builtin__.str.__rmul__ = \
  :type n: int or long \n\
  :rtype: bytes \n\

__builtin__.str.__rmod__ = \
  :type y: object \n\
  :rtype: bytes \n\

__builtin__.str.__getitem__ = \
  :type y: int \n\
  :rtype: bytes \n\

__builtin__.str.capitalize = \
  :rtype: bytes \n\

__builtin__.str.center = \
  :type width: int or long \n\
  :type fillchar: bytes or None \n\
  :rtype: bytes \n\

__builtin__.str.count = \
  :type sub: bytes \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.decode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: unicode \n\

__builtin__.str.encode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: bytes \n\

__builtin__.str.endswith = \
  :type suffix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.str.find = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.index = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.isalnum = \
  :rtype: bool \n\

__builtin__.str.isalpha = \
  :rtype: bool \n\

__builtin__.str.isdigit = \
  :rtype: bool \n\

__builtin__.str.islower = \
  :rtype: bool \n\

__builtin__.str.isspace = \
  :rtype: bool \n\

__builtin__.str.istitle = \
  :rtype: bool \n\

__builtin__.str.isupper = \
  :rtype: bool \n\

__builtin__.str.join = \
  :type iterable: collections.Iterable of string \n\
  :rtype: bytes \n\

__builtin__.str.ljust = \
  :type width: int or long \n\
  :type fillchar: bytes or None \n\
  :rtype: bytes \n\

__builtin__.str.lower = \
  :rtype: bytes \n\

__builtin__.str.lstrip = \
  :type chars: string or None \n\
  :rtype: bytes \n\

__builtin__.str.next = \
  :rtype: bytes \n\

__builtin__.str.partition = \
  :type sep: string \n\
  :rtype: (bytes, bytes, bytes) \n\

__builtin__.str.replace = \
  :type old: string \n\
  :type new: string \n\
  :type count: int or long \n\
  :rtype: bytes \n\

__builtin__.str.rfind = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.rindex = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.rpartition = \
  :type sep: string \n\
  :rtype: (bytes, bytes, bytes) \n\

__builtin__.str.rsplit = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.rstrip = \
  :type chars: string or None \n\
  :rtype: bytes \n\

__builtin__.str.split = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.splitlines = \
  :type keepends: bool or int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.startswith = \
  :type prefix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.str.strip = \
  :type chars: string or None \n\
  :rtype: bytes \n\

__builtin__.str.swapcase = \
  :rtype: bytes \n\

__builtin__.str.title = \
  :rtype: bytes \n\

__builtin__.str.translate = \
  :type table: object \n\
  :type deletechars: bytes \n\
  :rtype: bytes \n\

__builtin__.str.upper = \
  :rtype: bytes \n\

__builtin__.str.zfill = \
  :type width: int or long \n\
  :rtype: bytes \n\

__builtin__.unicode.__init__ = \
  :rtype: unicode \n\

__builtin__.unicode.__add__ = \
  :type y: string \n\
  :rtype: unicode \n\

__builtin__.unicode.__mul__ = \
  :type n: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.__mod__ = \
  :type y: object \n\
  :rtype: unicode \n\

__builtin__.unicode.__rmul__ = \
  :type n: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.__rmod__ = \
  :type y: object \n\
  :rtype: unicode \n\
__builtin__.unicode.__getitem__ = \
  :type y: int \n\
  :rtype: unicode \n\

__builtin__.unicode.capitalize = \
  :rtype: unicode \n\

__builtin__.unicode.center = \
  :type width: int or long \n\
  :type fillchar: unicode or None \n\
  :rtype: unicode \n\

__builtin__.unicode.count = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.decode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.encode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: bytes \n\

__builtin__.unicode.endswith = \
  :type suffix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.unicode.find = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.index = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.isalnum = \
  :rtype: bool \n\

__builtin__.unicode.isalpha = \
  :rtype: bool \n\

__builtin__.unicode.isdecimal = \
  :rtype: bool \n\

__builtin__.unicode.isdigit = \
  :rtype: bool \n\

__builtin__.unicode.islower = \
  :rtype: bool \n\

__builtin__.unicode.isnumeric = \
  :rtype: bool \n\

__builtin__.unicode.isspace = \
  :rtype: bool \n\

__builtin__.unicode.istitle = \
  :rtype: bool \n\

__builtin__.unicode.isupper = \
  :rtype: bool \n\

__builtin__.unicode.join = \
  :type iterable: collections.Iterable of string \n\
  :rtype: unicode \n\

__builtin__.unicode.ljust = \
  :type width: int or long \n\
  :type fillchar: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.lower = \
  :rtype: unicode \n\

__builtin__.unicode.lstrip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.next = \
  :rtype: unicode \n\

__builtin__.unicode.partition = \
  :type sep: string \n\
  :rtype: (unicode, unicode, unicode) \n\

__builtin__.unicode.replace = \
  :type old: string \n\
  :type new: string \n\
  :type count: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.rfind = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.rindex = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.rpartition = \
  :type sep: string \n\
  :rtype: (unicode, unicode, unicode) \n\

__builtin__.unicode.rsplit = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.rstrip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.split = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.splitlines = \
  :type keepends: bool or int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.startswith = \
  :type prefix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.unicode.strip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.swapcase = \
  :rtype: unicode \n\

__builtin__.unicode.title = \
  :rtype: unicode \n\

__builtin__.unicode.translate = \
  :type table: object \n\
  :type deletechars: string \n\
  :rtype: unicode \n\

__builtin__.unicode.upper = \
  :rtype: unicode \n\

__builtin__.unicode.zfill = \
  :type width: int or long \n\
  :rtype: unicode \n\

__builtin__.list.__init__ = \
  :type seq: collections.Iterable of T \n\
  :rtype: list of T \n\

__builtin__.list.__add__ = \
  :type y: list of T \n\
  :rtype: list of T \n\

__builtin__.list.__mul__ = \
  :type n: int or long \n\
  :rtype: list of T \n\

__builtin__.list.__rmul__ = \
  :type n: int or long \n\
  :rtype: list of T \n\

__builtin__.list.__getitem__ = \
  :type y: int \n\
  :rtype: T \n\

__builtin__.list.__setitem__ = \
  :type i: int \n\
  :type y: T \n\
  :rtype: None \n\

__builtin__.list.__delitem__ = \
  :type y: int \n\
  :rtype: None \n\

__builtin__.list.append = \
  :type p_object: T \n\
  :rtype: None \n\

__builtin__.list.extend = \
  :type iterable: collections.Iterable of T \n\
  :rtype: None \n\

__builtin__.list.count = \
  :type value: T \n\
  :rtype: int \n\

__builtin__.list.index = \
  :type value: T \n\
  :type start: bool or int or long or None \n\
  :type stop: bool or int or long or None \n\
  :rtype: int \n\

__builtin__.list.insert = \
  :type index: bool or int or long \n\
  :type p_object: T \n\

__builtin__.list.pop = \
  :type index: bool or int or long \n\

__builtin__.list.remove = \
  :type value: T \n\

__builtin__.list.sort = \
  :type reverse: bool \n\

__builtin__.tuple.index = \
  :type value: object \n\
  :type start: bool or int or long or None \n\
  :type stop: bool or int or long or None \n\
  :rtype: int \n\

__builtin__.tuple.count = \
  :type value: object \n\
  :rtype: int \n\

__builtin__.tuple.__add__ = \
  :type y: tuple \n\
  :rtype: tuple \n\

__builtin__.tuple.__mul__ = \
  :type n: int or long \n\
  :rtype: tuple \n\

__builtin__.tuple.__rmul__ = \
  :type n: int or long \n\
  :rtype: tuple \n\

__builtin__.tuple.__getitem__ = \
  :type y: int \n\
  :rtype: unknown \n\


## 5.8 Mapping types

__builtin__.dict.__init__ = \
  :type seq: collections.Iterable of (T, V) \n\
  :rtype: dict of (T, V) \n\

__builtin__.dict.__getitem__ = \
  :type y: T \n\
  :rtype: V \n\

__builtin__.dict.__setitem__ = \
  :type i: T \n\
  :type y: V \n\
  :rtype: None \n\

__builtin__.dict.__delitem__ = \
  :type y: T \n\
  :rtype: None \n\

__builtin__.dict.copy = \
  :rtype: dict of (T, V) \n\

__builtin__.dict.fromkeys = \
  :type S: collections.Iterable of T \n\
  :type v: V or None \n\
  :rtype: dict of (T, V) \n\

__builtin__.dict.has_key = \
  :type k: T \n\
  :rtype: bool \n\

__builtin__.dict.items = \
  :rtype: list of (T, V) \n\

__builtin__.dict.iteritems = \
  :rtype: collections.Iterable of (T, V) \n\

__builtin__.dict.iterkeys = \
  :rtype: collections.Iterable of T \n\

__builtin__.dict.itervalues = \
  :rtype: collections.Iterable of V \n\

__builtin__.dict.keys = \
  :rtype: list of T \n\

__builtin__.dict.values = \
  :rtype: list of V \n\


## 5.9. File objects

__builtin__.file.fileno = \
  :rtype: int \n\

__builtin__.file.isatty = \
  :rtype: bool \n\

__builtin__.file.next = \
  :rtype: string \n\

__builtin__.file.read = \
  :type size: int or long or None \n\
  :rtype: string \n\

__builtin__.file.readline = \
  :type size: int or long or None \n\
  :rtype: string \n\

__builtin__.file.readlines = \
  :type size: int or long or None \n\
  :rtype: list of string \n\

__builtin__.file.xreadlines = \
  :rtype: collections.Iterable of string \n\

__builtin__.file.seek = \
  :type offset: int or long \n\
  :type whence: int \n\

__builtin__.file.tell = \
  :rtype: int \n\

__builtin__.file.truncate = \
  :type size: int or long \n\

__builtin__.file.write = \
  :type p_str: string \n\
  :rtype: None \n\

__builtin__.file.writelines = \
  :type sequence_of_strings: collections.Iterable of string \n\


## 8.1. datetime

datetime.date.today = \
  :rtype: datetime.date \n\

datetime.date.fromtimestamp = \
  :rtype: datetime.date \n\

datetime.date.fromordinal = \
  :rtype: datetime.date \n\

datetime.date.replace = \
  :rtype: datetime.date \n\

datetime.date.toordinal = \
  :rtype: int \n\

datetime.date.weekday = \
  :rtype: int \n\

datetime.date.isoweekday = \
  :rtype: int \n\

datetime.date.isocalendar = \
  :rtype: (int, int, int) \n\

datetime.date.isoformat = \
  :rtype: bytes \n\

datetime.date.ctime = \
  :rtype: bytes \n\

datetime.date.strftime = \
  :type format: string \n\
  :rtype: string \n\

datetime.date.__add__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.date \n\

datetime.date.__radd__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.date \n\

datetime.date.__sub__ = \
  :type y: datetime.date or datetime.timedelta \n\
  :rtype: datetime.date or datetime.timedelta \n\

datetime.date.__sub__.1 = \
  :type y: datetime.date \n\
  :rtype: datetime.timedelta \n\

datetime.date.__sub__.2 = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.date \n\

datetime.date.__rsub__ = \
  :type y: datetime.date \n\
  :rtype: datetime.timedelta \n\

datetime.time.isoformat = \
  :rtype: bytes \n\

datetime.time.strftime = \
  :type format: string \n\
  :rtype: string \n\

datetime.time.utcoffset = \
  :rtype: datetime.timedelta or None \n\

datetime.time.dst = \
  :rtype: datetime.timedelta or None \n\

datetime.ime.tzname = \
  :rtype: string \n\

datetime.timedelta.__add__ = \
  :type y: datetime.timedelta or datetime.date or datetime.datetime \n\
  :rtype: datetime.timedelta or datetime.date or datetime.datetime \n\

datetime.timedelta.__add__.1 = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__add__.2 = \
  :type y: datetime.datetime \n\
  :rtype: datetime.datetime \n\

datetime.timedelta.__add__.3 = \
  :type y: datetime.date \n\
  :rtype: datetime.date \n\

datetime.timedelta.__radd__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__sub__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__rsub__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__mul__ = \
  :type y: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__rmul__ = \
  :type y: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__div__ = \
  :type y: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__truediv__ = \
  :type y: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.datetime.today = \
  :rtype: datetime.datetime \n\

datetime.datetime.now = \
  :type tz: datetime.tzinfo or None \n\
  :rtype: datetime.datetime \n\

datetime.datetime.utcnow = \
  :rtype: datetime.datetime \n\

datetime.datetime.fromtimestamp = \
  :type timestamp: int or long or float \n\
  :type tz: datetime.tzinfo or None \n\
  :rtype: datetime.datetime \n\

datetime.datetime.utcfromtimestamp = \
  :type timestamp: int or long or float \n\
  :rtype: datetime.datetime \n\

datetime.datetime.fromordinal = \
  :type ordinal: int \n\
  :rtype: datetime.datetime \n\

datetime.datetime.combine = \
  :type date: datetime.date \n\
  :type time: datetime.time \n\
  :rtype: datetime.datetime \n\

datetime.datetime.strptime = \
  :type date_string: string \n\
  :type format: string \n\
  :rtype: datetime.datetime \n\

datetime.datetime.date = \
  :rtype: datetime.date \n\

datetime.datetime.time = \
  :rtype: datetime.time \n\

datetime.datetime.timetz = \
  :rtype: datetime.time \n\

datetime.datetime.replace = \
  :rtype: datetime.datetime \n\

datetime.datetime.astimezone = \
  :type tz: datetime.tzinfo \n\
  :rtype: datetime.datetime \n\

datetime.datetime.utcoffset = \
  :rtype: datetime.timedelta or None \n\

datetime.datetime.dst = \
  :rtype: datetime.timedelta or None \n\

datetime.datetime.tzname = \
  :rtype: string \n\

datetime.datetime.toordinal = \
  :rtype: int \n\

datetime.datetime.weekday = \
  :rtype: int \n\

datetime.datetime.isoweekday = \
  :rtype: int \n\

datetime.datetime.isocalendar = \
  :rtype: (int, int, int) \n\

datetime.datetime.isoformat = \
  :rtype: bytes \n\

datetime.datetime.ctime = \
  :rtype: bytes \n\

datetime.datetime.strftime = \
  :type format: string \n\
  :rtype: string \n\

datetime.datetime.__add__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.datetime \n\

datetime.datetime.__radd__ = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.datetime \n\

datetime.datetime.__sub__ = \
  :type y: datetime.datetime or datetime.timedelta \n\
  :rtype: datetime.datetime or datetime.timedelta \n\

datetime.datetime.__sub__.1 = \
  :type y: datetime.datetime \n\
  :rtype: datetime.timedelta \n\

datetime.datetime.__sub__.2 = \
  :type y: datetime.timedelta \n\
  :rtype: datetime.datetime \n\

datetime.datetime.__rsub__ = \
  :type y: datetime.datetime \n\
  :rtype: datetime.timedelta \n\


## 8.3. collections

collections.Iterator.__init__ = \
  :rtype: collections.Iterator of T \n\

collections.Iterator.next = \
  :rtype: T \n\


## 9.4. decimal

decimal.Decimal.as_tuple = \
  :rtype: decimal.DecimalTuple \n\

decimal.Decimal.__add__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__sub__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__mul__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__floordiv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__mod__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__pow__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__div__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__truediv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__radd__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rsub__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rmul__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rfloordiv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rmod__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rpow__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rdiv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rtruediv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__pos__ = \
  :rtype: decimal.Decimal \n\

decimal.Decimal.__neg__ = \
  :rtype: decimal.Decimal \n\


## 15.2. io

io.open = \
  :type name: string \n\
  :type mode: string \n\
  :type buffering: int \n\
  :type encoding: string or None \n\
  :type errors: string or None \n\
  :rtype: file \n\

io.open.1 = \
  :type mode: unicode \n\
  :rtype: io.TextIOWrapper \n\

io.open.2 = \
  :type mode: bytes \n\
  :rtype: io.FileIO \n\

io.TextIOWrapper.read = \
  :rtype: unicode \n\

io.TextIOWrapper.readline = \
  :rtype: unicode \n\

io.TextIOWrapper.readlines = \
  :rtype: list of unicode \n\

io.TextIOWrapper.__iter__ = \
  :rtype: list of unicode \n\

io.TextIOWrapper.write = \
  :type s: string \n\
  :rtype: int \n\

io.FileIO.read = \
  :rtype: bytes \n\

io.FileIO.readline = \
  :rtype: bytes \n\

io.FileIO.readlines = \
  :rtype: list of bytes \n\

io.FileIO.__iter__ = \
  :rtype: list of bytes \n\

io.FileIO.write = \
  :type b: string \n\
  :rtype: int \n\

io.IOBase.readlines = \
  :rtype: list of string \n\

io.IOBase.writelines = \
  :type lines: collections.Iterable of string \n\

io.IOBase.__iter__ = \
  :rtype: list of string \n\

io.IOBase.next = \
  :rtype: string \n\

io._IOBase.readlines = \
  :rtype: list of string \n\

io._IOBase.writelines = \
  :type lines: collections.Iterable of string \n\

io._IOBase.__iter__ = \
  :rtype: list of string \n\

io._IOBase.next = \
  :rtype: string \n\


## 18.2. json

json.loads = \
  :type s: string \n\
  :type encoding: string \n\
  :rtype: unknown \n\


## 18.12. base64

base64.b64encode = \
  :type s: bytes \n\
  :rtype: bytes \n\

base64.b64decode = \
  :type s: bytes \n\
  :rtype: bytes \n\
