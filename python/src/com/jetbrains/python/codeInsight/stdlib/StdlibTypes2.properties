# Python 2.7 stdlib


## 5.4. Numeric types

__builtin__.abs = \
  :type number: bool or int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__init__ = \
  :type x: object \n\
  :type base: bool or int or long or float or complex or None \n\
  :rtype: int \n\

__builtin__.long.__init__ = \
  :type x: object \n\
  :type base: bool or int or long or float or complex or None \n\
  :rtype: long \n\

__builtin__.float.__init__ = \
  :type x: object \n\
  :rtype: float \n\

__builtin__.complex.__init__ = \
  :type real: object \n\
  :type imag: object or None \n\
  :rtype: complex \n\

__builtin__.divmod = \
  :type x: bool or int or long or float or complex \n\
  :type y: bool or int or long or float or complex \n\
  :rtype: (int or long or float or complex, int or long or float or complex) \n\

__builtin__.pow = \
  :type x: bool or int or long or float or complex \n\
  :type y: bool or int or long or float or complex \n\
  :rtype: int or long or float or complex \n\

__builtin__.round = \
  :type number: int or long or float \n\
  :type ndigits: bool or int or long or float or None \n\
  :rtype: float \n\


## 5.6. Sequence types

__builtin__.str.capitalize = \
  :rtype: bytes \n\

__builtin__.str.center = \
  :type width: int or long \n\
  :type fillchar: bytes or None \n\
  :rtype: bytes \n\

__builtin__.str.count = \
  :type sub: bytes \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.str.decode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: unicode \n\

__builtin__.str.encode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: bytes \n\

__builtin__.str.endswith = \
  :type suffix: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.str.find = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.str.index = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.str.isalnum = \
  :rtype: bool \n\

__builtin__.str.isalpha = \
  :rtype: bool \n\

__builtin__.str.isdigit = \
  :rtype: bool \n\

__builtin__.str.islower = \
  :rtype: bool \n\

__builtin__.str.isspace = \
  :rtype: bool \n\

__builtin__.str.istitle = \
  :rtype: bool \n\

__builtin__.str.isupper = \
  :rtype: bool \n\

__builtin__.str.join = \
  :type iterable: Iterable of string \n\
  :rtype: string \n\

__builtin__.str.ljust = \
  :type width: int or long \n\
  :type fillchar: bytes or None \n\
  :rtype: bytes \n\

__builtin__.str.lower = \
  :rtype: bytes \n\

__builtin__.str.lstrip = \
  :type chars: string or None \n\
  :rtype: string \n\

__builtin__.str.partition = \
  :type sep: string \n\
  :rtype: (string, string, string) \n\

__builtin__.str.replace = \
  :type old: string \n\
  :type new: string \n\
  :type count: int or long \n\
  :rtype: string \n\

__builtin__.str.rfind = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.str.rindex = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.str.rpartition = \
  :type sep: string \n\
  :rtype: (string, string, string) \n\

__builtin__.str.rsplit = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of string \n\

__builtin__.str.rstrip = \
  :type chars: string or None \n\
  :rtype: string \n\

__builtin__.str.split = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of string \n\

__builtin__.str.splitlines = \
  :type keepends: bool or int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.startswith = \
  :type prefix: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.str.strip = \
  :type chars: string or None \n\
  :rtype: string \n\

__builtin__.str.swapcase = \
  :rtype: bytes \n\

__builtin__.str.title = \
  :rtype: bytes \n\

__builtin__.str.translate = \
  :type table: object \n\
  :type deletechars: bytes \n\
  :rtype: bytes \n\

__builtin__.str.upper = \
  :rtype: bytes \n\

__builtin__.str.zfill = \
  :type width: int or long \n\
  :rtype: bytes \n\

__builtin__.unicode.capitalize = \
  :rtype: unicode \n\

__builtin__.unicode.center = \
  :type width: int or long \n\
  :type fillchar: unicode or None \n\
  :rtype: unicode \n\

__builtin__.unicode.count = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.unicode.decode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.encode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: bytes \n\

__builtin__.unicode.endswith = \
  :type suffix: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.unicode.find = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.unicode.index = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.unicode.isalnum = \
  :rtype: bool \n\

__builtin__.unicode.isalpha = \
  :rtype: bool \n\

__builtin__.unicode.isdecimal = \
  :rtype: bool \n\

__builtin__.unicode.isdigit = \
  :rtype: bool \n\

__builtin__.unicode.islower = \
  :rtype: bool \n\

__builtin__.unicode.isnumeric = \
  :rtype: bool \n\

__builtin__.unicode.isspace = \
  :rtype: bool \n\

__builtin__.unicode.istitle = \
  :rtype: bool \n\

__builtin__.unicode.isupper = \
  :rtype: bool \n\

__builtin__.unicode.join = \
  :type iterable: Iterable of string \n\
  :rtype: unicode \n\

__builtin__.unicode.ljust = \
  :type width: int or long \n\
  :type fillchar: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.lower = \
  :rtype: unicode \n\

__builtin__.unicode.lstrip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.partition = \
  :type sep: string \n\
  :rtype: (unicode, unicode, unicode) \n\

__builtin__.unicode.replace = \
  :type old: string \n\
  :type new: string \n\
  :type count: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.rfind = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.unicode.rindex = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int or long \n\

__builtin__.unicode.rpartition = \
  :type sep: string \n\
  :rtype: (unicode, unicode, unicode) \n\

__builtin__.unicode.rsplit = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.rstrip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.split = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.splitlines = \
  :type keepends: bool or int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.startswith = \
  :type prefix: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.unicode.strip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.swapcase = \
  :rtype: unicode \n\

__builtin__.unicode.title = \
  :rtype: unicode \n\

__builtin__.unicode.translate = \
  :type table: object \n\
  :type deletechars: string \n\
  :rtype: unicode \n\

__builtin__.unicode.upper = \
  :rtype: unicode \n\

__builtin__.unicode.zfill = \
  :type width: int or long \n\
  :rtype: unicode \n\


## 15.2. io

__builtin__.open = \
  :type name: string \n\
  :type mode: string \n\
  :type buffering: int \n\
  :type encoding: string or None \n\
  :type errors: string or None \n\
  :rtype: file \n\

__builtin__.file.read = \
  :type size: int or None \n\
  :rtype: unknown \n\

__builtin__.file.write = \
  :type p_str: string \n\
  :rtype: None \n\


## 18.2. json

json.loads = \
  :type s: string \n\
  :type encoding: string \n\
  :rtype: unknown \n\


## 18.12. base64

base64.b64encode = \
  :type s: bytes \n\
  :rtype: bytes \n\

base64.b64decode = \
  :type s: bytes \n\
  :rtype: bytes \n\


# DEBUG: Experimental

__builtin__._open_bytes = \
  :type name: unicode or bytes \n\
  :type mode: unicode or bytes \n\
  :type buffering: int \n\
  :type encoding: unicode or None \n\
  :type errors: unicode or None \n\
  :rtype: _io.FileIO \n\

__builtin__._open_unicode = \
  :type name: unicode or bytes \n\
  :type mode: unicode or bytes \n\
  :type buffering: int \n\
  :type encoding: unicode or None \n\
  :type errors: unicode or None \n\
  :rtype: _io.TextIOWrapper \n\
