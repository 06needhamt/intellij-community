import org.jetbrains.jps.Jps
import org.jetbrains.jps.LayoutInfo
import org.jetbrains.jps.Module
import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this as Script)}/community/build/scripts/utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/ultimate_utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/libLicenses.gant")
includeTargets << new File("${guessHome(this)}/python/build/python_common.gant")
includeTool << Jps

requireProperty("buildNumber", requireProperty("build.number", snapshot))

// load ApplicationInfo.xml properties
ant.xmlproperty(file: "$home/python/resources/idea/PythonApplicationInfo.xml", collapseAttributes: "true")

setProperty("system_selector", "PyCharm${p("component.version.major")}0")
setProperty("ch", "$home/community")
setProperty("dryRun", false)
setProperty("jdk16", guessJdk())

setProperty("pluginFilter", [
            "htmltools",
            "JavaScriptLanguage",
            "JavaScriptDebugger", "FirefoxConnector", "ChromeConnector", "python-javascript-debugger",
            "cvsIntegration", "cvs-core", "cvs-plugin", "javacvs-src", "smartcvs-src",
            "PerforceIntegration", "Perforce", "perforce_util",
            "svn4idea",
            "git4idea",
            "CSS", "css-api",
            "JSInspections",
            "JSIntentionPowerPack",
            "less", "sass",
            "haml", "haml-plugin",
            "hg4idea",
            "tasks", "tasks-core", "tasks-api", "jira-connector",
            "github",
            "webDeployment",
            "jdbc-console", "django-db-config",
            "database-impl", "DatabaseSupport",
            "sql",
            "coffeescript",
            "python-remote-interpreter"
            ])

private List pycharmImplementationModules() {
  return ["yaml", "coverage-common", "python", "python-ide"]
}

class Paths {
  final sandbox
  final distAll
  final distWin
  final distMac
  final distUnix
  final artifacts
  final ideaSystem
  final ideaConfig

  def Paths(String home) {
    sandbox = "$home/out/pycharm"

    distAll = "$sandbox/layout"
    distWin = "$sandbox/win"
    distMac = "$sandbox/mac"
    distUnix = "$sandbox/unix"
    artifacts = "$home/out/pycharm/artifacts"

    ideaSystem = "$sandbox/system"
    ideaConfig = "$sandbox/config"
  }
}

setProperty("paths", new Paths(home))
setProperty("buildName", "PY-$buildNumber")

target('default': "Build artifacts") {
  def modules = [
          "python-pydev", "colorSchemes", platformUltimateApiModules, platformUltimateImplementationModules, pycharmImplementationModules(), pluginFilter
  ].flatten()

  loadProject()

  project.stage("Cleaning up sandbox folder")

  project.targetFolder = "${paths.sandbox}/classes"
  project.dryRun = dryRun

  if (!dryRun) {
    forceDelete(paths.sandbox)
    ant.mkdir(dir: paths.sandbox)
  }

  ant.tstamp() {
    format(property: "todayYear", pattern: "yyyy")
  }

  ant.patternset(id: "resources.included") {
    include(name: "**/*.properties")
    include(name: "fileTemplates/**/*")
    include(name: "inspectionDescriptions/**/*")
    include(name: "intentionDescriptions/**/*")
    include(name: "tips/**/*")
    include(name: "search/**/*")
  }

  ant.patternset(id: "resources.excluded") {
    exclude(name: "**/*.properties")
    exclude(name: "fileTemplates/**/*")
    exclude(name: "fileTemplates")
    exclude(name: "inspectionDescriptions/**/*")
    exclude(name: "inspectionDescriptions")
    exclude(name: "intentionDescriptions/**/*")
    exclude(name: "intentionDescriptions")
    exclude(name: "tips/**/*")
    exclude(name: "tips")
  }

  zipSources(home, paths.artifacts)

  def usedJars = new HashSet();

  def forbiddenJars = ["client-api", "ideaLicenseDecoder", "eawtstub.jar", "ui.jar", "exe4jlib.jar", "cglib", "jcip-annotations"]

  project.clean()
  modules.each {
    Module module = project[it] as Module
    if (module != null) {
      project.info("Building $module.name")
      module.runtimeClasspath().each {
        File file = new File(it)
        if (file.exists()) {
          String path = file.canonicalPath.replace('\\', '/')
          String normalizedHome = home.replace('\\', '/')
          if (path.endsWith(".jar") && (path.startsWith("$normalizedHome/lib/") ||
                                        path.startsWith("$normalizedHome/community/lib/") ||
                                        path.startsWith("$normalizedHome/python/lib") ||
                                        path.startsWith("$normalizedHome/plugins/coverage-common/lib") ||
                                        path.startsWith("$normalizedHome/community/xml/relaxng/lib"))
              && !path.contains("/dev/") && !path.contains("/rt/") && !path.contains("/ant/")
              && !forbiddenJars.any { path.contains(it) }) {
            usedJars.add(path);
          }
        }
      }
      module.make()
    }
    else {
      project.warning("$it is not a module")
    }
  }

  usedJars.add("$home/community/lib/jgoodies-common-1.2.1.jar")
  usedJars.add("$home/community/lib/jgoodies-looks-2.4.2.jar")

  buildSearchableOptions("${project["platform-resources"].output}/search", ["$home/build/idea.license", "$home/build/pycharm.license"], {
    project["python-ide"].runtimeClasspath().each {
      pathelement(location: it)
    }
  }, "-Didea.platform.prefix=Python -Didea.no.jre.check=true")

  if (!dryRun) {
    wireBuildDate(buildName, appInfoFile())
  }

  Map args = [
          buildNumber: buildName,
          system_selector: system_selector,
          ide_jvm_args: "-Didea.platform.prefix=Python -Didea.no.jre.check=true"]

  LayoutInfo layoutInfo = layoutFull(args, paths.distAll, usedJars)
  generateLicensesTable("$paths.artifacts/third-party-libraries.txt", layoutInfo.usedModules);

  egg = buildDebuggerEgg(paths.sandbox, "$home/python", buildName)
  ant.copy(file: egg, todir: paths.distAll)

  scramble()

  layoutWin(args, paths.distWin)
  layoutUnix(args, paths.distUnix)
  layoutMac(args, paths.distMac)

  ant.echo(message: buildName, file: "${paths.sandbox}/layout/build.txt")

  buildExe("$home/python/build/pycharm.exe4j", system_selector)
  buildWinZip("${paths.artifacts}/pycharm${buildName}.zip", [paths.distAll, paths.distWin])
  buildNSIS([paths.distAll, paths.distWin],
            "$home/python/build/strings.nsi", "$home/python/build/paths.nsi",
            "pycharm", false, true, system_selector)

  String tarRoot = isEap() ? "pycharm-$buildNumber" : "pycharm-${p("component.version.major")}.${p("component.version.minor")}"
  buildTarGz(tarRoot, "$paths.artifacts/pycharm${buildName}.tar", [paths.distAll, paths.distUnix])

  String macAppRoot = isEap() ? "PyCharm ${p("component.version.major")}.${p("component.version.minor")} EAP.app" : "PyCharm.app"
  buildMacZip(macAppRoot, "${paths.artifacts}/pycharm${buildName}.sit", [paths.distAll, paths.distMac])
  buildDmg("pycharm", "${home}/python/build/DMG_background.png")
}

private scramble() {
  copyAndPatchFile("$home/build/conf/script.zkm.stub", "${paths.sandbox}/script.zkm",
                   ["CLASSES": "\"${paths.distAll}/lib/pycharm.jar\"", "SCRAMBLED_CLASSES": paths.distAll, "INCREMENTAL": ""])
  ant.mkdir(dir: "$paths.artifacts/pycharm.unscrambled")
  ant.copy(file: "$paths.distAll/lib/pycharm.jar", todir: "$paths.artifacts/pycharm.unscrambled")

  zkmScramble("$paths.sandbox/script.zkm", "$paths.distAll/lib", "pycharm.jar")

  ant.move(file: "$paths.distAll/pycharm.jar", todir: "$paths.distAll/lib")
  ant.zip(destfile: "$paths.artifacts/logs.zip") {
    fileset(file: "ChangeLog.txt")
    fileset(file: "ZKM_log.txt")
    fileset(file: "$paths.sandbox/script.zkm")
  }
  ant.delete(file: "ChangeLog.txt")
  ant.delete(file: "ZKM_log.txt")
}

private String appInfoFile() {
  return "$home/out/pycharm/classes/production/python-ide/idea/PythonApplicationInfo.xml"
}

private layoutFull(Map args, String target, Set usedJars) {
  def openapiModules = platformUltimateApiModules
  def implementationModules = [platformUltimateImplementationModules, pycharmImplementationModules()].flatten()

  def result = layout(target) {
    dir("lib") {
      jar("util.jar") {
        module("util")
        module("util-rt")
      }

      jar("openapi.jar") {
        openapiModules.each { module it}
      }

      jar("annotations.jar") { module("annotations")}
      jar("extensions.jar") { module("extensions")}

      jar("pycharm.jar") {
        implementationModules.each {
          module(it) {
            exclude(name: "**/tips/**")
          }
        }
        zipfileset(src: "${home}/lib/client-api.jar")
        zipfileset(src: "${home}/lib/ideaLicenseDecoder.jar")
      }

      jar("pycharm-pydev.jar") {
        module("python-pydev")
      }

      jar("bootstrap.jar") { module("bootstrap")}
      jar("resources.jar") {
        module("platform-resources")
        module("colorSchemes")
      }

      jar("forms_rt.jar") {
        module("forms_rt")
      }

      jar([name: "resources_en.jar", duplicate: "preserve"]) {
        // custom resources go first
        fileset(dir: "$home/python/resources") {
          include(name: "**/tips/**")
        }
        module("platform-resources-en") {
          ant.patternset {
            exclude(name: "tips/images/switcher.png")
            exclude(name: "tips/images/navigateToFilePath.gif")
          }
        }
        zipfileset(dir: "$home/python/resources/tips", prefix: "tips")
      }

      jar("icons.jar") { module("icons") }
      jar("boot.jar") { module("boot") }

      usedJars.each {
        fileset(file: it)
      }

      dir("ext") {
        fileset(dir: "$home/community/lib") {
          include(name: "cglib*.jar")
        }
      }

      dir("src") {
        fileset(dir: "$home/community/lib/src") {
          include(name: "trove4j_changes.txt")
          include(name: "trove4j_src.jar")
        }

        jar("pycharm-pydev-src.zip") {
          fileset(dir: "$home/python/pydevSrc")
        }
      }
    }

    dir("help") {
      fileset(dir: "$home/python/help") {
        include(name: "*.pdf")
      }
    }

    dir("helpers") {
      fileset(dir: "$home/python/helpers")
    }

    dir("license") {
      fileset(dir: "$home/python/license")
      fileset(dir: "$home/community/license")
    }

    dir("plugins") {
      dir("django-db-config") {
        dir("lib") {
          jar("django-db-config.jar") {
            module("django-db-config")
          }
        }
      }
      dir("python-javascript-debugger") {
        dir("lib") {
          jar("python-javascript-debugger.jar") {
            module("python-javascript-debugger")
          }
        }
      }
      dir("python-remote-interpreter") {
        dir("lib") {
          jar("python-remote-interpreter.jar") {
            module("python-remote-interpreter")
          }
        }
      }
    }

    def layouts = includeFile("$home/build/scripts/layouts.gant")
    layouts.layoutPlugins()

    dir("bin") {
      fileset(dir: "$home/community/bin") {
        exclude(name: "appletviewer.policy")
        include(name: "*.*")
      }
    }
  }
  patchPropertiesFile(target, args + [appendices: ["$home/build/conf/ideaJNC.properties"]])

  return result
}

private layoutWin(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/community/bin/win") {
        exclude(name: "breakgen*")
      }
      fileset(dir: "$home/bin") {
        include(name: "yjpagent*.dll")
      }
    }

    dir("skeletons") {
      fileset(dir: "$home/python/skeletons") {
        include(name: "skeletons-win*.zip")
      }
    }
  }

  winScripts(target, "$home/community", "pycharm.bat", args)
  winVMOptions(target, args.system_selector, "pycharm.exe", "pycharm64.exe")

  ant.copy(file: "$home/python/help/pycharmhelp.jar", todir: "$target/help", failonerror: false)
}

private layoutUnix(Map args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/community/bin/linux") {
        exclude(name: "libbreakgen*")
      }
      fileset(dir: "$home/bin") {
        include(name: "*.so")
      }
    }
  }

  ant.copy(file: "$home/python/resources/PyCharm_128.png", tofile: "$target/bin/pycharm.png")

  unixScripts(target, "$home/community", "pycharm.sh", args)
  unixVMOptions(target, "pycharm")

  ant.copy(file: "$home/python/help/pycharmhelp.jar", todir: "$target/help", failonerror: false)
}

private layoutMac(Map _args, String target) {
  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin") {
        include(name: "*.jnilib")
      }
    }

    dir("skeletons") {
      fileset(dir: "$home/python/skeletons") {
        include(name: "skeletons-mac*.zip")
      }
    }
  }

  Map args = new HashMap(_args)
  args.icns = "$home/python/resources/PyCharm.icns"
  args.bundleIdentifier = "com.jetbrains.pycharm"
  args.platform_prefix = "Python"
  args.help_id = "PY"
  args."idea.properties.path" = "${paths.distAll}/bin/idea.properties"
  args."idea.properties" = ["idea.no.jre.check": true, "ide.mac.useNativeClipboard": "false"];
  layoutMacApp(target, "$home/community", args)

  ant.unzip(src: "$home/python/help/JetBrains.PY.help.zip", dest: "$target/Contents/Resources")
}
