import groovy.io.FileType
import org.apache.tools.ant.util.StringUtils

private List<String> listTopLevelModules(String root) {
  def list = []

  def dir = new File(root)
  dir.eachFile (FileType.FILES) { file ->
    if (file.name.endsWith(".py")) {
       list << file.name - ".py"
    }
  }
  return list
}

binding.setVariable("buildDebuggerEgg", {String sandbox, String pythonHome, String buildName ->
  return buildEgg(sandbox, pythonHome, buildName, "pycharm-debug", {})
})

binding.setVariable("buildDebuggerEggPy3K", {String sandbox, String pythonHome, String buildName ->
  return buildEgg(sandbox, pythonHome, buildName, "pycharm-debug-py3k") {
    exclude("**/_pydev_BaseHTTPServer.py")
    exclude("**/_pydev_SimpleXMLRPCServer.py")
    exclude("**/_pydev_SocketServer.py")
    exclude("**/_pydev_inspect.py")
    exclude("**/_pydev_threading.py")
    exclude("**/_pydev_xmlrpclib.py")
    exclude("**/jyimportsTipper.py")
    exclude("**/pydevconsole_code_for_ironpython.py")
    exclude("**/pydevd_exec.py")
  }
})

private GString buildEgg(String sandbox, String pythonHome, String buildName, String eggName, Closure custom) {
  def eggDir = "$sandbox/$eggName"
  def egg = "$sandbox/$eggName"".egg"

  ant.delete(dir: eggDir)
  ant.mkdir(dir: eggDir)

  ant.copy(todir: "$eggDir") {
    fileset(dir: "$pythonHome/helpers/pydev") {
      include(name: "**/*.py")
      custom()
    }
  }

  ant.mkdir(dir: "$eggDir/EGG-INFO")

  ant.copy(todir: "$eggDir/EGG-INFO") {
    fileset(dir: "$pythonHome/resources/debugger-egg/EGG-INFO")
  }

  ant.replace(file: "$eggDir/EGG-INFO/PKG-INFO") {
    replacefilter(token: "@@BUILD_NUMBER@@", value: buildName)
  }

  ant.replace(file: "$eggDir/pydevd_comm.py") {
    replacefilter(token: "@@BUILD_NUMBER@@", value: buildName)
  }

  ant.echo(file: "$eggDir/EGG-INFO/top_level.txt", message: listTopLevelModules("$eggDir").join(StringUtils.LINE_SEP))

  ant.zip(destfile: egg) {
    fileset(dir: eggDir)
  }
  return egg
}
