import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec
import org.gradle.util.VersionNumber

/**
 * Project extension to configure Python build environment.
 *
 */
class MinicondaExtension {
    File bootstrapDirectory
    File buildEnvironmentDirectory
    String minicondaVersion
    String minicondaExecutable32
    String minicondaExecutable64
    List<String> packages
}


class MinicondaPlugin implements Plugin<Project> {
    def os = System.getProperty('os.name').replaceAll(' ', '')

    @Override
    void apply(Project project) {
        def myExt = project.extensions.create("miniconda", MinicondaExtension.class)


        project.repositories {
            ivy {
                url "http://repo.continuum.io"
                layout "pattern", {
                    artifact "[organisation]/[module]-[revision]-[classifier].[ext]"
                }
            }
        }


        project.configurations {
            minicondaInstaller
        }

        project.afterEvaluate {
            def conf = project.configurations.minicondaInstaller
            conf.incoming.beforeResolve {
                if (conf.dependencies.empty) {
                    def myExtension = "sh"
                    def arch = "x86_64"
                    if (os.contains("Windows")) {
                        os = "Windows"
                        myExtension = "exe"
                        if (System.getenv("ProgramFiles(x86)") == null) {
                            arch = "x86"
                        }
                    }
                    def myName = "Miniconda2"
                    // versions <= 3.16 were named "Miniconda-${version}"
                    if (VersionNumber.parse(myExt.minicondaVersion) <= VersionNumber.parse("3.16")) {
                        myName = "Miniconda"
                    }
                    project.dependencies {
                        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                            // install 32 bit version only for Windows
                            minicondaInstaller(group: "miniconda", name: myName, version: myExt.minicondaVersion) {
                                artifact {
                                    name = myName
                                    type = myExtension
                                    classifier = "$os-x86"
                                    extension = myExtension
                                }
                            }
                        }

                        minicondaInstaller(group: "miniconda", name: myName, version: myExt.minicondaVersion) {
                            artifact {
                                name = myName
                                type = myExtension
                                classifier = "$os-x86_64"
                                extension = myExtension
                            }
                        }
                    }

                }
            }

            def minicondaBootstrapVersionDir = new File(myExt.bootstrapDirectory, myExt.minicondaVersion)
            project.task([type: Exec], "bootstrapPython") {
                outputs.dir(minicondaBootstrapVersionDir)
                onlyIf {
                    !minicondaBootstrapVersionDir.exists()
                }
                for (f in conf.files) {
                    def is64 = f.path.contains("x86_64")

                    def installDir = "$minicondaBootstrapVersionDir${is64 ? '_64' : '_32'}"

                    if (os.contains("Windows")) {
                        commandLine f, "/InstallationType=JustMe", "/AddToPath=0", "/RegisterPython=0", "/S", "/D=$installDir"
                    } else {
                        commandLine "bash", f, "-b", "-p", installDir
                    }
                    doFirst {
                        if (!myExt.bootstrapDirectory.exists()) {
                            myExt.bootstrapDirectory.mkdir()
                        }
                    }
                }
            }

            myExt.minicondaExecutable32 = new File("${minicondaBootstrapVersionDir}_32/${Os.isFamily(Os.FAMILY_WINDOWS) ? 'Scripts/conda.exe' : 'bin/conda'}")

            myExt.minicondaExecutable64 = new File("${minicondaBootstrapVersionDir}_64/${Os.isFamily(Os.FAMILY_WINDOWS) ? 'Scripts/conda.exe' : 'bin/conda'}")

        }
    }
}

apply plugin: MinicondaPlugin


miniconda {
    bootstrapDirectory = new File(buildDir, '.miniconda')
    buildEnvironmentDirectory = new File(buildDir, 'MinicondaEnvs')
    minicondaVersion = '3.10.1'
    packages = ["cython", "numpy", "nose", "ipython", "pip"]
    //minicondaExecutable32 - initialized during configuration phase
    //minicondaExecutable64 - initialized during configuration phase
}


def condaCreate(project, name, version, cl) {
    def lst = cl()

    return task("conda create $name", dependsOn: "bootstrapPython") {

        def env = file("$miniconda.buildEnvironmentDirectory/$name")
        def is64 = name.endsWith("_64")

        inputs.property("packages", lst)
        outputs.dir(env)

        onlyIf {
            !env.exists()
        }

        doLast {
            project.exec {
                commandLine is64 ? miniconda.minicondaExecutable64 : miniconda.minicondaExecutable32, "create", "-p", env, "-y", "-f", "python=$version", "cython", "numpy", "nose", "ipython", "pip"
            }

            for (String arg : lst) {
                project.exec {
                    commandLine file("$miniconda.buildEnvironmentDirectory/$name/${Os.isFamily(Os.FAMILY_WINDOWS) ? 'Scripts/pip.exe' : 'bin/pip'}"), "install", arg
                }
            }
        }
    }
}

task setupMinicondaEnvWin() {
    dependsOn condaCreate(project, "py27_32", "2.7") {
        ["django>=1.9",
         "setuptools>=0.9"]
    }

//	condaCreate(project, "py34_32", "3.4")
//	condaCreate(project, "py35_32", "3.5")
//	condaCreate(project, "py27_64", "2.7")
//	condaCreate(project, "py34_64", "3.4")
//	condaCreate(project, "py35_64", "3.5")
}

task setupMinicondaEnvMac() {
    dependsOn       \
           condaCreate(project, "py27_64", "2.7") {
        ["django>=1.7,<1.8",
         "setuptools>=0.9",
         ["-U", "pip>=1.4", "wheel>=0.21", "twine"]]
    },
            condaCreate(project, "py34_64", "3.4") {
                ["django>=1.9",
                 "setuptools>=0.9",
                 ["-U", "pip>=1.4", "wheel>=0.21", "twine"]]
            },
            condaCreate(project, "py35_64", "3.5") {
                ["django>=1.9",
                 "setuptools>=0.9",
                 ["-U", "pip>=1.4", "wheel>=0.21", "twine"]]
            }
//
//            ]
//	condaCreate(project, "py34_32", "3.4")
//	condaCreate(project, "py35_32", "3.5")
//	condaCreate(project, "py27_64", "2.7")
//	condaCreate(project, "py34_64", "3.4")
//	condaCreate(project, "py35_64", "3.5")
}

/*
C:\tools\Miniconda32\Scripts\conda 
C:\tools\Miniconda32\Scripts\activate py27_32
pip install "django>=1.7,<1.8"
pip install -U "setuptools>=0.9"
pip install -U "pip>=1.4" "wheel>=0.21" twine
deactivate
*/



task buildOnWindows(dependsOn: 'setupMinicondaEnvWin') << {

    println "Hi Windows"
}

task buildOnMac(dependsOn: 'setupMinicondaEnvMac') << {

    println "Hi Mac"
}


task buildBinaries() {

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn buildOnWindows
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        dependsOn buildOnMac
    }


}
