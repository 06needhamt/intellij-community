python.f.string.completion.lesson.name=F-string completion
python.f.string.completion.type.prefix=<ide/> supports automatic f-string conversion. Just start to type {0}.
python.f.string.completion.invoke.manually=You can invoke completion manually with {0}.
python.f.string.completion.complete.it=Complete the statement with {0}. Just press {1} to apply the first item.
python.f.string.completion.result.message=You may see that a simple Python string was replaced by f-string after the completion.

python.postfix.completion.select.item=Select {0} item from completion list.

python.smart.completion.lesson.name=Smart completion
python.smart.completion.try.basic.completion=Try to use Basic Completion by pressing {0}.
python.smart.completion.use.smart.completion=Unfortunately <ide/> has no direct information about {0} type. \
  But sometimes it can guess completion by the context! Use {1} to invoke Smart Completion.
python.smart.completion.finish.completion=Now just choose {0} item to finish this lesson.

python.tab.completion.lesson.name=Tab completion
python.tab.completion.start.completion=Suppose you want to replace {0} with {1}. Invoke completion by pressing {2}.
python.tab.completion.select.item=Select item {0} by keyboard arrows or just start typing it.
python.tab.completion.use.tab.completion=If you press {0} you will insert {1} before {2}. Instead press {3} to replace {2} with {1}.

python.in.place.refactoring.lesson.name=In-place refactoring
python.in.place.refactoring.start.type.new.name=Let''s consider an alternative approach to performing refactorings. \
  Suppose we want to rename local variable {0} to {1}. Just start typing the new name.
python.in.place.refactoring.invoke.intentions=<ide/> is guessing that you are going to rename the variable. \
  You can notice it by the icon {0} in the left editor gutter. Invoke intentions by {1} when you finish typing the new name.
python.in.place.refactoring.finish.rename=Press {0} to finish rename.
python.in.place.refactoring.add.parameter=Let''s add an argument to this method. We place the editor caret just after the first parameter. \
  Now type comma and parameter''s name: {0}.
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> is guessing that you are going to change the method signature. \
  You can notice it by the same icon {0} at the left editor gutter. Invoke intentions by {1} when you finish typing the new parameter.
python.in.place.refactoring.update.callers=Press {0} to update the callers.
python.in.place.refactoring.signature.preview=<ide/> is showing you the short signature preview. Press {0} to continue.
python.in.place.refactoring.set.default.value=Now you need to type the value which will be inserted as an argument into each call. \
  You can choose {0} for this sample. Then press {1} to continue.
python.in.place.refactoring.remark.about.application.scope=Note: In-place refactoring may be applied only in the \
  definition point whiles direct invocation of rename or change-signature refactorings may be called from both definition and usage.

python.quick.fix.refactoring.lesson.name=Quick fix refactoring
python.quick.fix.refactoring.type.new.argument=Several refactorings can be performed as quick fixes. \
  Suppose we want to add a parameter to the method {0} and pass the variable {1} to it. Let''s type {2} after the first argument.
python.quick.fix.refactoring.wait.completion.showed=Wait a little bit for the completion list...
python.quick.fix.refactoring.close.completion.list=For now, we don''t want to apply any completion. Close the list ({0}).
python.quick.fix.refactoring.invoke.intentions=As you may notice, <ide/> is showing you a warning here. Let''s invoke intentions by {0}.
python.quick.fix.refactoring.choose.change.signature=Choose {0} quick fix.
python.quick.fix.refactoring.select.new.parameter=Let''s set the default value for the new parameter. Click the new parameter line. \
  Alternatively, you can set focus to the parameter without a mouse by {0} and then {1}.
python.quick.fix.refactoring.set.default.value=You may navigate through the fields (and the checkbox) by using {0}. \
  With the checkbox, you can let <ide/> inline the default value to the other callers or set it as the default value for the new parameter. \
  The Signature Preview will help you understand the difference. Now set the default value as 0.
python.quick.fix.refactoring.finish.refactoring=Press {0} (or click {1}) to finish the refactoring.

python.rename.press.rename=Press {0} to rename field {1} (e.g., to {2}).
python.rename.expand.dynamic.references=In simple cases {0} will just rename without confirmation. \
  But in this sample, <ide/> detects two calls of {0} method for objects with unknown types. Expand {1} item.
python.rename.exclude.item=It seems {0} should be excluded from rename. Select it and press {1}.
python.rename.finish.refactoring=Now just finish the rename with the {0} button.

python.run.configuration.lets.run=Let''s run our simple example with {0}.

python.debug.workflow.rerun=Let''s rerun our program. Just click again at {0} or use {1}.
