{
  parserClass='com.intellij.json.JsonParser'
  parserUtilClass="com.intellij.json.JsonParserUtil"
  psiPackage='com.intellij.json.psi'
  psiImplPackage='com.intellij.json.psi.impl'

  elementTypeHolderClass='com.intellij.json.JsonElementTypes'
  elementTypeClass='com.intellij.json.JsonElementType'
  psiClassPrefix="Json"

  psiImplUtilClass='com.intellij.json.psi.JsonPsiImplUtils'
  tokenTypeClass='com.intellij.json.JsonTokenType'

    tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        
        COMMA=','
        COLON=':'
        // COMMENT='regexp:"//.*|/\*.*?\*/"'
        // else /\*(?:[^*]|\*[^/])*\*+/

        // unclosed string literal matches till the line's end
        // any escape sequences included, illegal escapes are indicated by SyntaxHighlighter
        // and JsonStringLiteralAnnotator
        STRING='regexp:"([^\\"\r\n]|\\[^\r\n])*"?'
//        STRING='regexp:"([^\\"\r\n]|\\([\\"/bfnrt]|u[a-fA-F0-9]{4}))*"?'

        NUMBER='regexp:-?\d+(\.\d+([eE][+-]?\d+)?)?'
        TRUE='true'
        FALSE='false'
        NULL='null'
        // Workaround for highlighting issue
        // plays role of IDENTIFIER or NAME token in other languages
        TEXT='regexp:\w+'
    ]

    extends("object|array|literal")=property_value
    extends("string_literal|number_literal|boolean_literal|null_literal")=literal
}

json ::= object | array

object ::= L_CURLY [properties] R_CURLY {
  pin=1
  methods=[
    findProperty
  ]
}
private properties ::= property (COMMA property)* { pin(".*")=1 }
property ::= property_name COLON property_value {
  pin = 1
  methods=[ getName ]
  recoverWhile = brace_or_comma
}

array ::= L_BRACKET [array_elements] R_BRACKET { pin=1 }
private array_elements ::= array_element (COMMA array_element)* { pin(".*")=1 }
private array_element ::= property_value {
  recoverWhile = bracket_or_comma
}

property_name ::= string_literal
property_value ::= object | array | literal

string_literal ::= STRING
number_literal ::= NUMBER
boolean_literal ::= TRUE | FALSE
null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[isQuotedString]
  mixin="com.intellij.json.psi.impl.JsonLiteralMixin"
}

private bracket_or_comma ::= !(R_BRACKET|COMMA)
private brace_or_comma ::= !(R_CURLY|COMMA)