{
  parserClass = 'com.intellij.json.JsonParser'
  parserUtilClass = "com.intellij.json.JsonParserUtil"
  psiPackage = 'com.intellij.json.psi'
  psiImplPackage = 'com.intellij.json.psi.impl'

  elementTypeHolderClass = 'com.intellij.json.JsonElementTypes'
  elementTypeClass = 'com.intellij.json.JsonElementType'
  psiClassPrefix = "Json"

  psiImplUtilClass = 'com.intellij.json.psi.impl.JsonPsiImplUtils'
  tokenTypeClass = 'com.intellij.json.JsonTokenType'

  implements = "com.intellij.json.psi.JsonElement"
  extends = "com.intellij.json.psi.impl.JsonElementImpl"

    tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        
        COMMA=','
        COLON=':'
        // COMMENT='regexp:"//.*|/\*.*?\*/"'
        // else /\*(?:[^*]|\*[^/])*\*+/

        // unclosed string literal matches till the line's end
        // any escape sequences included, illegal escapes are indicated by SyntaxHighlighter
        // and JsonStringLiteralAnnotator
        STRING='regexp:"([^\\"\r\n]|\\[^\r\n])*"?'
//        STRING='regexp:"([^\\"\r\n]|\\([\\"/bfnrt]|u[a-fA-F0-9]{4}))*"?'

        NUMBER='regexp:-?\d+(\.\d+([eE][+-]?\d+)?)?'
        TRUE='true'
        FALSE='false'
        NULL='null'
        // Workaround for highlighting issue
        // plays role of IDENTIFIER or NAME token in other languages
        TEXT='regexp:\w+'
    ]

    extends("object|array|literal")=value
    extends("string_literal|number_literal|boolean_literal|null_literal")=literal
    implements("property")="com.intellij.psi.PsiNamedElement"
}

json ::= object | array

object ::= '{' [properties] '}' {
  pin=1
  methods=[
    findProperty
  ]
}

private properties ::= property (',' property)* { pin(".*")=1 }
property ::= string_literal ':' value {
  pin = 2
  methods=[
    getName
    getNameElement
    getValue
  ]
  mixin="com.intellij.json.psi.impl.JsonPropertyMixin"
  recoverWhile = not_brace_or_comma
}

array ::= '[' [array_elements] ']' {
  pin=1
}
private array_elements ::= array_element (',' array_element)* { pin(".*")=1 }
private array_element ::= value {
  recoverWhile = not_bracket_or_comma
}

string_literal ::= STRING
number_literal ::= NUMBER
boolean_literal ::= TRUE | FALSE
null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[isQuotedString]
  mixin="com.intellij.json.psi.impl.JsonLiteralMixin"
}
value ::= object | array | literal

// Recoveries
private not_bracket_or_comma ::= !(']'|',')
private not_brace_or_comma ::= !('}'|',')