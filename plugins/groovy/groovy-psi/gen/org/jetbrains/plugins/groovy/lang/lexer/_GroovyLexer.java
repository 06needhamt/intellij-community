/*
 * Copyright 2000-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.plugins.groovy.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import static org.jetbrains.plugins.groovy.lang.groovydoc.parser.GroovyDocElementTypes.*;
import static org.jetbrains.plugins.groovy.lang.lexer.GroovyTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>groovy.flex</tt>
 */
public class _GroovyLexer extends GroovyLexerBase implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_INNER_BLOCK = 2;
  public static final int IN_SINGLE_GSTRING = 4;
  public static final int IN_TRIPLE_GSTRING = 6;
  public static final int IN_SLASHY_STRING = 8;
  public static final int IN_DOLLAR_SLASH_STRING = 10;
  public static final int IN_GSTRING_DOLLAR = 12;
  public static final int IN_GSTRING_DOT = 14;
  public static final int IN_GSTRING_DOT_IDENT = 16;
  public static final int NLS_AFTER_COMMENT = 18;
  public static final int NLS_AFTER_LBRACE = 20;
  public static final int NLS_AFTER_NLS = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\25\1\30\4\13\1\30\1"+
    "\136\1\137\1\16\1\13\1\16\1\13\1\16\1\137\1\67\3\13\1\140\1\1\1\141\4\1\5"+
    "\13\1\27\2\13\1\142\4\13\1\40\1\13\1\143\3\1\1\13\1\144\1\47\2\13\1\145\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\146\5\1\1\104\2\13\1\140\1\147\3\1"+
    "\1\150\1\13\1\151\1\42\2\13\1\40\1\1\2\13\1\140\1\1\1\37\1\42\1\13\1\144\6"+
    "\1\1\152\1\153\14\13\4\1\21\13\1\134\2\13\1\134\1\154\1\13\1\144\3\13\1\155"+
    "\1\156\1\157\1\120\1\156\2\1\1\160\4\1\1\161\1\1\1\120\6\1\1\162\1\163\1\164"+
    "\1\165\1\166\3\1\1\167\147\1\2\13\1\143\2\13\1\143\10\13\1\170\1\171\2\13"+
    "\1\126\3\13\1\172\1\1\1\13\1\107\4\173\4\1\1\103\35\1\1\174\2\1\1\175\1\25"+
    "\4\13\1\176\1\25\4\13\1\127\1\104\1\13\1\144\1\25\4\13\1\143\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4\1\2\13\1\144"+
    "\20\13\1\120\1\13\1\177\1\1\2\13\1\143\1\103\1\13\1\144\4\13\1\40\2\1\1\200"+
    "\1\201\5\13\1\202\1\13\1\144\1\27\3\1\1\200\1\203\1\13\1\31\1\1\3\13\1\140"+
    "\1\201\2\13\1\140\3\1\1\204\1\42\1\13\1\40\1\13\1\107\1\1\1\13\1\120\1\50"+
    "\2\13\1\31\1\103\1\1\1\205\1\206\2\13\1\46\1\1\1\207\1\1\1\13\1\210\3\13\1"+
    "\211\1\212\1\213\1\30\1\64\1\214\1\215\1\173\2\13\1\127\1\40\7\13\1\31\1\1"+
    "\72\13\1\140\1\13\1\216\2\13\1\145\20\1\26\13\1\144\6\13\1\75\2\1\1\107\1"+
    "\217\1\55\1\220\1\221\6\13\1\16\1\1\1\150\25\13\1\144\1\1\4\13\1\201\2\13"+
    "\1\27\2\1\1\145\7\1\1\205\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1\222\4\13\1"+
    "\143\1\223\1\224\2\1\1\225\1\13\1\14\1\226\2\144\2\1\7\13\1\30\30\1\1\13\1"+
    "\120\3\13\1\67\2\1\2\13\1\1\1\13\1\227\2\13\1\40\1\13\1\144\2\13\1\230\3\1"+
    "\11\13\1\144\6\1\2\13\1\27\3\13\1\140\11\1\23\13\1\107\1\13\1\40\1\27\11\1"+
    "\1\231\2\13\1\232\1\13\1\40\1\13\1\107\1\13\1\143\4\1\1\13\1\233\1\13\1\40"+
    "\1\13\1\75\4\1\3\13\1\234\4\1\1\67\1\235\1\13\1\140\2\1\1\13\1\120\1\13\1"+
    "\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4"+
    "\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\150\2\13\1\27\4\1\1\150\2\13\2\1\1"+
    "\13\1\46\1\1\1\150\1\13\1\107\2\1\2\13\1\236\1\150\2\13\1\31\1\237\1\240\2"+
    "\1\1\13\1\22\1\145\5\1\1\241\1\242\1\46\2\13\1\143\2\1\1\71\1\54\1\55\1\66"+
    "\1\1\1\243\1\16\21\1\3\13\1\1\1\244\13\1\2\13\1\143\2\1\1\245\2\1\3\13\1\1"+
    "\1\246\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3\13\1\46\20\1"+
    "\71\13\1\75\16\1\14\13\1\140\53\1\2\13\1\143\75\1\44\13\1\107\33\1\43\13\1"+
    "\46\1\13\1\143\7\1\1\13\1\144\1\1\3\13\1\1\1\140\1\1\1\150\1\247\1\13\67\1"+
    "\4\13\1\47\1\67\3\1\1\150\6\1\1\16\77\1\6\13\1\30\1\120\1\46\1\75\66\1\5\13"+
    "\1\205\3\13\1\137\1\250\1\251\1\252\3\13\1\253\1\254\1\13\1\255\1\256\1\36"+
    "\24\13\1\257\1\13\1\36\1\127\1\13\1\127\1\13\1\205\1\13\1\205\1\143\1\13\1"+
    "\143\1\13\1\55\1\13\1\55\1\13\1\207\3\1\14\13\1\47\123\1\1\252\1\13\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\266\1\145\1\267\1\145\24\1\55\13\1\107\2"+
    "\1\103\13\1\47\15\13\1\144\150\13\1\16\25\1\41\13\1\144\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\12\1\46\1\11\1\44\1\104\1\107\1\45\1"+
    "\73\1\74\1\10\1\31\1\100\1\32\1\42\1\7\1\34\1\37\10\14\1\77\1\110\1\101\1"+
    "\72\1\102\1\71\1\111\1\13\1\36\1\13\1\26\1\30\1\20\1\16\1\43\1\24\2\43\1\22"+
    "\13\43\1\41\2\43\1\75\1\6\1\76\1\105\1\33\1\0\1\51\1\35\1\52\1\25\1\27\1\17"+
    "\1\15\1\65\1\23\1\43\1\53\1\21\1\57\1\61\1\60\1\50\1\43\1\56\1\54\1\55\1\62"+
    "\1\63\1\67\1\40\1\64\1\66\1\70\1\106\1\47\1\103\6\0\1\1\24\0\1\43\12\0\1\43"+
    "\4\0\1\43\5\0\27\43\1\0\12\43\4\0\14\43\16\0\5\43\7\0\1\43\1\0\1\43\1\0\5"+
    "\43\1\0\2\43\2\0\4\43\1\0\1\43\6\0\1\43\1\0\3\43\1\0\1\43\1\0\4\43\1\0\23"+
    "\43\1\0\13\43\10\0\6\43\1\0\26\43\2\0\1\43\6\0\10\43\10\0\13\43\5\0\3\43\33"+
    "\0\6\43\1\0\1\43\17\0\2\43\7\0\2\43\12\0\3\43\2\0\2\43\1\0\16\43\15\0\11\43"+
    "\13\0\1\43\30\0\6\43\4\0\2\43\4\0\1\43\5\0\6\43\4\0\1\43\11\0\1\43\3\0\1\43"+
    "\7\0\11\43\7\0\5\43\17\0\26\43\3\0\1\43\2\0\1\43\7\0\11\43\4\0\10\43\2\0\2"+
    "\43\2\0\26\43\1\0\7\43\1\0\1\43\3\0\4\43\3\0\1\43\20\0\1\43\15\0\2\43\1\0"+
    "\1\43\5\0\6\43\4\0\2\43\1\0\2\43\1\0\2\43\1\0\2\43\17\0\4\43\1\0\1\43\3\0"+
    "\3\43\20\0\11\43\1\0\2\43\1\0\2\43\1\0\5\43\3\0\1\43\2\0\1\43\30\0\1\43\13"+
    "\0\10\43\2\0\1\43\3\0\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1"+
    "\0\2\43\3\0\2\43\3\0\3\43\3\0\14\43\13\0\10\43\1\0\2\43\10\0\3\43\5\0\4\43"+
    "\1\0\5\43\3\0\1\43\3\0\2\43\15\0\13\43\2\0\1\43\21\0\1\43\5\0\22\43\3\0\10"+
    "\43\1\0\11\43\1\0\1\43\2\0\7\43\11\0\1\43\1\0\2\43\15\0\2\43\1\0\1\43\2\0"+
    "\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\7\43\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2"+
    "\43\1\0\4\43\1\0\2\43\11\0\1\43\2\0\5\43\1\0\1\43\25\0\14\43\1\0\24\43\13"+
    "\0\5\43\3\0\6\43\4\0\4\43\3\0\1\43\3\0\2\43\7\0\3\43\4\0\15\43\14\0\1\43\1"+
    "\0\6\43\1\0\1\43\5\0\1\43\2\0\13\43\1\0\15\43\1\0\4\43\2\0\7\43\1\0\1\43\1"+
    "\0\4\43\2\0\1\43\1\0\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0\16\43\2\0\6\43\2"+
    "\0\15\43\2\0\1\43\1\0\10\43\7\0\15\43\1\0\6\43\23\0\1\43\4\0\1\43\3\0\11\43"+
    "\1\0\1\43\5\0\17\43\1\0\16\43\2\0\14\43\13\0\1\43\15\0\7\43\7\0\16\43\15\0"+
    "\2\43\11\0\4\43\1\0\4\43\3\0\2\43\11\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43\1"+
    "\0\6\43\1\0\7\43\1\0\1\43\3\0\3\43\1\0\7\43\3\0\4\43\2\0\6\43\14\0\2\1\7\0"+
    "\1\43\15\0\1\43\2\0\1\43\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43\6\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\4\43\1\0\13\43\2\0\4\43\5\0\5\43\4\0\1\43\4\0\2\43\13\0"+
    "\5\43\6\0\4\43\3\0\2\43\14\0\10\43\7\0\10\43\1\0\7\43\6\0\2\43\12\0\5\43\5"+
    "\0\2\43\3\0\7\43\6\0\3\43\12\0\2\43\13\0\11\43\2\0\27\43\2\0\7\43\1\0\3\43"+
    "\1\0\4\43\1\0\4\43\2\0\6\43\3\0\1\43\1\0\1\43\2\0\5\43\1\0\12\43\12\0\5\43"+
    "\1\0\3\43\1\0\10\43\4\0\7\43\3\0\1\43\3\0\2\43\1\0\1\43\3\0\2\43\2\0\5\43"+
    "\2\0\1\43\1\0\1\43\30\0\3\43\3\0\6\43\2\0\6\43\2\0\6\43\11\0\7\43\4\0\5\43"+
    "\3\0\5\43\5\0\1\43\1\0\10\43\1\0\5\43\1\0\1\43\1\0\2\43\1\0\2\43\1\0\12\43"+
    "\6\0\12\43\2\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0\14\43\1\0\16\43\1\0\2\43"+
    "\1\0\2\43\1\0\10\43\6\0\4\43\4\0\16\43\2\0\1\43\1\0\14\43\1\0\2\43\3\0\1\43"+
    "\2\0\4\43\1\0\2\43\12\0\10\43\6\0\6\43\1\0\3\43\1\0\12\43\3\0\1\43\12\0\4"+
    "\43\25\0\1\43\1\0\1\43\3\0\7\43\1\0\1\43\1\0\4\43\1\0\17\43\1\0\2\43\14\0"+
    "\3\43\4\0\2\43\1\0\1\43\20\0\4\43\10\0\1\43\13\0\10\43\5\0\3\43\2\0\1\43\2"+
    "\0\2\43\2\0\4\43\1\0\14\43\1\0\1\43\1\0\7\43\1\0\21\43\1\0\4\43\2\0\10\43"+
    "\1\0\7\43\1\0\14\43\1\0\4\43\1\0\5\43\1\0\1\43\3\0\14\43\2\0\10\43\1\0\2\43"+
    "\1\0\1\43\2\0\1\43\1\0\12\43\1\0\4\43\1\0\1\43\1\0\1\43\6\0\1\43\4\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\3\43\1\0\2\43\1\0\1\43\2\0\1\43\1\0\1\43\1\0\1\43\1"+
    "\0\1\43\1\0\1\43\1\0\2\43\1\0\1\43\2\0\4\43\1\0\7\43\1\0\4\43\1\0\4\43\1\0"+
    "\1\43\1\0\12\43\1\0\5\43\1\0\3\43\1\0\5\43\1\0\5\43");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\2\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\5\7\1\11\1\12\1\10\1\7"+
    "\1\13\1\7\1\14\1\15\1\16\11\7\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\1\42\1\44\1\45\2\42\2\46"+
    "\1\47\1\44\2\50\1\44\1\51\20\52\1\53\2\54"+
    "\1\55\1\56\1\3\2\56\2\57\2\60\1\0\1\3"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\10\1\74\3\0\5\7\1\75"+
    "\1\7\1\76\1\7\1\77\3\7\1\100\1\101\1\102"+
    "\1\103\1\104\2\0\3\7\1\105\1\106\1\107\1\14"+
    "\1\0\1\14\2\0\1\110\4\7\1\111\21\7\1\112"+
    "\1\113\1\114\1\115\1\116\1\0\1\117\1\0\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\0\2\42\1\46"+
    "\1\126\1\127\1\130\1\50\5\52\1\75\1\52\1\76"+
    "\1\52\1\77\12\52\1\111\21\52\1\131\1\0\1\132"+
    "\1\133\1\62\1\134\1\135\1\70\1\136\1\0\1\136"+
    "\3\7\1\137\3\7\1\140\1\141\4\7\2\10\3\7"+
    "\1\142\1\143\4\14\1\110\2\0\1\144\23\7\1\145"+
    "\3\7\1\146\5\7\1\114\1\147\1\150\1\151\1\152"+
    "\1\0\1\153\3\52\1\137\3\52\1\140\1\141\32\52"+
    "\1\145\3\52\1\146\5\52\1\133\1\154\1\62\2\134"+
    "\1\136\1\0\3\7\1\155\6\7\1\156\1\7\1\157"+
    "\2\0\2\7\1\160\3\0\2\14\6\0\7\7\1\161"+
    "\2\7\1\162\10\7\1\163\1\164\3\7\1\165\1\7"+
    "\1\166\1\7\1\167\3\52\1\155\6\52\1\156\1\52"+
    "\1\157\2\52\1\160\7\52\1\161\2\52\1\162\10\52"+
    "\1\163\1\164\3\52\1\165\1\52\1\166\1\52\1\133"+
    "\2\154\1\62\1\0\1\134\1\170\1\171\1\172\7\7"+
    "\1\173\1\7\1\14\1\0\1\14\3\0\6\7\1\174"+
    "\1\175\3\7\1\176\1\7\1\177\1\7\1\200\1\7"+
    "\1\201\3\7\1\202\1\170\1\171\1\172\7\52\1\173"+
    "\7\52\1\174\1\175\3\52\1\176\1\52\1\177\1\52"+
    "\1\200\1\52\1\201\3\52\1\202\1\133\1\0\1\154"+
    "\1\0\2\7\1\203\3\7\1\204\5\7\1\205\1\7"+
    "\1\206\1\7\1\207\2\7\1\210\1\7\1\211\1\212"+
    "\1\213\1\7\2\52\1\203\3\52\1\204\5\52\1\205"+
    "\1\52\1\206\1\52\1\207\2\52\1\210\1\52\1\211"+
    "\1\212\1\213\1\52\1\0\1\214\3\7\1\215\1\216"+
    "\1\217\1\220\1\221\7\7\1\214\3\52\1\215\1\216"+
    "\1\217\1\220\1\221\7\52\4\7\1\222\1\223\1\224"+
    "\2\7\1\225\4\52\1\222\1\223\1\224\2\52\1\225"+
    "\2\7\1\226\1\227\1\7\1\230\2\52\1\226\1\227"+
    "\1\52\1\230\1\231\1\232\1\7\1\231\1\232\1\52"+
    "\1\7\1\52\2\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[679];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862"+
    "\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u0378\0\u09d4\0\u0a1e\0\u0a68"+
    "\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0378\0\u0c6e"+
    "\0\u0cb8\0\u0378\0\u0378\0\u0378\0\u0378\0\u0378\0\u0378\0\u0d02"+
    "\0\u0d4c\0\u0378\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0378\0\u0378"+
    "\0\u0378\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0378\0\u0378\0\u0fe6"+
    "\0\u1030\0\u107a\0\u10c4\0\u0378\0\u110e\0\u1158\0\u11a2\0\u11ec"+
    "\0\u0378\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642"+
    "\0\u168c\0\u0378\0\u0378\0\u16d6\0\u0378\0\u0378\0\u1720\0\u176a"+
    "\0\u17b4\0\u0378\0\u176a\0\u0378\0\u176a\0\u17fe\0\u1848\0\u1892"+
    "\0\u18dc\0\u0378\0\u1926\0\u0378\0\u0378\0\u1970\0\u19ba\0\u0378"+
    "\0\u0378\0\u0378\0\u0378\0\u0378\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u057e\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u0378\0\u0378\0\u0378\0\u0378"+
    "\0\u0378\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u0378"+
    "\0\u0378\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2"+
    "\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422"+
    "\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672"+
    "\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u0378\0\u0378\0\u282e"+
    "\0\u0378\0\u2878\0\u28c2\0\u0378\0\u290c\0\u0378\0\u0378\0\u0378"+
    "\0\u0378\0\u0378\0\u0378\0\u2956\0\u0378\0\u29a0\0\u0378\0\u0378"+
    "\0\u0378\0\u0378\0\u0378\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12"+
    "\0\u1236\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8"+
    "\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408"+
    "\0\u3452\0\u349c\0\u176a\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u0378"+
    "\0\u0378\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u057e"+
    "\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0"+
    "\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u0378\0\u0378"+
    "\0\u0378\0\u3bd6\0\u3c20\0\u3c6a\0\u0378\0\u3cb4\0\u3cfe\0\u3d48"+
    "\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98"+
    "\0\u3fe2\0\u402c\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8"+
    "\0\u4232\0\u427c\0\u42c6\0\u057e\0\u4310\0\u435a\0\u43a4\0\u057e"+
    "\0\u43ee\0\u4438\0\u4482\0\u44cc\0\u4516\0\u0378\0\u0378\0\u0378"+
    "\0\u0378\0\u0378\0\u4560\0\u0378\0\u45aa\0\u45f4\0\u463e\0\u1236"+
    "\0\u4688\0\u46d2\0\u471c\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e"+
    "\0\u48d8\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u4a94\0\u4ade"+
    "\0\u4b28\0\u4b72\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e"+
    "\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0\0\u4eea\0\u4f34\0\u1236"+
    "\0\u4f7e\0\u4fc8\0\u5012\0\u1236\0\u505c\0\u50a6\0\u50f0\0\u513a"+
    "\0\u5184\0\u51ce\0\u5218\0\u5262\0\u52ac\0\u0378\0\u0378\0\u52f6"+
    "\0\u5340\0\u538a\0\u53d4\0\u057e\0\u541e\0\u5468\0\u54b2\0\u54fc"+
    "\0\u5546\0\u5590\0\u057e\0\u55da\0\u057e\0\u5624\0\u566e\0\u56b8"+
    "\0\u5702\0\u057e\0\u574c\0\u5796\0\u57e0\0\u582a\0\u5874\0\u58be"+
    "\0\u5908\0\u5952\0\u3d48\0\u599c\0\u59e6\0\u5a30\0\u5a7a\0\u5ac4"+
    "\0\u5b0e\0\u5b58\0\u5ba2\0\u5bec\0\u057e\0\u5c36\0\u5c80\0\u057e"+
    "\0\u5cca\0\u5d14\0\u5d5e\0\u5da8\0\u5df2\0\u5e3c\0\u5e86\0\u5ed0"+
    "\0\u057e\0\u057e\0\u5f1a\0\u5f64\0\u5fae\0\u057e\0\u5ff8\0\u057e"+
    "\0\u6042\0\u0378\0\u608c\0\u60d6\0\u6120\0\u1236\0\u616a\0\u61b4"+
    "\0\u61fe\0\u6248\0\u6292\0\u62dc\0\u1236\0\u6326\0\u1236\0\u6370"+
    "\0\u63ba\0\u1236\0\u6404\0\u644e\0\u6498\0\u64e2\0\u652c\0\u6576"+
    "\0\u65c0\0\u1236\0\u660a\0\u6654\0\u1236\0\u669e\0\u66e8\0\u6732"+
    "\0\u677c\0\u67c6\0\u6810\0\u685a\0\u68a4\0\u1236\0\u1236\0\u68ee"+
    "\0\u6938\0\u6982\0\u1236\0\u69cc\0\u1236\0\u6a16\0\u6a60\0\u6aaa"+
    "\0\u0378\0\u0378\0\u5262\0\u6af4\0\u057e\0\u6b3e\0\u057e\0\u6b88"+
    "\0\u6bd2\0\u6c1c\0\u6c66\0\u6cb0\0\u6cfa\0\u6d44\0\u057e\0\u6d8e"+
    "\0\u6dd8\0\u6e22\0\u6e6c\0\u6eb6\0\u6f00\0\u6f4a\0\u6f94\0\u6fde"+
    "\0\u7028\0\u7072\0\u70bc\0\u7106\0\u057e\0\u057e\0\u7150\0\u719a"+
    "\0\u71e4\0\u057e\0\u722e\0\u057e\0\u7278\0\u057e\0\u72c2\0\u730c"+
    "\0\u7356\0\u73a0\0\u73ea\0\u057e\0\u1236\0\u7434\0\u1236\0\u747e"+
    "\0\u74c8\0\u7512\0\u755c\0\u75a6\0\u75f0\0\u763a\0\u1236\0\u7684"+
    "\0\u76ce\0\u7718\0\u7762\0\u77ac\0\u77f6\0\u7840\0\u1236\0\u1236"+
    "\0\u788a\0\u78d4\0\u791e\0\u1236\0\u7968\0\u1236\0\u79b2\0\u1236"+
    "\0\u79fc\0\u7a46\0\u7a90\0\u7ada\0\u7b24\0\u1236\0\u0378\0\u6a60"+
    "\0\u7b6e\0\u6af4\0\u7bb8\0\u7c02\0\u057e\0\u7c4c\0\u7c96\0\u7ce0"+
    "\0\u057e\0\u7d2a\0\u7d74\0\u7dbe\0\u7e08\0\u7e52\0\u057e\0\u7e9c"+
    "\0\u057e\0\u7ee6\0\u057e\0\u7f30\0\u7f7a\0\u057e\0\u7fc4\0\u057e"+
    "\0\u057e\0\u057e\0\u800e\0\u8058\0\u80a2\0\u1236\0\u80ec\0\u8136"+
    "\0\u8180\0\u1236\0\u81ca\0\u8214\0\u825e\0\u82a8\0\u82f2\0\u1236"+
    "\0\u833c\0\u1236\0\u8386\0\u1236\0\u83d0\0\u841a\0\u1236\0\u8464"+
    "\0\u1236\0\u1236\0\u1236\0\u84ae\0\u7b6e\0\u057e\0\u84f8\0\u8542"+
    "\0\u858c\0\u057e\0\u057e\0\u057e\0\u057e\0\u057e\0\u85d6\0\u8620"+
    "\0\u866a\0\u86b4\0\u86fe\0\u8748\0\u8792\0\u1236\0\u87dc\0\u8826"+
    "\0\u8870\0\u1236\0\u1236\0\u1236\0\u1236\0\u1236\0\u88ba\0\u8904"+
    "\0\u894e\0\u8998\0\u89e2\0\u8a2c\0\u8a76\0\u8ac0\0\u8b0a\0\u8b54"+
    "\0\u8b9e\0\u057e\0\u057e\0\u057e\0\u8be8\0\u8c32\0\u057e\0\u8c7c"+
    "\0\u8cc6\0\u8d10\0\u8d5a\0\u1236\0\u1236\0\u1236\0\u8da4\0\u8dee"+
    "\0\u1236\0\u8e38\0\u8e82\0\u057e\0\u057e\0\u8ecc\0\u057e\0\u8f16"+
    "\0\u8f60\0\u1236\0\u1236\0\u8faa\0\u1236\0\u057e\0\u057e\0\u8ff4"+
    "\0\u1236\0\u1236\0\u903e\0\u9088\0\u90d2\0\u057e\0\u1236";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[679];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\3\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\26\1\30\1\26\1\31\1\26"+
    "\1\32\1\26\1\33\1\26\1\34\1\26\1\35\1\36"+
    "\1\26\1\37\1\40\1\26\1\27\2\26\1\41\1\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\26"+
    "\1\51\1\52\1\53\2\26\1\54\1\26\1\55\3\26"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\15\3\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\26\1\30"+
    "\1\26\1\31\1\26\1\32\1\26\1\33\1\26\1\34"+
    "\1\26\1\35\1\36\1\26\1\37\1\40\1\26\1\27"+
    "\2\26\1\41\1\26\1\42\1\43\1\44\1\101\1\46"+
    "\1\47\1\50\1\26\1\51\1\52\1\53\2\26\1\54"+
    "\1\26\1\55\3\26\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\102\1\103"+
    "\2\104\1\102\1\103\1\105\35\102\1\106\1\102\1\107"+
    "\43\102\6\110\1\105\35\110\1\106\1\110\1\111\43\110"+
    "\6\112\1\113\1\114\34\112\1\115\45\112\7\116\1\117"+
    "\34\116\1\120\45\116\13\121\1\122\1\121\2\122\1\123"+
    "\1\122\1\124\1\122\1\125\1\122\1\126\1\122\1\127"+
    "\1\122\2\121\1\122\1\121\1\130\1\122\1\121\2\122"+
    "\1\121\1\122\4\121\1\131\1\132\1\133\1\122\1\134"+
    "\1\135\1\136\2\122\1\137\1\122\1\140\3\122\1\141"+
    "\1\142\21\121\42\143\1\144\47\143\13\145\1\122\1\145"+
    "\14\122\2\145\1\122\1\145\2\122\1\145\2\122\1\145"+
    "\1\122\4\145\20\122\22\145\1\146\5\147\1\150\1\151"+
    "\102\146\1\152\5\147\1\153\103\152\1\154\5\147\1\155"+
    "\103\154\113\0\5\16\1\156\104\0\2\17\1\157\1\0"+
    "\1\17\113\0\1\160\1\161\61\0\1\162\27\0\1\163"+
    "\31\0\1\164\27\0\1\165\31\0\1\166\171\0\1\167"+
    "\32\0\16\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\36\0\1\27\2\170\2\171\2\172\2\173\2\174\2\175"+
    "\2\0\1\176\1\27\2\0\1\27\2\0\1\177\62\0"+
    "\6\26\1\200\1\26\1\201\5\26\2\0\7\26\1\0"+
    "\2\26\3\0\1\26\1\202\6\26\1\203\7\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\10\26\1\204"+
    "\7\26\35\0\4\26\1\205\11\26\2\0\7\26\1\0"+
    "\2\26\3\0\7\26\1\206\1\26\1\207\6\26\35\0"+
    "\14\26\1\210\1\26\2\0\7\26\1\0\2\26\3\0"+
    "\10\26\1\211\7\26\35\0\6\26\1\212\7\26\2\0"+
    "\5\26\1\213\1\26\1\0\2\26\3\0\11\26\1\214"+
    "\6\26\53\0\1\215\40\0\1\216\51\0\1\217\37\0"+
    "\1\220\7\0\1\221\23\0\1\27\2\170\2\171\2\172"+
    "\2\173\2\174\2\175\2\0\1\176\1\27\2\222\1\27"+
    "\2\223\1\177\62\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\6\26\1\224\1\26\1\225\3\26\1\226\3\26"+
    "\64\0\1\227\44\0\1\230\11\0\1\231\3\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\20\26\22\0\2\232"+
    "\2\0\2\232\1\233\36\232\1\234\44\232\2\235\2\0"+
    "\2\235\1\236\35\235\1\0\1\235\1\237\43\235\13\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\1\26\1\240"+
    "\4\26\1\241\3\26\1\242\5\26\35\0\16\26\2\0"+
    "\2\26\1\243\4\26\1\0\2\26\3\0\4\26\1\244"+
    "\13\26\35\0\6\26\1\245\7\26\2\0\7\26\1\0"+
    "\2\26\3\0\1\26\1\246\6\26\1\247\4\26\1\250"+
    "\2\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\5\26\1\251\4\26\1\252\1\26\1\253\1\254\1\26"+
    "\1\255\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\6\26\1\256\6\26\1\257\2\26\35\0\14\26\1\260"+
    "\1\26\2\0\7\26\1\0\2\26\3\0\20\26\35\0"+
    "\14\26\1\261\1\26\2\0\7\26\1\0\2\26\3\0"+
    "\1\26\1\262\10\26\1\263\5\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\10\26\1\264\7\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\15\26\1\265"+
    "\2\26\64\0\1\266\34\0\1\267\104\0\1\270\10\0"+
    "\1\271\100\0\1\272\6\0\1\273\102\0\1\274\7\0"+
    "\1\275\101\0\1\276\111\0\1\277\111\0\1\300\13\0"+
    "\1\301\75\0\1\302\14\0\1\303\2\0\2\102\2\0"+
    "\2\102\1\0\35\102\1\0\1\102\1\0\44\102\1\103"+
    "\2\104\2\103\1\304\35\102\1\0\1\102\1\0\43\102"+
    "\1\0\5\104\1\304\103\0\1\305\3\0\1\305\1\0"+
    "\104\305\6\110\1\0\35\110\1\0\1\110\1\0\43\110"+
    "\46\0\1\306\43\0\6\112\2\0\34\112\1\0\45\112"+
    "\7\0\1\307\102\0\13\310\1\0\1\310\14\0\2\310"+
    "\1\0\1\310\2\0\1\310\2\0\1\310\1\0\4\310"+
    "\21\0\21\310\7\116\1\0\34\116\1\0\45\116\44\0"+
    "\1\311\45\0\7\312\1\313\3\312\1\0\1\312\14\0"+
    "\2\312\1\0\1\312\2\0\1\312\2\0\1\312\1\0"+
    "\1\313\3\312\21\0\21\312\13\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\6\122\1\314\1\122"+
    "\1\315\5\122\2\0\7\122\1\0\1\122\4\0\1\122"+
    "\1\316\6\122\1\317\7\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\10\122\1\320\7\122\35\0\4\122"+
    "\1\321\11\122\2\0\7\122\1\0\1\122\4\0\7\122"+
    "\1\322\1\122\1\323\6\122\35\0\14\122\1\324\1\122"+
    "\2\0\7\122\1\0\1\122\4\0\10\122\1\325\7\122"+
    "\35\0\6\122\1\326\7\122\2\0\5\122\1\327\1\122"+
    "\1\0\1\122\4\0\11\122\1\330\6\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\6\122\1\331\1\122"+
    "\1\332\3\122\1\333\3\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\1\122\1\334\4\122\1\335\3\122"+
    "\1\336\5\122\35\0\16\122\2\0\2\122\1\337\4\122"+
    "\1\0\1\122\4\0\4\122\1\340\13\122\35\0\6\122"+
    "\1\341\7\122\2\0\7\122\1\0\1\122\4\0\1\122"+
    "\1\342\6\122\1\343\4\122\1\344\2\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\5\122\1\345\4\122"+
    "\1\346\1\122\1\347\1\350\1\122\1\351\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\6\122\1\352\6\122"+
    "\1\353\2\122\35\0\14\122\1\354\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\14\122\1\355\1\122"+
    "\2\0\7\122\1\0\1\122\4\0\1\122\1\356\10\122"+
    "\1\357\5\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\10\122\1\360\7\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\15\122\1\361\2\122\35\0\1\362"+
    "\1\0\14\362\2\0\1\362\1\0\2\362\1\0\2\362"+
    "\1\0\1\362\4\0\20\362\23\0\5\147\1\363\104\0"+
    "\3\147\1\0\1\147\113\0\1\364\1\365\102\0\3\16"+
    "\1\0\1\16\106\0\1\17\107\0\2\160\2\0\106\160"+
    "\10\366\1\367\101\366\72\0\1\370\17\0\2\166\2\0"+
    "\106\166\72\0\1\371\33\0\1\372\14\0\2\373\1\0"+
    "\1\372\2\0\1\372\66\0\1\27\16\0\1\176\1\27"+
    "\2\0\1\27\66\0\1\374\17\0\1\374\2\0\1\374"+
    "\65\0\16\26\2\0\7\26\1\0\2\26\3\0\10\26"+
    "\1\375\7\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\11\26\1\376\6\26\35\0\6\26\1\377\7\26"+
    "\2\0\7\26\1\0\2\26\3\0\20\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\6\26\1\u0100\11\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\11\26"+
    "\1\u0101\6\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\1\u0102\17\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\4\26\1\u0103\1\u0104\12\26\35\0\4\26"+
    "\1\u0105\11\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\12\26"+
    "\1\u0106\5\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\4\26\1\u0107\13\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\5\26\1\u0108\12\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\12\26\1\u0109\5\26"+
    "\56\0\1\u010a\2\0\1\u010a\65\0\2\u010b\2\0\2\u010b"+
    "\4\0\4\u010b\3\0\4\u010b\11\0\2\u010b\52\0\14\26"+
    "\1\u010c\1\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\10\26"+
    "\1\u010d\7\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\5\26\1\u010e\12\26\64\0\1\u010f\36\0\1\u0110"+
    "\10\0\2\232\2\0\2\232\1\233\36\232\1\u0111\50\232"+
    "\2\u0112\1\u0113\103\232\45\0\1\u0114\44\0\2\235\2\0"+
    "\2\235\1\236\35\235\1\0\1\235\1\u0115\47\235\2\u0116"+
    "\1\u0117\103\235\46\0\1\u0118\56\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\2\26\1\u0119\15\26\35\0\10\26"+
    "\1\u011a\5\26\2\0\7\26\1\0\2\26\3\0\10\26"+
    "\1\u011b\7\26\35\0\16\26\2\0\2\26\1\u011c\4\26"+
    "\1\0\2\26\3\0\20\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\4\26\1\u011d\13\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\4\26\1\u011e\13\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\1\26"+
    "\1\u011f\16\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\4\26\1\u0120\1\u0121\12\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\11\26\1\u0122\6\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\1\26\1\u0123"+
    "\16\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\1\26\1\u0124\4\26\1\u0125\11\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\1\u0126\17\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\11\26\1\u0127\6\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\10\26"+
    "\1\u0128\7\26\35\0\10\26\1\u0129\5\26\2\0\7\26"+
    "\1\0\2\26\3\0\20\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\1\26\1\u012a\10\26\1\u012b\1\26"+
    "\1\u012c\3\26\35\0\10\26\1\u012d\5\26\2\0\7\26"+
    "\1\0\2\26\3\0\6\26\1\u012e\11\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\5\26\1\u012f\12\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\17\26"+
    "\1\u0130\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\5\26\1\u0131\12\26\35\0\6\26\1\u0132\7\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\6\26\1\u0133"+
    "\1\26\1\u0134\5\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\10\26\1\u0135\5\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\114\0\1\u0136\10\0\1\u0137\110\0"+
    "\1\u0138\101\0\1\u0139\111\0\1\u013a\7\0\1\u013b\10\0"+
    "\3\104\1\0\1\104\152\0\1\u013c\56\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\10\122\1\u013d\7\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\11\122\1\u013e"+
    "\6\122\35\0\6\122\1\u013f\7\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\6\122\1\u0140\11\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\11\122\1\u0141\6\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\1\u0142\17\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\4\122"+
    "\1\u0143\1\u0144\12\122\35\0\4\122\1\u0145\11\122\2\0"+
    "\7\122\1\0\1\122\4\0\20\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\12\122\1\u0146\5\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\4\122\1\u0147"+
    "\13\122\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\5\122\1\u0148\12\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\12\122\1\u0149\5\122\35\0\14\122\1\u014a"+
    "\1\122\2\0\7\122\1\0\1\122\4\0\20\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\10\122\1\u014b"+
    "\7\122\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\5\122\1\u014c\12\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\2\122\1\u014d\15\122\35\0\10\122\1\u014e"+
    "\5\122\2\0\7\122\1\0\1\122\4\0\10\122\1\u014f"+
    "\7\122\35\0\16\122\2\0\2\122\1\u0150\4\122\1\0"+
    "\1\122\4\0\20\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\4\122\1\u0151\13\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\4\122\1\u0152\13\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\1\122\1\u0153"+
    "\16\122\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\4\122\1\u0154\1\u0155\12\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\11\122\1\u0156\6\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\1\122\1\u0157\16\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\1\122"+
    "\1\u0158\4\122\1\u0159\11\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\1\u015a\17\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\11\122\1\u015b\6\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\10\122\1\u015c"+
    "\7\122\35\0\10\122\1\u015d\5\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\1\122\1\u015e\10\122\1\u015f\1\122\1\u0160"+
    "\3\122\35\0\10\122\1\u0161\5\122\2\0\7\122\1\0"+
    "\1\122\4\0\6\122\1\u0162\11\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\5\122\1\u0163\12\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\17\122\1\u0164"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\5\122"+
    "\1\u0165\12\122\35\0\6\122\1\u0166\7\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\6\122\1\u0167\1\122"+
    "\1\u0168\5\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\10\122\1\u0169\5\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\16\362\2\0\7\362\1\0\1\362"+
    "\4\0\20\362\22\0\2\364\2\0\106\364\10\u016a\1\u016b"+
    "\101\u016a\10\366\1\u016c\101\366\7\u016d\1\u016e\1\367\101\u016d"+
    "\14\0\1\372\2\u016f\2\171\4\0\2\174\4\0\1\373"+
    "\1\372\2\0\1\372\66\0\1\372\17\0\1\372\2\0"+
    "\1\372\66\0\1\374\2\u016f\2\171\4\0\2\174\2\175"+
    "\2\0\1\u0170\1\374\2\0\1\374\65\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\1\26\1\u0171\16\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\1\26\1\u0172"+
    "\16\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\4\26\1\u0173\13\26\35\0\2\26\1\u0174\13\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\6\26\1\u0175"+
    "\7\26\2\0\7\26\1\0\2\26\3\0\10\26\1\u0176"+
    "\7\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\5\26\1\u0177\12\26\35\0\14\26\1\u0178\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\1\26\1\u0179\16\26\35\0"+
    "\16\26\2\0\2\26\1\u017a\4\26\1\0\2\26\3\0"+
    "\20\26\35\0\14\26\1\u017b\1\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\35\0\14\26\1\u017c\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\7\26\1\u017d\10\26\37\0"+
    "\2\170\2\0\2\172\2\173\6\0\1\u017e\1\u010a\2\0"+
    "\1\u010a\65\0\2\u010b\2\170\2\u010b\2\172\2\173\4\u010b"+
    "\2\0\1\u017f\4\u010b\11\0\2\u010b\52\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\1\26\1\u0180\16\26\35\0"+
    "\6\26\1\u0181\7\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\14\26\1\u0182\1\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\22\0\4\232\2\u0112\1\u0183\36\232"+
    "\1\u0111\45\232\1\u0112\1\u0184\1\u0185\1\232\1\u0112\1\233"+
    "\36\232\1\u0111\44\232\6\u0114\1\u0186\36\u0114\1\u0187\44\u0114"+
    "\4\235\2\u0116\1\u0188\35\235\1\0\1\235\1\u0115\44\235"+
    "\1\u0116\1\u0189\1\u018a\1\235\1\u0116\1\236\35\235\1\0"+
    "\1\235\1\u0115\43\235\6\u018b\1\u018c\35\u018b\1\0\1\u018b"+
    "\1\u018d\43\u018b\13\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\3\26\1\u018e\14\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\13\26\1\u018f\4\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\5\26\1\u0190\12\26"+
    "\35\0\6\26\1\u0191\7\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\5\26\1\u0192\12\26\35\0\14\26\1\u0193\1\26"+
    "\2\0\7\26\1\0\2\26\3\0\20\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\4\26\1\u0194\13\26"+
    "\35\0\14\26\1\u0195\1\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\2\26\1\u0196\15\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\5\26\1\u0197\12\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\6\26\1\u0198\11\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\5\26"+
    "\1\u0199\12\26\35\0\10\26\1\u019a\5\26\2\0\7\26"+
    "\1\0\2\26\3\0\20\26\35\0\14\26\1\u019b\1\26"+
    "\2\0\7\26\1\0\2\26\3\0\20\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\2\26\1\u019c\15\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\6\26"+
    "\1\u019d\11\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\5\26\1\u019e\12\26\35\0\10\26\1\u019f\5\26"+
    "\2\0\7\26\1\0\2\26\3\0\11\26\1\u01a0\6\26"+
    "\35\0\14\26\1\u01a1\1\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\4\26\1\u01a2\13\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\10\26\1\u01a3\7\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\12\26\1\u01a4\5\26"+
    "\35\0\10\26\1\u01a5\5\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\6\26\1\u01a6\7\26\2\0\7\26"+
    "\1\0\2\26\3\0\20\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\1\26\1\u01a7\16\26\35\0\12\26"+
    "\1\u01a8\3\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\35\0\6\26\1\u01a9\7\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\114\0\1\u01aa\32\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\1\122\1\u01ab\16\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\1\122\1\u01ac\16\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\4\122"+
    "\1\u01ad\13\122\35\0\2\122\1\u01ae\13\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\6\122\1\u01af\7\122"+
    "\2\0\7\122\1\0\1\122\4\0\10\122\1\u01b0\7\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\5\122"+
    "\1\u01b1\12\122\35\0\14\122\1\u01b2\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\1\122\1\u01b3\16\122\35\0\16\122"+
    "\2\0\2\122\1\u01b4\4\122\1\0\1\122\4\0\20\122"+
    "\35\0\14\122\1\u01b5\1\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\14\122\1\u01b6\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\7\122\1\u01b7\10\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\1\122\1\u01b8\16\122"+
    "\35\0\6\122\1\u01b9\7\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\14\122\1\u01ba\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\3\122\1\u01bb\14\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\13\122\1\u01bc\4\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\5\122"+
    "\1\u01bd\12\122\35\0\6\122\1\u01be\7\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\5\122\1\u01bf\12\122\35\0\14\122"+
    "\1\u01c0\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\4\122"+
    "\1\u01c1\13\122\35\0\14\122\1\u01c2\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\2\122\1\u01c3\15\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\5\122\1\u01c4\12\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\6\122"+
    "\1\u01c5\11\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\5\122\1\u01c6\12\122\35\0\10\122\1\u01c7\5\122"+
    "\2\0\7\122\1\0\1\122\4\0\20\122\35\0\14\122"+
    "\1\u01c8\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\2\122"+
    "\1\u01c9\15\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\6\122\1\u01ca\11\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\5\122\1\u01cb\12\122\35\0\10\122"+
    "\1\u01cc\5\122\2\0\7\122\1\0\1\122\4\0\11\122"+
    "\1\u01cd\6\122\35\0\14\122\1\u01ce\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\4\122\1\u01cf\13\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\10\122\1\u01d0\7\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\12\122"+
    "\1\u01d1\5\122\35\0\10\122\1\u01d2\5\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\6\122\1\u01d3\7\122"+
    "\2\0\7\122\1\0\1\122\4\0\20\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\1\122\1\u01d4\16\122"+
    "\35\0\12\122\1\u01d5\3\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\6\122\1\u01d6\7\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\22\0\10\u016a\1\u01d7\101\u016a"+
    "\7\u01d8\1\u01d9\1\u016b\101\u01d8\7\366\1\u01da\1\u01db\101\366"+
    "\10\u016d\1\u01dc\101\u016d\14\0\1\374\16\0\1\u0170\1\374"+
    "\2\0\1\374\65\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\5\26\1\u01dd\12\26\35\0\6\26\1\u01de\7\26"+
    "\2\0\7\26\1\0\2\26\3\0\20\26\35\0\14\26"+
    "\1\u01df\1\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\35\0\14\26\1\u01e0\1\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\6\26\1\u01e1\11\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\1\26\1\u01e2\16\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\6\26\1\u01e3\11\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\12\26"+
    "\1\u01e4\5\26\35\0\6\26\1\u01e5\7\26\2\0\7\26"+
    "\1\0\2\26\3\0\20\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\11\26\1\u01e6\6\26\55\0\1\u017e"+
    "\1\u010a\2\0\1\u010a\65\0\2\u010b\2\0\2\u010b\4\0"+
    "\4\u010b\2\0\1\u017f\4\u010b\11\0\2\u010b\52\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\3\26\1\u01e7\14\26"+
    "\35\0\14\26\1\u01e8\1\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\22\0\1\232\2\u0112\1\u01e9\2\u0112\1\u0113"+
    "\103\232\2\0\2\232\2\u0184\1\u01ea\105\0\1\u0112\1\232"+
    "\2\u0184\1\u01ea\103\0\157\u0114\1\u01eb\44\u0114\1\235\2\u0116"+
    "\1\u01ec\2\u0116\1\u0117\103\235\2\0\2\235\2\u0189\1\u01ed"+
    "\105\0\1\u0116\1\235\2\u0189\1\u01ed\103\0\120\u018b\1\0"+
    "\35\u018b\1\0\1\u018b\1\u01ee\43\u018b\13\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\1\26\1\u01ef\16\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\1\26\1\u01f0"+
    "\16\26\35\0\14\26\1\u01f1\1\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\35\0\10\26\1\u01f2\5\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\6\26\1\u01f3\11\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\6\26\1\u01f4"+
    "\11\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\4\26\1\u01f5\13\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\15\26\1\u01f6\2\26\35\0\10\26\1\u01f7"+
    "\5\26\2\0\7\26\1\0\2\26\3\0\20\26\35\0"+
    "\10\26\1\u01f8\5\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\2\26\1\u01f9\15\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\6\26\1\u01fa\11\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\15\26\1\u01fb\2\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\5\26\1\u01fc"+
    "\12\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\2\26\1\u01fd\15\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\5\26\1\u01fe\12\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\4\26\1\u01ff\13\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\17\26\1\u0200"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\6\26"+
    "\1\u0201\11\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\13\26\1\u0202\4\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\5\26\1\u0203\12\26\35\0\14\26"+
    "\1\u0204\1\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\5\122"+
    "\1\u0205\12\122\35\0\6\122\1\u0206\7\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\14\122\1\u0207\1\122"+
    "\2\0\7\122\1\0\1\122\4\0\20\122\35\0\14\122"+
    "\1\u0208\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\6\122"+
    "\1\u0209\11\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\1\122\1\u020a\16\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\6\122\1\u020b\11\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\12\122\1\u020c\5\122"+
    "\35\0\6\122\1\u020d\7\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\11\122\1\u020e\6\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\3\122\1\u020f\14\122\35\0\14\122"+
    "\1\u0210\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\1\122"+
    "\1\u0211\16\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\1\122\1\u0212\16\122\35\0\14\122\1\u0213\1\122"+
    "\2\0\7\122\1\0\1\122\4\0\20\122\35\0\10\122"+
    "\1\u0214\5\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\6\122"+
    "\1\u0215\11\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\6\122\1\u0216\11\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\4\122\1\u0217\13\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\15\122\1\u0218\2\122"+
    "\35\0\10\122\1\u0219\5\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\10\122\1\u021a\5\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\2\122\1\u021b\15\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\6\122\1\u021c\11\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\15\122"+
    "\1\u021d\2\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\5\122\1\u021e\12\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\2\122\1\u021f\15\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\5\122\1\u0220\12\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\4\122"+
    "\1\u0221\13\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\17\122\1\u0222\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\6\122\1\u0223\11\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\13\122\1\u0224\4\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\5\122\1\u0225"+
    "\12\122\35\0\14\122\1\u0226\1\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\22\0\7\u016a\1\u0227\1\u0228\101\u016a"+
    "\10\u01d8\1\u0229\101\u01d8\7\u016d\1\u016e\1\u022a\101\u016d\13\0"+
    "\6\26\1\u022b\7\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\7\26\1\u022c\10\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\5\26\1\u022d\12\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\11\26\1\u022e\6\26\35\0"+
    "\4\26\1\u022f\11\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\6\26\1\u0230\7\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\35\0\14\26\1\u0231\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\12\26\1\u0232"+
    "\3\26\2\0\7\26\1\0\2\26\3\0\20\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\1\26\1\u0233"+
    "\16\26\22\0\2\232\1\u0112\1\232\2\u0112\1\u0183\36\232"+
    "\1\u0111\44\232\1\0\2\u0184\1\u0185\1\0\1\u0184\104\0"+
    "\45\u0114\1\u0111\44\u0114\2\235\1\u0116\1\235\2\u0116\1\u0188"+
    "\35\235\1\0\1\235\1\u0115\43\235\1\0\2\u0189\1\u018a"+
    "\1\0\1\u0189\104\0\6\u018b\1\0\35\u018b\1\0\1\u018b"+
    "\1\u0115\43\u018b\13\0\2\26\1\u0234\13\26\2\0\7\26"+
    "\1\0\2\26\3\0\20\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\5\26\1\u0235\12\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\2\26\1\u0236\15\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\2\26"+
    "\1\u0237\15\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\1\26\1\u0238\16\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\5\26\1\u0239\12\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\11\26\1\u023a\6\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\2\26"+
    "\1\u023b\15\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\5\26\1\u023c\12\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\6\26\1\u023d\11\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\15\26\1\u023e\2\26"+
    "\35\0\10\26\1\u023f\5\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\16\26\2\0\7\26\1\0\2\26"+
    "\3\0\4\26\1\u0240\13\26\35\0\16\26\2\0\7\26"+
    "\1\0\2\26\3\0\11\26\1\u0241\6\26\35\0\14\26"+
    "\1\u0242\1\26\2\0\7\26\1\0\2\26\3\0\20\26"+
    "\35\0\10\26\1\u0243\5\26\2\0\7\26\1\0\2\26"+
    "\3\0\20\26\35\0\6\122\1\u0244\7\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\7\122\1\u0245\10\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\5\122\1\u0246\12\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\11\122"+
    "\1\u0247\6\122\35\0\4\122\1\u0248\11\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\6\122\1\u0249\7\122"+
    "\2\0\7\122\1\0\1\122\4\0\20\122\35\0\14\122"+
    "\1\u024a\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\12\122\1\u024b\3\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\1\122\1\u024c\16\122\35\0\2\122\1\u024d\13\122"+
    "\2\0\7\122\1\0\1\122\4\0\20\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\5\122\1\u024e\12\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\2\122"+
    "\1\u024f\15\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\2\122\1\u0250\15\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\1\122\1\u0251\16\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\5\122\1\u0252\12\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\11\122"+
    "\1\u0253\6\122\35\0\16\122\2\0\7\122\1\0\1\122"+
    "\4\0\2\122\1\u0254\15\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\5\122\1\u0255\12\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\6\122\1\u0256\11\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\15\122"+
    "\1\u0257\2\122\35\0\10\122\1\u0258\5\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\4\122\1\u0259\13\122\35\0\16\122"+
    "\2\0\7\122\1\0\1\122\4\0\11\122\1\u025a\6\122"+
    "\35\0\14\122\1\u025b\1\122\2\0\7\122\1\0\1\122"+
    "\4\0\20\122\35\0\10\122\1\u025c\5\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\22\0\7\u01d8\1\u01d9\1\u025d"+
    "\101\u01d8\13\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\14\26\1\u025e\3\26\35\0\14\26\1\u025f\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\2\26\1\u0260\15\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\1\26\1\u0261"+
    "\16\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\5\26\1\u0262\12\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\4\26\1\u0263\13\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\11\26\1\u0264\6\26\35\0"+
    "\14\26\1\u0265\1\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\14\26\1\u0266\1\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\5\26\1\u0267\12\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\2\26\1\u0268\15\26\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\12\26\1\u0269"+
    "\5\26\35\0\4\26\1\u026a\11\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\10\26\1\u026b\7\26\35\0\14\26\1\u026c"+
    "\1\26\2\0\7\26\1\0\2\26\3\0\20\26\35\0"+
    "\6\26\1\u026d\7\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\14\122\1\u026e\3\122\35\0\14\122\1\u026f\1\122\2\0"+
    "\7\122\1\0\1\122\4\0\20\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\2\122\1\u0270\15\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\1\122\1\u0271"+
    "\16\122\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\5\122\1\u0272\12\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\4\122\1\u0273\13\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\11\122\1\u0274\6\122\35\0"+
    "\14\122\1\u0275\1\122\2\0\7\122\1\0\1\122\4\0"+
    "\20\122\35\0\14\122\1\u0276\1\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\5\122\1\u0277\12\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\2\122\1\u0278\15\122\35\0"+
    "\16\122\2\0\7\122\1\0\1\122\4\0\12\122\1\u0279"+
    "\5\122\35\0\4\122\1\u027a\11\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\10\122\1\u027b\7\122\35\0\14\122\1\u027c"+
    "\1\122\2\0\7\122\1\0\1\122\4\0\20\122\35\0"+
    "\6\122\1\u027d\7\122\2\0\7\122\1\0\1\122\4\0"+
    "\20\122\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\11\26\1\u027e\6\26\35\0\14\26\1\u027f\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\2\26\1\u0280\15\26\35\0"+
    "\14\26\1\u0281\1\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\5\26\1\u0282\12\26\35\0\14\26\1\u0283\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\16\26\2\0"+
    "\7\26\1\0\2\26\3\0\1\u0284\17\26\35\0\16\26"+
    "\2\0\7\26\1\0\2\26\3\0\11\26\1\u0285\6\26"+
    "\35\0\16\26\2\0\7\26\1\0\2\26\3\0\11\26"+
    "\1\u0286\6\26\35\0\14\26\1\u0287\1\26\2\0\7\26"+
    "\1\0\2\26\3\0\20\26\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\11\122\1\u0288\6\122\35\0\14\122"+
    "\1\u0289\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\2\122"+
    "\1\u028a\15\122\35\0\14\122\1\u028b\1\122\2\0\7\122"+
    "\1\0\1\122\4\0\20\122\35\0\16\122\2\0\7\122"+
    "\1\0\1\122\4\0\5\122\1\u028c\12\122\35\0\14\122"+
    "\1\u028d\1\122\2\0\7\122\1\0\1\122\4\0\20\122"+
    "\35\0\16\122\2\0\7\122\1\0\1\122\4\0\1\u028e"+
    "\17\122\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\11\122\1\u028f\6\122\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\11\122\1\u0290\6\122\35\0\14\122\1\u0291"+
    "\1\122\2\0\7\122\1\0\1\122\4\0\20\122\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\5\26\1\u0292"+
    "\12\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\10\26\1\u0293\7\26\35\0\14\26\1\u0294\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\12\26\1\u0295"+
    "\3\26\2\0\7\26\1\0\2\26\3\0\20\26\35\0"+
    "\10\26\1\u0296\5\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\16\26\2\0\7\26\1\0\2\26\3\0"+
    "\5\26\1\u0297\12\26\35\0\16\122\2\0\7\122\1\0"+
    "\1\122\4\0\5\122\1\u0298\12\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\10\122\1\u0299\7\122\35\0"+
    "\14\122\1\u029a\1\122\2\0\7\122\1\0\1\122\4\0"+
    "\20\122\35\0\12\122\1\u029b\3\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\35\0\10\122\1\u029c\5\122\2\0"+
    "\7\122\1\0\1\122\4\0\20\122\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\5\122\1\u029d\12\122\35\0"+
    "\16\26\2\0\7\26\1\0\2\26\3\0\4\26\1\u029e"+
    "\13\26\35\0\4\26\1\u029f\11\26\2\0\7\26\1\0"+
    "\2\26\3\0\20\26\35\0\16\26\2\0\7\26\1\0"+
    "\2\26\3\0\16\26\1\u02a0\1\26\35\0\16\122\2\0"+
    "\7\122\1\0\1\122\4\0\4\122\1\u02a1\13\122\35\0"+
    "\4\122\1\u02a2\11\122\2\0\7\122\1\0\1\122\4\0"+
    "\20\122\35\0\16\122\2\0\7\122\1\0\1\122\4\0"+
    "\16\122\1\u02a3\1\122\35\0\14\26\1\u02a4\1\26\2\0"+
    "\7\26\1\0\2\26\3\0\20\26\35\0\14\122\1\u02a5"+
    "\1\122\2\0\7\122\1\0\1\122\4\0\20\122\35\0"+
    "\12\26\1\u02a6\3\26\2\0\7\26\1\0\2\26\3\0"+
    "\20\26\35\0\12\122\1\u02a7\3\122\2\0\7\122\1\0"+
    "\1\122\4\0\20\122\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37148];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\1\1\1\11\25\1\1\11\11\1\1\11"+
    "\2\1\6\11\2\1\1\11\4\1\3\11\4\1\2\11"+
    "\4\1\1\11\4\1\1\11\20\1\2\11\1\1\2\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\0\3\1\1\11"+
    "\1\1\2\11\2\1\5\11\3\0\15\1\5\11\2\0"+
    "\4\1\2\11\1\1\1\0\1\1\2\0\27\1\2\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\0\6\11\1\0"+
    "\1\11\1\1\5\11\47\1\1\0\4\1\2\11\1\1"+
    "\1\0\23\1\3\11\3\1\1\11\2\0\36\1\5\11"+
    "\1\0\1\11\61\1\2\11\1\0\15\1\2\0\3\1"+
    "\3\0\2\1\6\0\34\1\1\11\56\1\2\11\1\0"+
    "\16\1\1\0\1\1\3\0\70\1\1\11\1\0\1\1"+
    "\1\0\62\1\1\0\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[679];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  protected int getInitialState() {
    return YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    resetState();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return mWRONG;
            }
          case 156: break;
          case 2: 
            { yybeginstate(NLS_AFTER_NLS);
                                            return isWithinBraces() ? TokenType.WHITE_SPACE : storeToken(mNLS);
            }
          case 157: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 158: break;
          case 4: 
            { if (isRegexExpected()) {
                                               yybeginstate(IN_SLASHY_STRING);
                                               return storeToken(mREGEX_BEGIN);
                                            } else {
                                               return storeToken(mDIV);
                                            }
            }
          case 159: break;
          case 5: 
            { return storeToken(mSTAR);
            }
          case 160: break;
          case 6: 
            { return storeToken(mLNOT);
            }
          case 161: break;
          case 7: 
            { return storeToken(mIDENT);
            }
          case 162: break;
          case 8: 
            { return storeToken(mNUM_INT);
            }
          case 163: break;
          case 9: 
            { return storeToken(mPLUS);
            }
          case 164: break;
          case 10: 
            { return storeToken(mMINUS);
            }
          case 165: break;
          case 11: 
            { return storeToken(mDOT);
            }
          case 166: break;
          case 12: 
            { return storeToken(mSTRING_LITERAL);
            }
          case 167: break;
          case 13: 
            { yybeginstate(IN_SINGLE_GSTRING);
                                            return storeToken(mGSTRING_BEGIN);
            }
          case 168: break;
          case 14: 
            { yyendstate(YYINITIAL);
    return storeToken(mRCURLY);
            }
          case 169: break;
          case 15: 
            { yybeginstate(YYINITIAL, NLS_AFTER_LBRACE);
                                            return storeToken(mLCURLY);
            }
          case 170: break;
          case 16: 
            { return storeToken(mQUESTION);
            }
          case 171: break;
          case 17: 
            { return storeToken(mASSIGN);
            }
          case 172: break;
          case 18: 
            { return storeToken(mLPAREN);
            }
          case 173: break;
          case 19: 
            { return storeToken(mRPAREN);
            }
          case 174: break;
          case 20: 
            { return storeToken(mLBRACK);
            }
          case 175: break;
          case 21: 
            { return storeToken(mRBRACK);
            }
          case 176: break;
          case 22: 
            { return storeToken(mCOLON);
            }
          case 177: break;
          case 23: 
            { return storeToken(mCOMMA);
            }
          case 178: break;
          case 24: 
            { return storeToken(mLT);
            }
          case 179: break;
          case 25: 
            { return storeToken(mGT);
            }
          case 180: break;
          case 26: 
            { return storeToken(mBNOT);
            }
          case 181: break;
          case 27: 
            { return storeToken(mMOD);
            }
          case 182: break;
          case 28: 
            { return storeToken(mBXOR);
            }
          case 183: break;
          case 29: 
            { return storeToken(mBOR);
            }
          case 184: break;
          case 30: 
            { return storeToken(mBAND);
            }
          case 185: break;
          case 31: 
            { return storeToken(mSEMI);
            }
          case 186: break;
          case 32: 
            { return storeToken(mAT);
            }
          case 187: break;
          case 33: 
            { yyendstate(IN_INNER_BLOCK, IN_GSTRING_DOLLAR);
    return storeToken(mRCURLY);
            }
          case 188: break;
          case 34: 
            { return storeToken(mGSTRING_CONTENT);
            }
          case 189: break;
          case 35: 
            { resetState();
    yybeginstate(NLS_AFTER_NLS);
    return storeToken(mNLS);
            }
          case 190: break;
          case 36: 
            { yybeginstate(IN_GSTRING_DOLLAR);
    return storeToken(mDOLLAR);
            }
          case 191: break;
          case 37: 
            { yyendstate(IN_SINGLE_GSTRING);
    return storeToken(mGSTRING_END);
            }
          case 192: break;
          case 38: 
            { return storeToken(mREGEX_CONTENT);
            }
          case 193: break;
          case 39: 
            { yyendstate(IN_SLASHY_STRING);
    return storeToken(mREGEX_END);
            }
          case 194: break;
          case 40: 
            { return storeToken(mDOLLAR_SLASH_REGEX_CONTENT);
            }
          case 195: break;
          case 41: 
            { yypushback(1);
    yyendstate(IN_GSTRING_DOLLAR);
            }
          case 196: break;
          case 42: 
            { yybeginstate(IN_GSTRING_DOT);
    return storeToken(mIDENT);
            }
          case 197: break;
          case 43: 
            { yybeginstate(IN_INNER_BLOCK, NLS_AFTER_LBRACE);
    return storeToken(mLCURLY);
            }
          case 198: break;
          case 44: 
            { yypushback(1);
    yyendstate(IN_GSTRING_DOT);
            }
          case 199: break;
          case 45: 
            { yypushback(1);
    yyendstate(IN_GSTRING_DOT_IDENT);
            }
          case 200: break;
          case 46: 
            { yypushback(1);
    yyendstate(NLS_AFTER_COMMENT);
            }
          case 201: break;
          case 47: 
            { yypushback(1);
    yyendstate(NLS_AFTER_LBRACE);
            }
          case 202: break;
          case 48: 
            { yypushback(1);
    yyendstate(NLS_AFTER_NLS);
    yybeginstate(NLS_AFTER_COMMENT);
            }
          case 203: break;
          case 49: 
            { return storeToken(mSL_COMMENT);
            }
          case 204: break;
          case 50: 
            { return storeToken(mML_COMMENT);
            }
          case 205: break;
          case 51: 
            { return storeToken(mDIV_ASSIGN);
            }
          case 206: break;
          case 52: 
            { return storeToken(mSTAR_STAR);
            }
          case 207: break;
          case 53: 
            { return storeToken(mSPREAD_DOT);
            }
          case 208: break;
          case 54: 
            { return storeToken(mSTAR_ASSIGN);
            }
          case 209: break;
          case 55: 
            { return storeToken(mSH_COMMENT);
            }
          case 210: break;
          case 56: 
            { return storeToken(mNOT_EQUAL);
            }
          case 211: break;
          case 57: 
            { return storeToken(mNUM_BIG_INT);
            }
          case 212: break;
          case 58: 
            { return storeToken(mNUM_FLOAT);
            }
          case 213: break;
          case 59: 
            { return storeToken(mNUM_LONG);
            }
          case 214: break;
          case 60: 
            { return storeToken(mNUM_DOUBLE);
            }
          case 215: break;
          case 61: 
            { return storeToken(kIF);
            }
          case 216: break;
          case 62: 
            { return storeToken(kIN);
            }
          case 217: break;
          case 63: 
            { return storeToken(kDO);
            }
          case 218: break;
          case 64: 
            { return storeToken(mINC);
            }
          case 219: break;
          case 65: 
            { return storeToken(mPLUS_ASSIGN);
            }
          case 220: break;
          case 66: 
            { return storeToken(mDEC);
            }
          case 221: break;
          case 67: 
            { return storeToken(mMINUS_ASSIGN);
            }
          case 222: break;
          case 68: 
            { return storeToken(mCLOSABLE_BLOCK_OP);
            }
          case 223: break;
          case 69: 
            { return storeToken(mRANGE_INCLUSIVE);
            }
          case 224: break;
          case 70: 
            { return storeToken(mMEMBER_POINTER);
            }
          case 225: break;
          case 71: 
            { if (isRegexExpected()) {
                                              yybeginstate(IN_DOLLAR_SLASH_STRING);
                                              return storeToken(mDOLLAR_SLASH_REGEX_BEGIN);
                                            } else {
                                              yypushback(1);
                                              return storeToken(mDOLLAR);
                                            }
            }
          case 226: break;
          case 72: 
            { return storeToken(mGSTRING_LITERAL);
            }
          case 227: break;
          case 73: 
            { return storeToken(kAS);
            }
          case 228: break;
          case 74: 
            { return storeToken(mOPTIONAL_DOT);
            }
          case 229: break;
          case 75: 
            { return storeToken(mELVIS);
            }
          case 230: break;
          case 76: 
            { return storeToken(mEQUAL);
            }
          case 231: break;
          case 77: 
            { return storeToken(mREGEX_FIND);
            }
          case 232: break;
          case 78: 
            { return storeToken(mLE);
            }
          case 233: break;
          case 79: 
            { return storeToken(mGE);
            }
          case 234: break;
          case 80: 
            { return storeToken(mMOD_ASSIGN);
            }
          case 235: break;
          case 81: 
            { return storeToken(mBXOR_ASSIGN);
            }
          case 236: break;
          case 82: 
            { return storeToken(mBOR_ASSIGN);
            }
          case 237: break;
          case 83: 
            { return storeToken(mLOR);
            }
          case 238: break;
          case 84: 
            { return storeToken(mBAND_ASSIGN);
            }
          case 239: break;
          case 85: 
            { return storeToken(mLAND);
            }
          case 240: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return storeToken(mREGEX_CONTENT);
            }
          case 241: break;
          case 87: 
            { yyendstate(IN_DOLLAR_SLASH_STRING);
    return storeToken(mDOLLAR_SLASH_REGEX_END);
            }
          case 242: break;
          case 88: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return storeToken(mDOLLAR_SLASH_REGEX_CONTENT);
            }
          case 243: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybeginstate(IN_GSTRING_DOT_IDENT);
    return storeToken(mDOT);
            }
          case 244: break;
          case 90: 
            { return mSL_COMMENT;
            }
          case 245: break;
          case 91: 
            { return mML_COMMENT;
            }
          case 246: break;
          case 92: 
            { return storeToken(GROOVY_DOC_COMMENT);
            }
          case 247: break;
          case 93: 
            { return storeToken(mSTAR_STAR_ASSIGN);
            }
          case 248: break;
          case 94: 
            { return storeToken(mNUM_BIG_DECIMAL);
            }
          case 249: break;
          case 95: 
            { return storeToken(kFOR);
            }
          case 250: break;
          case 96: 
            { return storeToken(kINT);
            }
          case 251: break;
          case 97: 
            { return storeToken(kDEF);
            }
          case 252: break;
          case 98: 
            { return storeToken(mTRIPLE_DOT);
            }
          case 253: break;
          case 99: 
            { return storeToken(mRANGE_EXCLUSIVE);
            }
          case 254: break;
          case 100: 
            { yybeginstate(IN_TRIPLE_GSTRING);
                                            return storeToken(mGSTRING_BEGIN);
            }
          case 255: break;
          case 101: 
            { return storeToken(kTRY);
            }
          case 256: break;
          case 102: 
            { return storeToken(kNEW);
            }
          case 257: break;
          case 103: 
            { return storeToken(mREGEX_MATCH);
            }
          case 258: break;
          case 104: 
            { return storeToken(mCOMPARE_TO);
            }
          case 259: break;
          case 105: 
            { return storeToken(mSL_ASSIGN);
            }
          case 260: break;
          case 106: 
            { return storeToken(mSR_ASSIGN);
            }
          case 261: break;
          case 107: 
            { yyendstate(IN_TRIPLE_GSTRING);
    return storeToken(mGSTRING_END);
            }
          case 262: break;
          case 108: 
            { return GROOVY_DOC_COMMENT;
            }
          case 263: break;
          case 109: 
            { return storeToken(kLONG);
            }
          case 264: break;
          case 110: 
            { return storeToken(kELSE);
            }
          case 265: break;
          case 111: 
            { return storeToken(kENUM);
            }
          case 266: break;
          case 112: 
            { return storeToken(kBYTE);
            }
          case 267: break;
          case 113: 
            { return storeToken(kCASE);
            }
          case 268: break;
          case 114: 
            { return storeToken(kCHAR);
            }
          case 269: break;
          case 115: 
            { return storeToken(kTRUE);
            }
          case 270: break;
          case 116: 
            { return storeToken(kTHIS);
            }
          case 271: break;
          case 117: 
            { return storeToken(kNULL);
            }
          case 272: break;
          case 118: 
            { return storeToken(kVOID);
            }
          case 273: break;
          case 119: 
            { return storeToken(mBSR_ASSIGN);
            }
          case 274: break;
          case 120: 
            { return storeToken(kFLOAT);
            }
          case 275: break;
          case 121: 
            { return storeToken(kFINAL);
            }
          case 276: break;
          case 122: 
            { return storeToken(kFALSE);
            }
          case 277: break;
          case 123: 
            { return storeToken(kBREAK);
            }
          case 278: break;
          case 124: 
            { return storeToken(kCLASS);
            }
          case 279: break;
          case 125: 
            { return storeToken(kCATCH);
            }
          case 280: break;
          case 126: 
            { return storeToken(kSUPER);
            }
          case 281: break;
          case 127: 
            { return storeToken(kSHORT);
            }
          case 282: break;
          case 128: 
            { return storeToken(kTRAIT);
            }
          case 283: break;
          case 129: 
            { return storeToken(kTHROW);
            }
          case 284: break;
          case 130: 
            { return storeToken(kWHILE);
            }
          case 285: break;
          case 131: 
            { return storeToken(kIMPORT);
            }
          case 286: break;
          case 132: 
            { return storeToken(kDOUBLE);
            }
          case 287: break;
          case 133: 
            { return storeToken(kPUBLIC);
            }
          case 288: break;
          case 134: 
            { return storeToken(kASSERT);
            }
          case 289: break;
          case 135: 
            { return storeToken(kSTATIC);
            }
          case 290: break;
          case 136: 
            { return storeToken(kSWITCH);
            }
          case 291: break;
          case 137: 
            { return storeToken(kTHROWS);
            }
          case 292: break;
          case 138: 
            { return storeToken(kRETURN);
            }
          case 293: break;
          case 139: 
            { return storeToken(kNATIVE);
            }
          case 294: break;
          case 140: 
            { return storeToken(kFINALLY);
            }
          case 295: break;
          case 141: 
            { return storeToken(kDEFAULT);
            }
          case 296: break;
          case 142: 
            { return storeToken(kEXTENDS);
            }
          case 297: break;
          case 143: 
            { return storeToken(kBOOLEAN);
            }
          case 298: break;
          case 144: 
            { return storeToken(kPACKAGE);
            }
          case 299: break;
          case 145: 
            { return storeToken(kPRIVATE);
            }
          case 300: break;
          case 146: 
            { return storeToken(kABSTRACT);
            }
          case 301: break;
          case 147: 
            { return storeToken(kCONTINUE);
            }
          case 302: break;
          case 148: 
            { return storeToken(kSTRICTFP);
            }
          case 303: break;
          case 149: 
            { return storeToken(kVOLATILE);
            }
          case 304: break;
          case 150: 
            { return storeToken(kINTERFACE);
            }
          case 305: break;
          case 151: 
            { return storeToken(kPROTECTED);
            }
          case 306: break;
          case 152: 
            { return storeToken(kTRANSIENT);
            }
          case 307: break;
          case 153: 
            { return storeToken(kIMPLEMENTS);
            }
          case 308: break;
          case 154: 
            { return storeToken(kINSTANCEOF);
            }
          case 309: break;
          case 155: 
            { return storeToken(kSYNCHRONIZED);
            }
          case 310: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
