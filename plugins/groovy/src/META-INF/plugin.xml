<!--
  ~  Copyright 2000-2007 JetBrains s.r.o.
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~  http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  -->

<idea-plugin url="http://www.jetbrains.net/confluence/display/GRVY/Groovy+Home">
  <id>org.intellij.groovy</id>
  <name>JetGroovy</name>
  <description>Plugin for Groovy language support</description>
  <version>2.0</version>
  <vendor logo="/org/jetbrains/plugins/groovy/images/groovy_16x16.png" url="http://www.jetbrains.com">JetBrains Inc.
  </vendor>
  <idea-version since-build="8823" until-build="8999"/>
  <depends optional="true" config-file="groovy-js-integration.xml">JavaScript</depends>
  <depends>com.intellij.css</depends>

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="com.intellij.diagnostic.ITNReporter"/>
    <fileTypeFactory implementation="org.jetbrains.plugins.groovy.GroovyFileTypeLoader"/>
    <colorSettingsPage implementation="org.jetbrains.plugins.groovy.highlighter.GroovyColorsAndFontsPage"/>
    <frameworkSupport implementation="org.jetbrains.plugins.groovy.config.GroovyFacetSupportProvider"/>
    <renameHandler implementation="org.jetbrains.plugins.groovy.refactoring.rename.PropertyRenameHandler"/>
    <renamePsiElementProcessor implementation="org.jetbrains.plugins.groovy.refactoring.rename.RenameGroovyPropertyProcessor" order="first"/>
    <applicationService serviceInterface="org.jetbrains.plugins.groovy.settings.GroovyApplicationSettings"
                        serviceImplementation="org.jetbrains.plugins.groovy.settings.GroovyApplicationSettings"/>

    <!-- Groovy language -->
    <treeStructureProvider implementation="org.jetbrains.plugins.groovy.projectView.GroovyTreeStructureProvider"/>
    <syntaxHighlighter key="Groovy" implementationClass="org.jetbrains.plugins.groovy.highlighter.GroovySyntaxHighlighter"/>
    <fileEditorProvider implementation="org.jetbrains.plugins.grails.perspectives.DomainClassesRelationsEditorProvider"/>
    <annotator language="Groovy" implementationClass="org.jetbrains.plugins.groovy.annotator.GroovyAnnotator"/>
    <lang.psiStructureViewFactory language="Groovy"
                                  implementationClass="org.jetbrains.plugins.groovy.structure.GroovyStructureViewFactory"/>
    <lang.parserDefinition language="Groovy" implementationClass="org.jetbrains.plugins.groovy.lang.parser.GroovyParserDefinition"/>
    <lang.commenter language="Groovy" implementationClass="org.jetbrains.plugins.groovy.highlighter.GroovyCommenter"/>
    <lang.foldingBuilder language="Groovy" implementationClass="org.jetbrains.plugins.groovy.lang.folding.GroovyFoldingBuilder"/>
    <lang.formatter language="Groovy" implementationClass="org.jetbrains.plugins.groovy.formatter.GroovyFormattingModelBuilder"/>
    <gotoClassContributor implementation="org.jetbrains.plugins.groovy.gotoclass.GroovyGoToClassContributor"/>
    <gotoSymbolContributor implementation="org.jetbrains.plugins.groovy.gotoclass.GroovyGoToSymbolContributor"/>
    <lang.refactoringSupport language="Groovy"
                             implementationClass="org.jetbrains.plugins.groovy.refactoring.GroovyRefactoringSupportProvider"/>
    <lang.surroundDescriptor language="Groovy"
                             implementationClass="org.jetbrains.plugins.groovy.lang.surroundWith.descriptors.GroovyStmtsSurroundDescriptor"/>
    <lang.findUsagesProvider language="Groovy" implementationClass="org.jetbrains.plugins.groovy.findUsages.GroovyFindUsagesProvider"/>
    <lang.braceMatcher language="Groovy" implementationClass="org.jetbrains.plugins.groovy.highlighter.GroovyBraceMatcher"/>
    <lang.importOptimizer language="Groovy" implementationClass="org.jetbrains.plugins.groovy.lang.editor.GroovyImportOptimizer"/>
    <lang.documentationProvider language="Groovy"
                                implementationClass="org.jetbrains.plugins.groovy.lang.documentation.GroovyDocumentationProvider"/>
    <lang.smartEnterProcessor language="Groovy"
                              implementationClass="org.jetbrains.plugins.groovy.lang.completion.smartEnter.GroovySmartEnterProcessor"/>
    <codeInsight.overrideMethod language="Groovy"
                                implementationClass="org.jetbrains.plugins.groovy.overrideImplement.GroovyOverrideMethodsHandler"/>
    <codeInsight.implementMethod language="Groovy"
                                 implementationClass="org.jetbrains.plugins.groovy.overrideImplement.GroovyImplementMethodsHandler"/>
    <codeInsight.parameterInfo language="Groovy"
                               implementationClass="org.jetbrains.plugins.groovy.lang.parameterInfo.GroovyParameterInfoHandler"/>
    <refactoring.inlineHandler language="Groovy" implementationClass="org.jetbrains.plugins.groovy.refactoring.inline.GroovyInlineHandler"/>
    <lookup.charFilter implementation="org.jetbrains.plugins.groovy.lang.completion.GroovyReferenceCharFilter"/>
    <completion.contributor implementation="org.jetbrains.plugins.groovy.lang.completion.GroovyCompetionContributor"/>

    <directClassInheritorsSearch implementation="org.jetbrains.plugins.groovy.lang.psi.impl.GroovyDirectInheritorsSearcher"/>

    <!--Run/debug-->
    <configurationType implementation="org.jetbrains.plugins.groovy.runner.GroovyScriptRunConfigurationType"/>
    <configurationProducer implementation="org.jetbrains.plugins.groovy.runner.GroovyScriptRunConfigurationProducer"/>

    <quoteHandler fileType="Groovy" className="org.jetbrains.plugins.groovy.lang.editor.GroovyQuoteHandler"/>

    <indexPatternBuilder implementation="org.jetbrains.plugins.groovy.util.GroovyIndexPatternBuilder"/>

    <extendWordSelectionHandler implementation="org.jetbrains.plugins.groovy.editor.selection.GroovyLiteralSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.groovy.editor.selection.GroovyBlockStatementsSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.groovy.editor.selection.GroovyTypeCastSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.groovy.editor.selection.GroovyDocParamsSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.groovy.editor.selection.GroovyArgListSelectioner"/>

    <methodReferencesSearch implementation="org.jetbrains.plugins.groovy.findUsages.AccessorReferencesSearcher"/>
    <methodReferencesSearch implementation="org.jetbrains.plugins.groovy.findUsages.MethodLateBoundReferencesSearcher"/>
    <annotatedMembersSearch implementation="org.jetbrains.plugins.groovy.findUsages.AnnotatedMembersSearcher"/>

    <compiler implementation="org.jetbrains.plugins.groovy.compiler.GroovyCompiler"/>

    <facetType implementation="org.jetbrains.plugins.groovy.config.GroovyFacetType"/>

    <fileTemplateGroup implementation="org.jetbrains.plugins.groovy.actions.GroovyTemplatesFactory"/>

    <usageGroupingRuleProvider implementation="org.jetbrains.plugins.groovy.findUsages.GroovyUsageViewGroupingRuleProvider"/>

    <stubElementTypeHolder class="org.jetbrains.plugins.groovy.lang.parser.GroovyElementTypes"/>
    <!--Stubs index-->
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrShortClassNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrFullClassNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrFullScriptNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrFieldNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrMethodNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrAnnotationMethodNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrAnnotatedMemberIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrScriptClassNameIndex"/>
    <stubIndex implementation="org.jetbrains.plugins.groovy.lang.psi.stubs.index.GrDirectInheritorsIndex"/>

    <!--<referencesSearch implementation="org.jetbrains.plugins.groovy.findUsages.ConstructorReferencesSearcher"/>-->
    <!--<referencesSearch implementation="org.jetbrains.plugins.groovy.findUsages.PropertyReferencesSearcher"/>-->
    <!--<referencesSearch implementation="org.jetbrains.plugins.groovy.findUsages.TypeAliasReferenceSearcher"/>-->
    <!--<referencesSearch implementation="org.jetbrains.plugins.groovy.findUsages.LateBoundReferencesSearcher"/>-->

    <!-- Grails and GSP -->
    <frameworkSupport implementation="org.jetbrains.plugins.grails.config.GrailsAdditionalFrameworksProvider"/>
    <syntaxHighlighter key="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.highlighter.GspSyntaxHiglighter"/>
    <annotator language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.annotator.GspAnnotator"/>
    <lang.braceMatcher language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.highlighter.GspPairedBraceMatcher"/>
    <lang.commenter language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.highlighter.GspCommenter"/>
    <lang.foldingBuilder language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.folding.GspFoldingBuilder"/>
    <lang.formatter language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.formatter.GspFormattingModelBuilder"/>
    <lang.parserDefinition language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.parsing.gsp.GspParserDefinition"/>
    <lang.fileViewProviderFactory language="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.GspFileviewProviderFactory"/>

    <codeInsight.parameterInfo language="GSP"
                               implementationClass="org.jetbrains.plugins.groovy.lang.parameterInfo.GroovyParameterInfoHandler"/>

    <quoteHandler fileType="GSP" className="org.jetbrains.plugins.groovy.lang.editor.GroovyQuoteHandler"/>
    <braceMatcher filetype="GSP" implementationClass="org.jetbrains.plugins.grails.lang.gsp.highlighter.GspBraceMatcher"/>

    <iconProvider implementation="org.jetbrains.plugins.groovy.GroovyIconProvider"/>

    <configurationType implementation="org.jetbrains.plugins.grails.runner.GrailsRunConfigurationType"/>

    <facetType implementation="org.jetbrains.plugins.grails.config.GrailsFacetType"/>

    <projectService serviceInterface="org.jetbrains.plugins.groovy.lang.psi.GroovyPsiElementFactory"
                    serviceImplementation="org.jetbrains.plugins.groovy.lang.psi.impl.GroovyPsiElementFactoryImpl"/>
    <projectService serviceInterface="org.jetbrains.plugins.groovy.codeInspection.GroovyImportsTracker"
                    serviceImplementation="org.jetbrains.plugins.groovy.codeInspection.GroovyImportsTracker"/>
    <projectService serviceInterface="org.jetbrains.plugins.grails.lang.gsp.psi.GspPsiElementFactory"
                    serviceImplementation="org.jetbrains.plugins.grails.lang.gsp.psi.GspPsiElementFactoryImpl"/>

    <moduleType id="GRAILS_MODULE" implementationClass="org.jetbrains.plugins.grails.module.GrailsModuleType"/>

    <xml.fileNSInfoProvider implementation="org.jetbrains.plugins.grails.lang.gsp.completion.GspXmlFileNSInfoProvider"/>

    <extendWordSelectionHandler implementation="org.jetbrains.plugins.grails.editor.selection.GrailsTagSelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.grails.editor.selection.GrailsTagBodySelectioner"/>
    <extendWordSelectionHandler implementation="org.jetbrains.plugins.grails.editor.selection.GrailsHtmlTagBodySelectioner"/>

    <!--Gant-->
    <facetType implementation="org.jetbrains.plugins.gant.config.grails.GantGrailsFacetType"/>
    <facetType implementation="org.jetbrains.plugins.gant.config.groovy.GantGroovyFacetType"/>

    <frameworkSupport implementation="org.jetbrains.plugins.gant.config.grails.GantGrailsFacetSupportProvider"/>
    <frameworkSupport implementation="org.jetbrains.plugins.gant.config.groovy.GantGroovyFacetSupportProvider"/>
    <!--Gant filetype-->
    <quoteHandler fileType="Gant" className="org.jetbrains.plugins.groovy.lang.editor.GroovyQuoteHandler"/>
    <!--Gant Run/debug-->
    <configurationType implementation="org.jetbrains.plugins.gant.runner.GantScriptRunConfigurationType"/>
    <configurationProducer implementation="org.jetbrains.plugins.gant.runner.GantScriptRunConfigurationProducer"/>
    <fileTypeFactory implementation="org.jetbrains.plugins.gant.GantFileTypeLoader"/>
    <applicationService serviceInterface="org.jetbrains.plugins.gant.settings.GantApplicationSettings"
                        serviceImplementation="org.jetbrains.plugins.gant.settings.GantApplicationSettings"/>

    <psi.referenceContributor implementation="org.jetbrains.plugins.gant.reference.GantReferenceContirbutor"/>
    <projectService serviceInterface="org.jetbrains.plugins.gant.reference.AntTasksProvider"
                    serviceImplementation="org.jetbrains.plugins.gant.reference.AntTasksProvider"/>


    <!-- control flow -->
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.DemorgansLawIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.MergeIfAndIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.ExpandBooleanIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.FlipConjunctionIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.FlipComparisonIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.NegateComparisonIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.MergeElseIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.SplitElseIfIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.FlipConditionalIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.control.flow</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.control.ConditionalToElvisIntention</className>
    </intentionAction>

    <!-- closures -->
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.closure.MakeClosureCallExplicitIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.closure.MakeClosureCallImplicitIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.closure.ForToEachIntention</className>
    </intentionAction>
    <!--
    todo make this work
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.closures</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.closure.ConvertClosureArgToItIntention</className>
    </intentionAction>
    -->

    <!-- comments -->
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.comments</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.comments.ChangeToCStyleCommentIntention</className>
    </intentionAction>
    <!--
    todo make this work
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.comments</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.comments.ChangeToEndOfLineCommentIntention</className>
    </intentionAction>
    -->

    <!-- conversions -->
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.ConvertIntegerToDecimalIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.ConvertIntegerToHexIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.ConvertIntegerToOctalIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.IndexingMethodConversionIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.IndexedExpressionConversionIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.ConvertStringToGStringIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.ConvertGStringToStringIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.conversions</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.conversions.RemoveParenthesesFromMethodCallIntention</className>
    </intentionAction>

    <!-- groovy style -->
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.style.JavaStylePropertiesInvocationIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>org.jetbrains.plugins.groovy.intentions.GroovyIntentionsBundle</bundleName>
      <categoryKey>intention.category.groovy/intention.category.groovy.style</categoryKey>
      <className>org.jetbrains.plugins.groovy.intentions.style.parameterToEntry.ConvertParameterToMapEntryIntention</className>
    </intentionAction>
  </extensions>

  <extensions defaultExtensionNs="com.intellij.debugger">
    <codeFragmentFactory implementation="org.jetbrains.plugins.groovy.debugger.GroovyCodeFragmentFactory"/>
  </extensions>

  <project-components>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.lang.psi.impl.GroovyPsiManager</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.console.GrailsConsole</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.fileType.GroovyInjector</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.lang.psi.impl.javaView.GroovyClassFinder</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.editor.EditorDecorator</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.codeInspection.local.GroovyUnusedImportsPassFactory
      </implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.references.manager.GrailsImplicitVariableManagerImpl
      </implementation-class>
      <interface-class>org.jetbrains.plugins.grails.references.manager.GrailsImplicitVariableManager</interface-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.GrailsProjectLoader</implementation-class>
    </component>
    <component>
      <interface-class>org.jetbrains.plugins.groovy.annotator.intentions.dynamic.DynamicManager</interface-class>
      <implementation-class>org.jetbrains.plugins.groovy.annotator.intentions.dynamic.DynamicManagerImpl
      </implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.annotator.intentions.dynamic.DynamicToolWindowWrapper
      </implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.codeInspection.local.GroovyAddImportsPassFactory
      </implementation-class>
    </component>
  </project-components>

  <module-components>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.config.GroovyFacetListener</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.module.GrailsModuleEditorsProvider</implementation-class>
      <option name="type" value="GRAILS_MODULE"/>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.GrailsModuleActions</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.config.GrailsFacetListener</implementation-class>
    </component>
    <component>
      <interface-class>org.jetbrains.plugins.grails.plugins.control.GrailsPluginManager</interface-class>
      <implementation-class>org.jetbrains.plugins.grails.plugins.control.GrailsPluginManagerImpl</implementation-class>
    </component>
  </module-components>

  <actions>
    <action id="Grails.GenerateViews" class="org.jetbrains.plugins.grails.actions.GenerateViewsAction"
            text="Grails Views" description="Generate Grails Views">
      <add-to-group group-id="GenerateGroup" anchor="last"/>
    </action>
    <action id="Grails.GenerateController" class="org.jetbrains.plugins.grails.actions.GenerateControllerAction"
            text="Grails Controller" description="Generate Grails Controller">
      <add-to-group group-id="GenerateGroup" anchor="last"/>
    </action>
    <action id="Grails.GenerateDomainClass" class="org.jetbrains.plugins.grails.actions.GenerateDomainClassAction"
            text="Grails Domain Class" description="Generate Grails Domain Class">
      <add-to-group group-id="GenerateGroup" anchor="last"/>
    </action>
    <action id="Grails.GenerateTests" class="org.jetbrains.plugins.grails.actions.GenerateTestsAction"
            text="Grails Tests" description="Create Tests">
      <add-to-group group-id="GenerateGroup" anchor="last"/>
    </action>
    <action id="Grails.GenerateControllerTests"
            class="org.jetbrains.plugins.grails.actions.GenerateControllerTestsAction"
            text="Grails Controller Tests" description="Create Controller Tests">
      <add-to-group group-id="GenerateGroup" anchor="last"/>
    </action>

    <action id="Groovy.NewScript" class="org.jetbrains.plugins.groovy.actions.NewScriptAction"
            text="Groovy Script" description="Create new Groovy script">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Grails"/>
    </action>
    <action id="Groovy.NewClass" class="org.jetbrains.plugins.groovy.actions.NewGroovyClassAction"
            text="Groovy Class" description="Create new Groovy class">
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="Groovy.NewScript"/>
    </action>
    <action id="Groovy.NewInterface" class="org.jetbrains.plugins.groovy.actions.NewGroovyInterfaceAction"
            text="Groovy Interface" description="Create new Groovy interface">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Groovy.NewClass"/>
    </action>
    <action id="Groovy.NewEnum" class="org.jetbrains.plugins.groovy.actions.NewGroovyEnumAction"
            text="Groovy Enum" description="Create new Groovy enumeration">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Groovy.NewInterface"/>
    </action>
    <action id="Groovy.NewAnnotation" class="org.jetbrains.plugins.groovy.actions.NewGroovyAnnotationAction"
            text="Groovy @Interface" description="Create new Groovy annotation">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Groovy.NewEnum"/>
    </action>
    <action id="Gant.NewScript" class="org.jetbrains.plugins.gant.actions.NewGantScriptAction"
            text="Gant Script" description="Create new Gant script">
      <add-to-group group-id="NewGroup" anchor="after" relative-to-action="Groovy.NewAnnotation"/>
    </action>


    <action id="RenameJavaFileToGroovyFileAction"
            class="org.jetbrains.plugins.groovy.refactoring.javaToGrovyRename.RenameJavaFileToGroovyFileAction"
            text="Rename To Groovy" description="Rename Java File to Groovy">
      <add-to-group group-id="EditorTabPopupMenu" anchor="last"/>
    </action>
    <action id="org.jetbrains.plugins.groovy.actions.generate.equals.EqualsGenerateAction"
            class="org.jetbrains.plugins.groovy.actions.generate.equals.EqualsGenerateAction"
            text="equals() and hashCode()" description="Action generates equals and hashCode now">
      <add-to-group group-id="GenerateGroup" anchor="first"/>
    </action>
    <action id="org.jetbrains.plugins.groovy.actions.generate.constructors.CostructorGenerateAction"
            class="org.jetbrains.plugins.groovy.actions.generate.constructors.CostructorGenerateAction"
            text="Constructor" description="Generates constructor">
      <add-to-group group-id="GenerateGroup" anchor="first"/>
    </action>

    <group id="Grails" class="org.jetbrains.plugins.grails.actions.GrailsGroup"
           text="Grails">
      <!--
      <action id="Grails.NewApp" class="org.jetbrains.plugins.grails.actions.NewGrailsAppAction"
              text="Grails Application"
              description="Create new Grails application"/>
      -->
      <action id="Grails.DomainClass" class="org.jetbrains.plugins.grails.actions.NewGrailsDomainClassAction"
              text="Grails Domain Class" description="Create new Grails domain class">
      </action>
      <action id="Grails.Controller" class="org.jetbrains.plugins.grails.actions.NewGrailsControllerAction"
              text="Grails Controller" description="Create new Grails controller">
      </action>
      <action id="Grails.Service" class="org.jetbrains.plugins.grails.actions.NewGrailsServiceAction"
              text="Grails Service" description="Create new Grails service">
      </action>
      <action id="Grails.Script" class="org.jetbrains.plugins.grails.actions.NewGrailsScriptAction"
              text="Grails Script" description="Create new Grails script">
      </action>
      <action id="Grails.TagLib" class="org.jetbrains.plugins.grails.actions.NewGrailsTagLibAction"
              text="Grails TagLib" description="Create new Grails tagLib">
      </action>
      <action id="Grails.GSP" class="org.jetbrains.plugins.grails.actions.NewGspAction"
      text="GSP" description="Create new Groovy Server Page">
    </action>
      <add-to-group group-id="NewGroup" anchor="last"/>
    </group>

    <action id="Grails.Plugins"
            class="org.jetbrains.plugins.grails.plugins.GrailsPluginsAction"
            text="Grails plugins" description="Grails plugins manager" icon="/org/jetbrains/plugins/grails/images/grails_plugin.png">
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </action>

    <action id="Grails.WAR" class="org.jetbrains.plugins.grails.actions.GrailsWarAction"
            text="Make Grails Web Archive" description="Generate Web Archive">
      <add-to-group group-id="BuildMenu" anchor="last"/>
    </action>
    <action id="Grails.RunTarget" class="org.jetbrains.plugins.grails.actions.target.GrailsRunTarget"
            text="Run Grails Target" description="Run arbitrary Grails target">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt G"/>
    </action>
  </actions>



  <application-components>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.GroovyLoader</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.fileType.GspLoader</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.gant.GantLoader</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.codeInspection.GroovyInspectionProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.grails.GrailsLoader</implementation-class>
    </component>
    <!-- Groovy-based framework specific extension points -->
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.extensions.completion.VariableNameSuggesterRegistry
      </implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.extensions.completion.InsertHandlerRegistry</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.extensions.debugger.ScriptPositionManagerHelperRegistry</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.extensions.script.ScriptDetectorRegistry</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.plugins.groovy.extensions.resolve.ScriptMembersProviderRegistry</implementation-class>
    </component>
  </application-components>

</idea-plugin>
