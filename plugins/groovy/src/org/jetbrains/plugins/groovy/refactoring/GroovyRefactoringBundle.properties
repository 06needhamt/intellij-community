#
# Copyright 2000-2007 JetBrains s.r.o.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

########################################################################################################################
# Introduce variable
########################################################################################################################
introduce.variable.title=Introduce Variable
only.in.groovy.files=This refactoring is available only in Groovy files
selected.block.should.represent.an.expression=Selected block should represent an expression
refactoring.is.not.supported.in.the.current.context=Refactoring is not supported in current context
refactoring.is.not.supported.in.method.parameters=Refactoring is not supported in closure or method parameters
replace.all.occurrences=Replace all occurrences
declare.final=Declare final
press.escape.to.remove.the.highlighting=Press Escape to remove the highlighting
specify.the.type.explicitly=Specify the type explicitly
variable.of.type=Variable of type:
name.prompt=Name:
selected.expression.has.void.type=Selected expression has void type
introduced.variable.conflicts.with.parameter.0=Introduced variable will conflict with parameter {0}
introduced.variable.conflicts.with.variable.0=Introduced variable will conflict with local variable {0}

########################################################################################################################
# Inline variable
########################################################################################################################
inline.variable.title=Inline Variable
variable.is.never.used.0=Variable ''{0}'' is never used
wrong.element.to.inline=The caret should be positioned on the name of local variable.
cannot.find.a.single.definition.to.inline.local.var=Cannot find a single definition to inline local variable
inline.local.command=Inline Variable
local.varaible.is.lvalue=Variable to be inlined has occurrence as lvalue in assignment
inline.local.variable.prompt.0.1=Inline local variable ''{0}'' ({1,choice,1#1 occurrence|2#{1, number} occurrences})?

########################################################################################################################
# Extract method
########################################################################################################################
extract.method.title=Extract method
selected.block.should.represent.a.statement.set=Selected block should represent a set of statements or an expression
cannot.perform.analysis=Code analysis cannot be performed
multiple.output.values=There are multiple output values for the selected code fragment
selected.block.contains.invocation.of.another.class.constructor=Selected block contains invocation of another class constructor
specify.type.label=<HTML>Specify return <u>t</u>ype explicitly
name.label=<HTML><u>N</u>ame:
signature.preview.border.title=Signature Preview
parameters.border.title=Parameters
visibility.border.title=Visibility
method.border.title=Method
visibility.private=Private
visibility.public=Public
visibility.protected=Protected
row.move.up=Move Up
row.move.down=Move Down
method.is.alredy.defined.in.class=Method {0} is already defined in the class {1}.
method.is.alredy.defined.in.script=Method {0} is already defined in the script {1}.