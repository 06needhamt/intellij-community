########################################################################################################################
# Groovy script template
########################################################################################################################
error.file.already.exists=File with same name already exists

groovy.script.template=Groovy Script
groovy.script.text=package ${PACKAGE_NAME}\n\
\n\
/** \n\
* Created by IntelliJ IDEA.\n\
* User: ${USER}\n\
* Date: ${DATE}\n\
* Time: ${TIME}\n\
* To change this template use File | Settings | File Templates.\n\
*/

########################################################################################################################
# GDK & compilation
########################################################################################################################


no.java.sdk=No java SDK configured
cannot.found.jdk=Cannot found java sdk
cannot.compile.groovy.files=Cannot compile Groovy files.\nPlease set up GDK

########################################################################################################################
# Parser error messages
########################################################################################################################

separator.expected=';' or new line expected
import.keyword.expected='import' expected
identifier.expected=Identifier expected
package.keyword.expected='package' expected
string.end.expected=GString ending expected
mult.expression.expected=Multiplicative expression expected
lbrack.expected='[' expected
rbrack.expected=']' expected
upper.case.ident.or.builtIn.type.or.qualified.type.name.expected=upper case identifier or built in type or qualified type name expected
balanced.tokens.expected=balanced tokens expected
lparen.expected='(' expected
lcurly.expected='{' expected
start.of.string.expected=start of string expected
end.of.string.expected=end of string expected
rcurly.expected='}' expected
rparen.expected=')' expected
lbrack.or.lparen.or.lcurly.or.string_ctor_start.expected='[', '{', '{' or start of the string expected
wrong.declaration=wrong declaration
variable.definitions.expected=variable definition expected
type.specification.expected=type specification expected
modifier.expected=modifier expected
annotation.or.modifier.expected=annotation or modifier expected
type.definition.expected=type definition expected

