/* The following code was generated by JFlex 1.4.1 on 7/4/08 2:10 PM */

/*
 * Copyright 2000-2007 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.groovy.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/4/08 2:10 PM from the specification file
 * <tt>groovy.flex</tt>
 */
public class _GroovyLexer implements FlexLexer, GroovyTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int KING_STATE = 11;
  public static final int IN_TRIPLE_DOT = 8;
  public static final int KING_STATE_INNER = 12;
  public static final int IN_TRIPLE_GSTRING = 4;
  public static final int IN_REGEX_DOLLAR = 18;
  public static final int IN_SINGLE_GSTRING = 3;
  public static final int NLS_AFTER_COMMENT = 22;
  public static final int KING_STATE_INNER_CONTENT = 14;
  public static final int IN_TRIPLE_IDENT = 7;
  public static final int IN_TRIPLE_GSTRING_DOLLAR = 2;
  public static final int IN_SINGLE_DOT = 6;
  public static final int IN_REGEX_DOT = 21;
  public static final int IN_WRONG_SINGLE_GSTRING = 15;
  public static final int NLS_AFTER_LBRACE = 23;
  public static final int IN_TRIPLE_NLS = 9;
  public static final int NLS_AFTER_NLS = 24;
  public static final int IN_REGEX_IDENT = 20;
  public static final int WRONG_STRING = 10;
  public static final int IN_SINGLE_IDENT = 5;
  public static final int KING_STATE_CONTENT = 13;
  public static final int IN_REGEX = 19;
  public static final int WAIT_FOR_REGEX = 17;
  public static final int IN_INNER_BLOCK = 16;
  public static final int IN_SINGLE_GSTRING_DOLLAR = 1;
  public static final int BRACE_COUNT = 25;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\10\1\43"+
    "\1\7\1\36\1\65\1\70\1\44\1\54\1\55\1\6\1\27\1\61"+
    "\1\30\1\34\1\5\1\31\2\12\1\46\1\46\2\12\1\46\2\12"+
    "\1\60\1\71\1\62\1\53\1\63\1\52\1\72\3\11\1\24\1\26"+
    "\1\16\1\14\1\35\1\22\2\35\1\20\1\35\1\35\1\35\10\35"+
    "\1\33\2\35\1\56\1\4\1\57\1\66\1\35\1\0\1\74\1\42"+
    "\1\75\1\23\1\25\1\15\1\13\1\103\1\21\1\35\1\76\1\17"+
    "\1\51\1\37\1\100\1\73\1\35\1\40\1\77\1\41\1\45\1\101"+
    "\1\105\1\32\1\102\1\104\1\47\1\67\1\50\1\64\43\0\4\35"+
    "\4\0\1\35\12\0\1\35\4\0\1\35\5\0\27\35\1\0\37\35"+
    "\1\0\u013f\35\31\0\162\35\4\0\14\35\16\0\5\35\11\0\1\35"+
    "\213\0\1\35\13\0\1\35\1\0\3\35\1\0\1\35\1\0\24\35"+
    "\1\0\54\35\1\0\46\35\1\0\5\35\4\0\202\35\10\0\105\35"+
    "\1\0\46\35\2\0\2\35\6\0\20\35\41\0\46\35\2\0\1\35"+
    "\7\0\47\35\110\0\33\35\5\0\3\35\56\0\32\35\5\0\13\35"+
    "\43\0\2\35\1\0\143\35\1\0\1\35\17\0\2\35\7\0\2\35"+
    "\12\0\3\35\2\0\1\35\20\0\1\35\1\0\36\35\35\0\3\35"+
    "\60\0\46\35\13\0\1\35\u0152\0\66\35\3\0\1\35\22\0\1\35"+
    "\7\0\12\35\43\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\1\35\3\0\4\35\3\0\1\35\36\0\2\35\1\0\3\35"+
    "\16\0\4\35\21\0\6\35\4\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\2\35\1\0\2\35\37\0\4\35\1\0\1\35"+
    "\23\0\3\35\20\0\11\35\1\0\3\35\1\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\5\35\3\0\1\35\22\0\1\35\17\0\2\35"+
    "\17\0\1\35\23\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\5\35\3\0\1\35\36\0\2\35\1\0\3\35"+
    "\17\0\1\35\21\0\1\35\1\0\6\35\3\0\3\35\1\0\4\35"+
    "\3\0\2\35\1\0\1\35\1\0\2\35\3\0\2\35\3\0\3\35"+
    "\3\0\10\35\1\0\3\35\77\0\1\35\13\0\10\35\1\0\3\35"+
    "\1\0\27\35\1\0\12\35\1\0\5\35\46\0\2\35\43\0\10\35"+
    "\1\0\3\35\1\0\27\35\1\0\12\35\1\0\5\35\3\0\1\35"+
    "\40\0\1\35\1\0\2\35\43\0\10\35\1\0\3\35\1\0\27\35"+
    "\1\0\20\35\46\0\2\35\43\0\22\35\3\0\30\35\1\0\11\35"+
    "\1\0\1\35\2\0\7\35\72\0\60\35\1\0\2\35\13\0\10\35"+
    "\72\0\2\35\1\0\1\35\2\0\2\35\1\0\1\35\2\0\1\35"+
    "\6\0\4\35\1\0\7\35\1\0\3\35\1\0\1\35\1\0\1\35"+
    "\2\0\2\35\1\0\4\35\1\0\2\35\11\0\1\35\2\0\5\35"+
    "\1\0\1\35\25\0\2\35\42\0\1\35\77\0\10\35\1\0\42\35"+
    "\35\0\4\35\164\0\42\35\1\0\5\35\1\0\2\35\45\0\6\35"+
    "\112\0\46\35\12\0\51\35\7\0\132\35\5\0\104\35\5\0\122\35"+
    "\6\0\7\35\1\0\77\35\1\0\1\35\1\0\4\35\2\0\7\35"+
    "\1\0\1\35\1\0\4\35\2\0\47\35\1\0\1\35\1\0\4\35"+
    "\2\0\37\35\1\0\1\35\1\0\4\35\2\0\7\35\1\0\1\35"+
    "\1\0\4\35\2\0\7\35\1\0\7\35\1\0\27\35\1\0\37\35"+
    "\1\0\1\35\1\0\4\35\2\0\7\35\1\0\47\35\1\0\23\35"+
    "\105\0\125\35\14\0\u026c\35\2\0\10\35\12\0\32\35\5\0\113\35"+
    "\3\0\3\35\17\0\15\35\1\0\4\35\16\0\22\35\16\0\22\35"+
    "\16\0\15\35\1\0\3\35\17\0\64\35\43\0\1\35\3\0\2\35"+
    "\103\0\130\35\10\0\51\35\127\0\35\35\63\0\36\35\2\0\5\35"+
    "\u038b\0\154\35\224\0\234\35\4\0\132\35\6\0\26\35\2\0\6\35"+
    "\2\0\46\35\2\0\6\35\2\0\10\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\37\35\2\0\65\35\1\0\7\35\1\0\1\35"+
    "\3\0\3\35\1\0\7\35\3\0\4\35\2\0\6\35\4\0\15\35"+
    "\5\0\3\35\1\0\7\35\102\0\2\35\23\0\1\35\34\0\1\35"+
    "\15\0\1\35\40\0\22\35\120\0\1\35\4\0\1\35\2\0\12\35"+
    "\1\0\1\35\3\0\5\35\6\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\4\35\1\0\3\35\1\0\7\35\3\0\3\35\5\0\5\35"+
    "\26\0\44\35\u0e81\0\3\35\31\0\11\35\7\0\5\35\2\0\5\35"+
    "\4\0\126\35\6\0\3\35\1\0\137\35\5\0\50\35\4\0\136\35"+
    "\21\0\30\35\70\0\20\35\u0200\0\u19b6\35\112\0\u51a6\35\132\0\u048d\35"+
    "\u0773\0\u2ba4\35\u215c\0\u012e\35\2\0\73\35\225\0\7\35\14\0\5\35"+
    "\5\0\1\35\1\0\12\35\1\0\15\35\1\0\5\35\1\0\1\35"+
    "\1\0\2\35\1\0\2\35\1\0\154\35\41\0\u016b\35\22\0\100\35"+
    "\2\0\66\35\50\0\15\35\66\0\2\35\30\0\3\35\31\0\1\35"+
    "\6\0\5\35\1\0\207\35\7\0\1\35\34\0\32\35\4\0\1\35"+
    "\1\0\32\35\12\0\132\35\3\0\6\35\2\0\6\35\2\0\6\35"+
    "\2\0\3\35\3\0\2\35\3\0\2\35\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\6\0\1\2\10\0\1\3\6\0\1\4"+
    "\1\5\1\6\1\4\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\5\12\1\14\1\15\1\13\1\16\1\17\4\12"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\6\12\1\1\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\1\1\53\1\54"+
    "\1\55\1\56\3\57\1\60\1\57\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\2\67\2\70\3\71\1\72\1\73"+
    "\2\74\3\75\1\76\1\20\1\77\1\2\1\100\1\101"+
    "\1\102\1\103\1\102\1\104\1\3\1\105\1\106\2\3"+
    "\1\107\1\76\1\110\1\111\1\112\1\6\2\112\2\113"+
    "\2\114\1\0\1\6\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\13\1\130"+
    "\2\0\5\12\1\131\1\132\6\12\1\133\1\134\1\135"+
    "\1\136\1\137\1\0\1\140\1\141\11\12\1\20\2\0"+
    "\1\142\1\143\1\21\1\0\1\144\1\145\1\146\1\147"+
    "\1\150\1\151\1\0\1\152\1\0\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\4\12\1\161\13\12\3\0\1\1"+
    "\13\0\1\103\1\104\1\0\1\104\1\116\1\73\1\3"+
    "\1\107\1\76\1\0\1\116\1\162\1\163\1\164\1\0"+
    "\1\164\3\12\1\165\1\12\1\166\2\12\1\167\4\12"+
    "\1\13\1\170\1\171\1\172\5\12\1\173\5\12\1\143"+
    "\1\0\1\20\1\0\1\20\1\144\1\21\1\0\1\144"+
    "\1\174\1\175\1\176\1\177\1\0\24\12\2\0\1\200"+
    "\1\201\1\0\1\104\1\201\1\73\2\116\1\162\1\116"+
    "\2\162\1\164\3\12\1\202\6\12\1\203\1\12\1\204"+
    "\1\13\1\205\2\12\1\206\1\12\1\207\3\12\1\210"+
    "\3\0\2\20\1\211\1\20\1\0\1\144\1\0\1\212"+
    "\10\12\1\213\1\12\1\214\7\12\1\215\1\12\3\0"+
    "\1\73\2\116\2\162\1\116\1\0\1\162\1\216\1\217"+
    "\1\220\12\12\1\221\1\222\1\12\3\0\1\211\2\0"+
    "\1\20\1\211\1\20\5\0\1\144\1\0\6\12\1\223"+
    "\1\224\3\12\1\225\1\12\1\226\2\12\1\227\2\0"+
    "\1\104\2\162\1\0\4\12\1\230\1\12\1\231\1\12"+
    "\1\232\1\233\1\12\1\234\1\12\12\0\2\12\1\235"+
    "\2\12\1\236\2\12\1\237\1\12\1\240\1\12\1\104"+
    "\1\241\3\12\1\242\1\243\1\12\1\244\5\0\1\144"+
    "\1\245\1\12\1\246\11\12\1\0\1\143\2\0\1\12"+
    "\1\247\1\250\1\251\1\12\1\252\1\253\2\12\1\254"+
    "\2\0\1\255\1\12\1\256\1\257\2\12\1\260";

  private static int [] zzUnpackAction() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u071c\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64"+
    "\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u071c\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u071c\0\u071c\0\u0dac\0\u0df2"+
    "\0\u071c\0\u071c\0\u071c\0\u071c\0\u071c\0\u071c\0\u0e38\0\u0e7e"+
    "\0\u071c\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u071c\0\u071c\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u071c\0\u1252\0\u1298\0\u071c\0\u12de\0\u1324\0\u136a\0\u071c"+
    "\0\u071c\0\u13b0\0\u13f6\0\u143c\0\u071c\0\u1482\0\u071c\0\u071c"+
    "\0\u071c\0\u071c\0\u071c\0\u14c8\0\u071c\0\u150e\0\u1554\0\u071c"+
    "\0\u071c\0\u1324\0\u159a\0\u071c\0\u071c\0\u071c\0\u15e0\0\u071c"+
    "\0\u1324\0\u1626\0\u071c\0\u071c\0\u166c\0\u071c\0\u071c\0\u071c"+
    "\0\u071c\0\u071c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u071c\0\u17ca"+
    "\0\u1810\0\u071c\0\u1856\0\u071c\0\u071c\0\u071c\0\u189c\0\u18e2"+
    "\0\u1928\0\u071c\0\u18e2\0\u071c\0\u18e2\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u071c\0\u1a86\0\u071c\0\u071c\0\u1acc\0\u071c\0\u071c"+
    "\0\u071c\0\u071c\0\u071c\0\u071c\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u0906\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u071c\0\u071c\0\u071c\0\u071c\0\u071c"+
    "\0\u1ee6\0\u1f2c\0\u071c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u071c"+
    "\0\u22ba\0\u2300\0\u2346\0\u238c\0\u071c\0\u071c\0\u23d2\0\u071c"+
    "\0\u2418\0\u245e\0\u071c\0\u24a4\0\u071c\0\u071c\0\u071c\0\u071c"+
    "\0\u071c\0\u071c\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878"+
    "\0\u28be\0\u2904\0\u294a\0\u136a\0\u2990\0\u29d6\0\u2a1c\0\u13b0"+
    "\0\u143c\0\u1482\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0"+
    "\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0"+
    "\0\u17ca\0\u17ca\0\u18e2\0\u2e36\0\u2e7c\0\u071c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u0906\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u071c"+
    "\0\u071c\0\u0906\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u0906"+
    "\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u071c\0\u35de\0\u3624"+
    "\0\u366a\0\u36b0\0\u071c\0\u36f6\0\u373c\0\u3782\0\u071c\0\u071c"+
    "\0\u071c\0\u071c\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u071c\0\u071c\0\u3e12\0\u3e58\0\u2c92\0\u2c92\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u071c\0\u071c\0\u3ffc\0\u4042"+
    "\0\u4088\0\u0906\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c"+
    "\0\u0906\0\u4272\0\u0906\0\u42b8\0\u0906\0\u42fe\0\u4344\0\u0906"+
    "\0\u438a\0\u0906\0\u43d0\0\u4416\0\u445c\0\u0906\0\u44a2\0\u44e8"+
    "\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718"+
    "\0\u071c\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902"+
    "\0\u4948\0\u0906\0\u498e\0\u0906\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6"+
    "\0\u4aec\0\u4b32\0\u4b78\0\u0906\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90"+
    "\0\u2cd8\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u071c\0\u3f70\0\u4dee"+
    "\0\u0906\0\u4e34\0\u0906\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92"+
    "\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u0906\0\u517c"+
    "\0\u51c2\0\u5208\0\u524e\0\u071c\0\u4646\0\u4600\0\u5294\0\u4574"+
    "\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4"+
    "\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u0906\0\u0906"+
    "\0\u56ae\0\u56f4\0\u573a\0\u0906\0\u5780\0\u0906\0\u57c6\0\u580c"+
    "\0\u0906\0\u5852\0\u5898\0\u4cd6\0\u58de\0\u5924\0\u4dee\0\u596a"+
    "\0\u59b0\0\u59f6\0\u5a3c\0\u0906\0\u5a82\0\u0906\0\u5ac8\0\u0906"+
    "\0\u0906\0\u5b0e\0\u0906\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u45ba"+
    "\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u0906\0\u5e9c\0\u5ee2\0\u0906\0\u5f28\0\u5f6e\0\u0906\0\u5fb4"+
    "\0\u0906\0\u5ffa\0\u58de\0\u0906\0\u6040\0\u6086\0\u60cc\0\u0906"+
    "\0\u0906\0\u6112\0\u0906\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270"+
    "\0\u54c4\0\u0906\0\u62b6\0\u0906\0\u62fc\0\u6342\0\u6388\0\u63ce"+
    "\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u652c\0\u6572\0\u5d3e\0\u65b8"+
    "\0\u65fe\0\u6644\0\u0906\0\u0906\0\u0906\0\u668a\0\u0906\0\u0906"+
    "\0\u66d0\0\u6716\0\u0906\0\u675c\0\u67a2\0\u0906\0\u67e8\0\u0906"+
    "\0\u0906\0\u682e\0\u6874\0\u0906";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\2\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\43\1\45\1\43\1\46\1\43\1\47"+
    "\1\43\1\50\1\43\1\51\1\43\1\52\1\53\1\54"+
    "\2\43\1\55\1\43\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\43\1\44\1\65\1\66\1\43\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\43\1\113\1\43\1\114\3\43"+
    "\1\115\1\116\2\117\6\116\1\120\1\116\14\120\3\116"+
    "\2\120\1\116\1\120\1\116\4\120\2\116\1\120\1\116"+
    "\1\121\1\116\1\120\21\116\13\120\11\122\1\123\1\122"+
    "\14\123\3\122\2\123\1\122\1\123\1\122\4\123\2\122"+
    "\1\123\1\122\1\124\1\122\1\123\21\122\13\123\1\125"+
    "\2\126\1\125\1\127\31\125\1\130\4\125\1\131\42\125"+
    "\1\132\2\133\1\132\1\134\31\132\1\135\4\132\1\136"+
    "\42\132\11\137\1\120\1\137\14\120\3\137\2\120\1\137"+
    "\1\120\1\137\4\120\2\137\1\120\3\137\1\120\21\137"+
    "\13\120\34\137\1\140\51\137\11\141\1\123\1\141\14\123"+
    "\3\141\2\123\1\141\1\123\1\141\4\123\2\141\1\123"+
    "\3\141\1\123\21\141\13\123\34\141\1\142\51\141\1\143"+
    "\2\144\103\143\106\13\1\145\2\146\6\145\1\147\1\145"+
    "\14\147\3\145\2\147\1\145\1\147\1\145\4\147\2\145"+
    "\1\147\1\145\1\150\1\145\1\147\21\145\13\147\1\151"+
    "\1\152\1\126\1\151\1\153\1\154\30\151\1\155\47\151"+
    "\1\156\2\157\6\156\1\147\1\156\14\147\3\156\2\147"+
    "\1\156\1\147\1\156\4\147\2\156\1\147\1\156\1\150"+
    "\1\156\1\147\21\156\13\147\1\160\1\161\1\126\1\160"+
    "\1\162\1\154\30\160\1\163\47\160\1\164\2\165\40\164"+
    "\1\166\42\164\1\33\2\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\2\43\1\45\1\43\1\46"+
    "\1\43\1\47\1\43\1\50\1\43\1\51\1\43\1\52"+
    "\1\53\1\54\2\43\1\55\1\43\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\43\1\44\1\167\1\170"+
    "\1\43\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\43\1\113\1\43"+
    "\1\114\3\43\1\115\3\171\1\172\1\173\1\174\100\171"+
    "\1\175\2\117\6\175\1\176\1\175\14\176\3\175\2\176"+
    "\1\175\1\176\1\175\4\176\2\175\1\176\1\175\1\177"+
    "\1\175\1\176\21\175\13\176\1\200\2\126\1\200\1\201"+
    "\1\202\30\200\1\203\47\200\11\204\1\176\1\204\14\176"+
    "\3\204\2\176\1\204\1\176\1\204\4\176\2\204\1\176"+
    "\3\204\1\176\21\204\13\176\34\204\1\205\51\204\1\206"+
    "\3\207\1\210\1\211\100\206\1\212\3\207\1\213\101\212"+
    "\1\214\3\207\1\215\101\214\1\33\2\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\43\1\45"+
    "\1\43\1\46\1\43\1\47\1\43\1\50\1\43\1\51"+
    "\1\43\1\52\1\53\1\54\2\43\1\55\1\43\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\43\1\44"+
    "\1\65\1\33\1\43\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\43"+
    "\1\113\1\43\1\114\3\43\1\115\107\0\3\34\1\216"+
    "\102\0\1\217\1\35\110\0\1\220\1\221\44\0\1\222"+
    "\40\0\1\223\25\0\1\224\16\0\1\225\42\0\1\226"+
    "\150\0\1\227\43\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\12\0\1\44\2\230\2\231\2\232\2\233\2\234\2\235"+
    "\2\0\1\44\2\0\1\236\11\0\1\44\50\0\6\43"+
    "\1\237\1\43\1\240\5\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\1\43"+
    "\1\241\3\43\1\242\5\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\5\43\1\243\5\43\11\0\4\43\1\244\11\43"+
    "\2\0\3\43\1\0\1\43\1\0\1\245\3\43\2\0"+
    "\2\43\2\0\1\246\21\0\13\43\11\0\14\43\1\247"+
    "\1\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\5\43\1\250\5\43\11\0"+
    "\6\43\1\251\7\43\2\0\1\43\1\252\1\43\1\0"+
    "\1\43\1\0\1\253\3\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\27\0\1\254\23\0\1\255\62\0\1\256"+
    "\22\0\1\257\7\0\1\260\34\0\1\44\2\230\2\231"+
    "\2\232\2\233\2\234\2\235\2\0\1\44\2\261\1\236"+
    "\11\0\1\44\73\0\1\262\33\0\1\263\26\0\14\43"+
    "\1\264\1\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\1\265\1\43\2\0\1\43\21\0\1\43\1\266"+
    "\11\43\11\0\14\43\1\267\1\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\43\1\270\2\43\2\0\2\43\2\0\1\43\21\0"+
    "\10\43\1\271\2\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\1\43\1\272\2\43\2\0\2\43\2\0"+
    "\1\43\21\0\5\43\1\273\1\43\1\274\3\43\1\275"+
    "\2\276\1\275\1\277\31\275\1\300\4\275\1\301\42\275"+
    "\1\302\2\0\1\302\1\303\37\302\1\304\41\302\34\0"+
    "\1\305\23\0\1\306\100\0\1\307\10\0\1\310\74\0"+
    "\1\311\6\0\1\312\76\0\1\313\7\0\1\314\75\0"+
    "\1\315\105\0\1\316\105\0\1\317\13\0\1\320\71\0"+
    "\1\321\14\0\1\322\26\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\1\43\1\323\2\43\2\0\1\324\1\43"+
    "\2\0\1\43\21\0\1\43\1\325\11\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\3\43\1\326\2\0"+
    "\2\43\2\0\1\43\21\0\4\43\1\327\6\43\11\0"+
    "\6\43\1\330\7\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\1\43\1\331"+
    "\3\43\1\332\2\43\1\333\2\43\11\0\16\43\2\0"+
    "\3\43\1\0\1\43\1\0\2\43\1\334\1\43\2\0"+
    "\1\335\1\43\2\0\1\43\21\0\7\43\1\336\1\337"+
    "\1\43\1\340\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\5\43"+
    "\1\341\5\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\10\43"+
    "\1\342\2\43\1\116\2\0\103\116\1\0\3\117\1\343"+
    "\112\0\16\120\2\0\3\120\1\0\1\120\1\0\4\120"+
    "\2\0\2\120\2\0\1\120\21\0\13\120\2\122\1\0"+
    "\103\122\11\0\16\123\2\0\3\123\1\0\1\123\1\0"+
    "\4\123\2\0\2\123\2\0\1\123\21\0\13\123\1\125"+
    "\2\0\1\125\1\344\31\125\1\130\4\125\1\131\42\125"+
    "\1\0\3\126\1\345\102\0\1\346\1\125\1\0\1\125"+
    "\10\0\1\125\13\0\1\125\2\0\1\125\1\0\7\125"+
    "\1\347\1\125\37\0\4\350\1\351\31\350\1\135\4\350"+
    "\1\352\43\350\3\133\1\353\31\350\1\135\4\350\1\352"+
    "\42\350\1\0\2\350\1\0\1\350\10\0\1\350\13\0"+
    "\1\350\2\0\1\350\1\0\7\350\1\354\1\350\37\0"+
    "\36\350\1\135\4\350\1\355\42\350\1\0\3\144\1\356"+
    "\102\0\3\146\1\357\112\0\16\147\2\0\3\147\1\0"+
    "\1\147\1\0\4\147\2\0\2\147\2\0\1\147\21\0"+
    "\13\147\5\0\1\151\101\0\3\157\1\360\106\0\1\160"+
    "\101\0\3\165\1\361\102\0\1\362\1\172\103\0\1\363"+
    "\2\364\1\363\1\365\1\220\1\366\27\363\1\367\47\363"+
    "\1\175\2\0\103\175\11\0\16\176\2\0\3\176\1\0"+
    "\1\176\1\0\4\176\2\0\2\176\2\0\1\176\21\0"+
    "\13\176\1\200\2\0\1\200\1\201\1\202\30\200\1\203"+
    "\50\200\1\370\2\200\1\201\1\371\30\200\1\372\47\200"+
    "\5\0\1\202\101\0\3\207\1\373\102\0\2\207\110\0"+
    "\1\220\1\221\100\0\2\34\105\0\1\35\103\0\1\220"+
    "\2\0\103\220\6\374\1\375\77\374\53\0\1\376\32\0"+
    "\1\226\2\0\103\226\12\0\1\377\14\0\2\u0100\1\377"+
    "\14\0\1\377\51\0\1\u0101\16\0\1\u0101\14\0\1\u0101"+
    "\50\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\5\43\1\u0102\5\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\1\u0103"+
    "\3\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\6\43\1\u0104\7\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\1\43\1\u0105"+
    "\2\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\1\u0106\3\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\2\43\1\u0107\1\43"+
    "\2\0\2\43\2\0\1\43\21\0\4\43\1\u0108\6\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\1\u0109\12\43\11\0"+
    "\4\43\1\u010a\11\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\1\u010b\1\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\4\43\1\u010c\6\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\2\43\1\u010d\1\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\1\u010e"+
    "\1\43\2\0\1\43\21\0\13\43\11\0\2\u010f\2\0"+
    "\2\u010f\4\0\4\u010f\2\0\1\u010f\10\0\1\u010f\3\0"+
    "\1\u010f\25\0\2\u010f\44\0\1\u0110\25\0\1\u0111\34\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\12\43\1\u0112\11\0\6\43"+
    "\1\u0113\7\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\2\43\1\u0114\1\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\2\43\1\u0115\1\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\1\u0116"+
    "\1\43\2\0\1\43\21\0\1\43\1\u0117\5\43\1\u0118"+
    "\3\43\11\0\10\43\1\u0119\5\43\2\0\3\43\1\0"+
    "\1\43\1\0\1\43\1\u011a\2\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\14\43\1\u011b\1\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\5\43\1\u011c\5\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\2\43\1\u011d\1\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\1\275\2\0\1\275\1\277\31\275"+
    "\1\300\4\275\1\u011e\42\275\1\276\2\0\1\276\1\u011f"+
    "\31\276\1\300\4\276\1\0\42\276\1\0\1\u0120\1\275"+
    "\1\0\1\275\10\0\1\275\13\0\1\275\2\0\1\275"+
    "\1\0\7\275\1\u0121\1\275\102\0\1\u0122\42\0\1\302"+
    "\2\0\1\302\1\303\37\302\1\u0123\41\302\1\0\1\u0124"+
    "\1\302\1\0\1\302\10\0\1\302\13\0\1\302\2\0"+
    "\1\302\1\0\7\302\1\u0125\1\302\103\0\1\u0126\125\0"+
    "\1\u0127\104\0\1\u0128\75\0\1\u0129\105\0\1\u012a\7\0"+
    "\1\u012b\33\0\10\43\1\u012c\5\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\5\43\1\u012d\5\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\3\43\1\u012e\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\2\43"+
    "\1\u012f\10\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\4\43"+
    "\1\u0130\6\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\4\43"+
    "\1\u0131\6\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\1\43"+
    "\1\u0132\11\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\2\43\1\u0133\1\43\2\0\2\43\2\0\1\43"+
    "\21\0\4\43\1\u0134\6\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\1\u0135\3\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\1\43\1\u0136\11\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\1\43\1\u0137\2\43\2\0\2\43\2\0"+
    "\1\43\21\0\1\43\1\u0138\11\43\11\0\16\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\43\21\0\1\u0139\12\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\1\u013a\3\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\5\43\1\u013b\5\43\11\0\10\43\1\u013c\5\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\6\43\1\u013d\1\43\1\u013e"+
    "\5\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\10\43\1\u013f"+
    "\5\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\1\0\2\117\104\0"+
    "\2\126\103\0\1\125\1\0\2\125\1\344\31\125\1\130"+
    "\4\125\1\131\42\125\11\0\2\u0140\2\0\2\u0140\4\0"+
    "\4\u0140\2\0\1\u0140\10\0\1\u0140\3\0\1\u0140\25\0"+
    "\2\u0140\11\0\2\133\1\0\1\350\10\0\1\350\13\0"+
    "\1\350\2\0\1\350\1\0\7\350\1\354\1\350\50\0"+
    "\2\u0141\2\0\2\u0141\4\0\4\u0141\2\0\1\u0141\10\0"+
    "\1\u0141\3\0\1\u0141\25\0\2\u0141\10\0\36\350\1\135"+
    "\4\350\1\u0142\42\350\1\0\2\144\104\0\2\146\104\0"+
    "\2\157\104\0\2\165\105\0\1\172\103\0\1\363\2\0"+
    "\1\363\1\365\1\u0143\30\363\1\367\47\363\1\364\2\0"+
    "\1\364\1\u0144\1\0\30\364\1\155\47\364\1\363\1\u0145"+
    "\2\363\1\365\1\u0146\30\363\1\u0147\47\363\1\u0148\2\374"+
    "\1\u0148\1\u0149\1\374\1\u014a\27\u0148\1\374\47\u0148\5\0"+
    "\1\u0143\100\0\1\200\1\0\2\200\1\201\1\202\30\200"+
    "\1\203\47\200\6\374\1\u014b\77\374\5\u014c\1\u014d\1\375"+
    "\77\u014c\12\0\1\377\2\u014e\2\231\4\0\2\234\4\0"+
    "\1\377\14\0\1\377\51\0\1\377\16\0\1\377\14\0"+
    "\1\377\51\0\1\u0101\2\u014e\2\231\4\0\2\234\2\235"+
    "\2\0\1\u0101\14\0\1\u0101\50\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\1\43\1\u014f\11\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\1\43\1\u0150\11\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\4\43\1\u0151\6\43\11\0\2\43\1\u0152\13\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\13\43\11\0\14\43\1\u0153\1\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\2\43\1\u0154\1\43\2\0\2\43"+
    "\2\0\1\43\21\0\13\43\11\0\6\43\1\u0155\7\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\5\43\1\u0156\5\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\1\43\1\u0157\11\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\3\43\1\u0158\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\14\43\1\u0159"+
    "\1\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\14\43\1\u015a"+
    "\1\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\u015b\21\0\13\43\11\0\2\u010f\2\230\2\u010f\2\232"+
    "\2\233\2\u010f\2\u015c\2\0\1\u010f\2\0\1\236\5\0"+
    "\1\u010f\3\0\1\u010f\25\0\2\u010f\21\0\6\43\1\u015d"+
    "\7\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\10\43\1\u015e"+
    "\5\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\16\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\1\u015f\1\43"+
    "\2\0\1\43\21\0\13\43\11\0\14\43\1\u0160\1\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\13\43\11\0\16\43\2\0\3\43"+
    "\1\0\1\43\1\0\1\u0161\3\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\4\43\1\u0162\6\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\5\43\1\u0163\5\43\11\0\16\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\1\43\1\u0164\11\43\11\0\6\43\1\u0165\7\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\11\0\14\43\1\u0166\1\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\43\21\0\13\43\1\0\1\u0167\1\276\1\0\1\276"+
    "\10\0\1\276\13\0\1\276\2\0\1\276\1\0\7\276"+
    "\1\u0168\1\276\37\0\1\275\1\0\2\275\1\277\31\275"+
    "\1\300\4\275\1\u011e\42\275\11\0\2\u0169\2\0\2\u0169"+
    "\4\0\4\u0169\2\0\1\u0169\10\0\1\u0169\3\0\1\u0169"+
    "\25\0\2\u0169\10\0\4\u016a\1\u016b\31\u016a\1\u016c\4\u016a"+
    "\1\u016d\42\u016a\1\302\1\0\2\302\1\303\37\302\1\u0123"+
    "\41\302\11\0\2\u016e\2\0\2\u016e\4\0\4\u016e\2\0"+
    "\1\u016e\10\0\1\u016e\3\0\1\u016e\25\0\2\u016e\10\0"+
    "\4\u0126\1\u016f\37\u0126\1\u0170\41\u0126\53\0\1\u0171\43\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\6\43\1\u0172\4\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\2\43\1\u0173"+
    "\1\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\6\43\1\u0174\7\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\3\43\1\u0175\7\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\2\43\1\u0176"+
    "\1\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\14\43\1\u0177\1\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\4\43\1\u0178\6\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\2\43\1\u0179\10\43\11\0"+
    "\14\43\1\u017a\1\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\2\43\1\u017b"+
    "\1\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\1\43\1\u017c"+
    "\2\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\10\43\1\u017d\5\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\2\43\1\u017e"+
    "\1\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\14\43\1\u017f\1\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\2\43\1\u0180\10\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\1\43\1\u0181"+
    "\2\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\2\43\1\u0182"+
    "\1\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\1\43\1\u0183\11\43\11\0"+
    "\12\43\1\u0184\3\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\6\43\1\u0185\7\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\2\u0186\2\0\2\u0186\4\0\4\u0186\2\0\1\u0186\10\0"+
    "\1\u0186\3\0\1\u0186\25\0\2\u0186\21\0\2\u0187\2\0"+
    "\2\u0187\4\0\4\u0187\2\0\1\u0187\10\0\1\u0187\3\0"+
    "\1\u0187\25\0\2\u0187\10\0\1\364\1\u0188\2\364\1\u0144"+
    "\31\364\1\u0189\47\364\1\363\1\0\2\363\1\365\1\u0143"+
    "\30\363\1\367\47\363\1\u0148\2\374\1\u0148\1\u0149\1\374"+
    "\1\u018a\27\u0148\1\374\50\u0148\1\u018b\2\u0148\1\u0149\1\u0148"+
    "\1\u018a\77\u0148\1\u018c\2\u014c\1\u018c\1\u018d\1\u014d\1\u014a"+
    "\27\u018c\1\u014c\47\u018c\5\374\1\u018e\1\u018f\77\374\6\u014c"+
    "\1\u0190\77\u014c\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\2\43\1\u0191\1\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\6\43\1\u0192\7\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\14\43\1\u0193\1\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\1\43\1\u0194\2\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\1\43"+
    "\1\u0195\11\43\11\0\14\43\1\u0196\1\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\1\43\1\u0197\2\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\1\u0198\1\43\2\0\1\43\21\0"+
    "\13\43\11\0\6\43\1\u0199\7\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\u019a\3\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\2\u010f\2\230\2\u010f\2\232\2\233\2\u010f\2\u015c"+
    "\2\u0100\1\u010f\2\0\1\236\5\0\1\u010f\3\0\1\u010f"+
    "\25\0\2\u010f\21\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\6\43"+
    "\1\u019b\4\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\1\43\1\u019c\2\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\4\43"+
    "\1\u019d\6\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\12\43"+
    "\1\u019e\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\3\43\1\u019f"+
    "\7\43\11\0\14\43\1\u01a0\1\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\1\276\1\0\2\276\1\u011f\31\276\1\300\4\276"+
    "\1\0\42\276\11\0\2\u01a1\2\0\2\u01a1\4\0\4\u01a1"+
    "\2\0\1\u01a1\10\0\1\u01a1\3\0\1\u01a1\25\0\2\u01a1"+
    "\21\0\2\u01a2\2\0\2\u01a2\4\0\4\u01a2\2\0\1\u01a2"+
    "\10\0\1\u01a2\3\0\1\u01a2\25\0\2\u01a2\10\0\4\u016a"+
    "\1\u01a3\31\u016a\1\u01a4\4\u016a\1\u01a5\42\u016a\1\u01a6\2\u016a"+
    "\1\u01a6\1\u01a7\10\u01a6\1\u016a\13\u01a6\1\u016a\2\u01a6\1\u016a"+
    "\1\u01a6\1\u01a8\4\u016a\1\u01a9\1\u016a\1\u01aa\1\u016a\43\u01a6"+
    "\1\u01ab\31\u01a6\1\u01a4\4\u01a6\1\u01ac\42\u01a6\36\u016a\1\u01a4"+
    "\4\u016a\1\u01ad\42\u016a\11\0\2\u01ae\2\0\2\u01ae\4\0"+
    "\4\u01ae\2\0\1\u01ae\10\0\1\u01ae\3\0\1\u01ae\25\0"+
    "\2\u01ae\10\0\4\u0126\1\u016f\37\u0126\1\u01af\105\u0126\1\u01b0"+
    "\41\u0126\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\1\43\1\u01b1"+
    "\11\43\11\0\14\43\1\u01b2\1\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\10\43\1\u01b3\5\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\1\43\1\u01b4"+
    "\11\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\43\1\u01b5\2\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\43\1\u01b6\2\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\4\43\1\u01b7"+
    "\6\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\10\43\1\u01b8"+
    "\2\43\11\0\10\43\1\u01b9\5\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\2\43\1\u01ba"+
    "\10\43\11\0\10\43\1\u01bb\5\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\43\1\u01bc\2\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\10\43\1\u01bd"+
    "\2\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\2\43\1\u01be\1\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\2\43\1\u01bf"+
    "\10\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\2\43\1\u01c0\1\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\14\43\1\u01c1\1\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\2\u01c2\2\0\2\u01c2\4\0\4\u01c2\2\0"+
    "\1\u01c2\10\0\1\u01c2\3\0\1\u01c2\25\0\2\u01c2\21\0"+
    "\2\u01c3\2\0\2\u01c3\4\0\4\u01c3\2\0\1\u01c3\10\0"+
    "\1\u01c3\3\0\1\u01c3\25\0\2\u01c3\10\0\1\364\1\0"+
    "\2\364\1\u0144\1\0\30\364\1\155\47\364\1\u0148\2\374"+
    "\1\u0148\1\u0149\1\u018e\1\u01c4\27\u0148\1\374\50\u0148\1\374"+
    "\2\u0148\1\u0149\1\374\1\u018a\27\u0148\1\374\47\u0148\1\u018c"+
    "\2\u014c\1\u018c\1\u018d\1\u014c\1\u01c5\27\u018c\1\u014c\50\u018c"+
    "\1\u01c6\2\u018c\1\u018d\1\u018c\1\u01c5\77\u018c\5\u014c\1\u014d"+
    "\1\u01c7\77\u014c\11\0\6\43\1\u01c8\7\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\4\43\1\u01c9\11\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\1\u01ca\3\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\u01cb\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\2\43\1\u01cc"+
    "\1\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\6\43\1\u01cd\7\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\14\43\1\u01ce\1\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\12\43\1\u01cf\3\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\14\43\1\u01d0\1\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\1\u01d1\3\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\10\43"+
    "\1\u01d2\5\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\4\43\1\u01d3\6\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\1\43\1\u01d4\11\43\11\0\2\u01d5"+
    "\2\0\2\u01d5\4\0\4\u01d5\2\0\1\u01d5\10\0\1\u01d5"+
    "\3\0\1\u01d5\25\0\2\u01d5\21\0\2\u01d6\2\0\2\u01d6"+
    "\4\0\4\u01d6\2\0\1\u01d6\10\0\1\u01d6\3\0\1\u01d6"+
    "\25\0\2\u01d6\11\0\2\u016a\1\0\1\u016a\10\0\1\u016a"+
    "\13\0\1\u016a\2\0\1\u016a\1\0\7\u016a\1\u01d7\1\u016a"+
    "\37\0\4\u016a\1\u01d8\31\u016a\1\u016c\4\u016a\1\u01d9\46\u016a"+
    "\1\u01d8\31\u016a\1\u01a4\4\u016a\1\u01a5\42\u016a\4\u01a6\1\u01ab"+
    "\4\u01a6\2\u01da\2\u01a6\2\u01da\4\u01a6\4\u01da\2\u01a6\1\u01da"+
    "\4\u01a6\1\u01a4\3\u01a6\1\u01da\1\u01ac\2\u01a6\1\u01da\25\u01a6"+
    "\2\u01da\10\u01a6\1\0\2\u01a6\1\0\1\u01a6\10\0\1\u01a6"+
    "\13\0\1\u01a6\2\0\1\u01a6\1\0\7\u01a6\1\u01db\1\u01a6"+
    "\37\0\36\u01a6\1\u01a4\4\u01a6\1\u01dc\42\u01a6\36\u016a\1\u01a4"+
    "\4\u016a\1\u011e\42\u016a\11\0\2\u01dd\2\0\2\u01dd\4\0"+
    "\4\u01dd\2\0\1\u01dd\10\0\1\u01dd\3\0\1\u01dd\25\0"+
    "\2\u01dd\10\0\4\u0126\1\u016f\37\u0126\1\u01de\105\u0126\1\u0123"+
    "\41\u0126\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\2\43\1\u01df\1\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\2\43\1\u01e0"+
    "\10\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\2\43\1\u01e1"+
    "\10\43\11\0\2\43\1\u01e2\13\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\1\43\1\u01e3"+
    "\11\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\2\43\1\u01e4\1\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\u01e5\3\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\2\43"+
    "\1\u01e6\1\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\2\43\1\u01e7\10\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\1\43"+
    "\1\u01e8\2\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\10\43\1\u01e9\2\43"+
    "\11\0\10\43\1\u01ea\5\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\2\125\2\0\2\125\4\0\4\125\2\0\1\125"+
    "\10\0\1\125\3\0\1\125\25\0\2\125\21\0\2\350"+
    "\2\0\2\350\4\0\4\350\2\0\1\350\10\0\1\350"+
    "\3\0\1\350\25\0\2\350\10\0\1\u018c\2\u014c\1\u018c"+
    "\1\u018d\1\u014d\1\u01eb\27\u018c\1\u014c\50\u018c\1\u014c\2\u018c"+
    "\1\u018d\1\u014c\1\u01c5\27\u018c\1\u014c\47\u018c\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\7\43\1\u01ec\3\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\1\43\1\u01ed\11\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\2\43\1\u01ee\10\43\11\0\14\43"+
    "\1\u01ef\1\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\2\43\1\u01f0\1\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\4\43\2\0\2\43"+
    "\2\0\1\43\21\0\4\43\1\u01f1\6\43\11\0\14\43"+
    "\1\u01f2\1\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\16\43"+
    "\2\0\3\43\1\0\1\43\1\0\1\u01f3\3\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\2\u01f4\2\0"+
    "\2\u01f4\4\0\4\u01f4\2\0\1\u01f4\10\0\1\u01f4\3\0"+
    "\1\u01f4\25\0\2\u01f4\21\0\2\275\2\0\2\275\4\0"+
    "\4\275\2\0\1\275\10\0\1\275\3\0\1\275\25\0"+
    "\2\275\21\0\2\u01f5\2\0\2\u01f5\4\0\4\u01f5\2\0"+
    "\1\u01f5\10\0\1\u01f5\3\0\1\u01f5\25\0\2\u01f5\10\0"+
    "\4\u016a\1\u01a7\31\u016a\1\u01a4\4\u016a\1\u01f6\42\u016a\4\u01a6"+
    "\1\u01ab\4\u01a6\2\u01f7\2\u01a6\2\u01f7\4\u01a6\4\u01f7\2\u01a6"+
    "\1\u01f7\4\u01a6\1\u01a4\3\u01a6\1\u01f7\1\u01ac\2\u01a6\1\u01f7"+
    "\25\u01a6\2\u01f7\10\u01a6\11\0\2\u01f8\2\0\2\u01f8\4\0"+
    "\4\u01f8\2\0\1\u01f8\10\0\1\u01f8\3\0\1\u01f8\25\0"+
    "\2\u01f8\10\0\36\u01a6\1\u01a4\4\u01a6\1\0\42\u01a6\11\0"+
    "\2\302\2\0\2\302\4\0\4\302\2\0\1\302\10\0"+
    "\1\302\3\0\1\302\25\0\2\302\10\0\44\u0126\1\u01f9"+
    "\41\u0126\11\0\14\43\1\u01fa\1\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\2\43\1\u01fb\1\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\14\43\1\u01fc\1\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\2\43\1\u01fd"+
    "\10\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\1\u01fe\1\43\2\0\1\43\21\0\13\43"+
    "\11\0\4\43\1\u01ff\11\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\5\43\1\u0200\5\43"+
    "\11\0\6\43\1\u0201\7\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\2\43\1\u0202\10\43"+
    "\11\0\14\43\1\u0203\1\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\1\u0204"+
    "\3\43\2\0\2\43\2\0\1\43\21\0\13\43\11\0"+
    "\16\43\2\0\3\43\1\0\1\43\1\0\1\u0205\3\43"+
    "\2\0\2\43\2\0\1\43\21\0\13\43\11\0\2\276"+
    "\2\0\2\276\4\0\4\276\2\0\1\276\10\0\1\276"+
    "\3\0\1\276\25\0\2\276\21\0\2\u0206\2\0\2\u0206"+
    "\4\0\4\u0206\2\0\1\u0206\10\0\1\u0206\3\0\1\u0206"+
    "\25\0\2\u0206\10\0\36\u016a\1\u01a4\4\u016a\1\u0207\42\u016a"+
    "\4\u01a6\1\u01ab\4\u01a6\2\u0208\2\u01a6\2\u0208\4\u01a6\4\u0208"+
    "\2\u01a6\1\u0208\4\u01a6\1\u01a4\3\u01a6\1\u0208\1\u01ac\2\u01a6"+
    "\1\u0208\25\u01a6\2\u0208\10\u01a6\11\0\2\u0209\2\0\2\u0209"+
    "\4\0\4\u0209\2\0\1\u0209\10\0\1\u0209\3\0\1\u0209"+
    "\25\0\2\u0209\21\0\14\43\1\u020a\1\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\2\43\1\u020b\1\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\14\43\1\u020c\1\43\2\0\3\43"+
    "\1\0\1\43\1\0\4\43\2\0\2\43\2\0\1\43"+
    "\21\0\13\43\11\0\16\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\1\u020d"+
    "\12\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\1\u020e\3\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\14\43\1\u020f\1\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\14\43\1\u0210\1\43\2\0\3\43\1\0\1\43"+
    "\1\0\4\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\4\43"+
    "\2\0\2\43\2\0\1\43\21\0\5\43\1\u0211\5\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\2\43"+
    "\1\u0212\1\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\16\43\2\0\3\43\1\0\1\43\1\0\2\43"+
    "\1\u0213\1\43\2\0\2\43\2\0\1\43\21\0\13\43"+
    "\11\0\2\u0214\2\0\2\u0214\4\0\4\u0214\2\0\1\u0214"+
    "\10\0\1\u0214\3\0\1\u0214\25\0\2\u0214\10\0\4\u01a6"+
    "\1\u01ab\4\u01a6\2\u016a\2\u01a6\2\u016a\4\u01a6\4\u016a\2\u01a6"+
    "\1\u016a\4\u01a6\1\u01a4\3\u01a6\1\u016a\1\u01ac\2\u01a6\1\u016a"+
    "\25\u01a6\2\u016a\10\u01a6\11\0\2\u0215\2\0\2\u0215\4\0"+
    "\4\u0215\2\0\1\u0215\10\0\1\u0215\3\0\1\u0215\25\0"+
    "\2\u0215\21\0\12\43\1\u0216\3\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\10\43\1\u0217\5\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\4\43\1\u0218\11\43\2\0\3\43\1\0"+
    "\1\43\1\0\4\43\2\0\2\43\2\0\1\43\21\0"+
    "\13\43\11\0\16\43\2\0\3\43\1\0\1\43\1\0"+
    "\4\43\2\0\2\43\2\0\1\43\21\0\4\43\1\u0219"+
    "\6\43\11\0\2\u016a\2\0\2\u016a\4\0\4\u016a\2\0"+
    "\1\u016a\10\0\1\u016a\3\0\1\u016a\25\0\2\u016a\21\0"+
    "\2\u01a6\2\0\2\u01a6\4\0\4\u01a6\2\0\1\u01a6\10\0"+
    "\1\u01a6\3\0\1\u01a6\25\0\2\u01a6\21\0\16\43\2\0"+
    "\3\43\1\0\1\43\1\0\4\43\2\0\2\43\2\0"+
    "\1\43\21\0\11\43\1\u021a\1\43\11\0\14\43\1\u021b"+
    "\1\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43\11\0\12\43\1\u021c"+
    "\3\43\2\0\3\43\1\0\1\43\1\0\4\43\2\0"+
    "\2\43\2\0\1\43\21\0\13\43";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26810];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\6\0\1\1\10\0\1\1\6\0\1\11"+
    "\1\1\1\11\20\1\1\11\6\1\2\11\2\1\6\11"+
    "\2\1\1\11\4\1\2\11\11\1\1\11\2\1\1\11"+
    "\3\1\2\11\3\1\1\11\1\1\5\11\1\1\1\11"+
    "\2\1\2\11\2\1\3\11\1\1\1\11\2\1\2\11"+
    "\1\1\5\11\4\1\1\11\2\1\1\11\1\1\3\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\0\3\1\1\11"+
    "\1\1\2\11\1\1\6\11\2\0\15\1\5\11\1\0"+
    "\1\1\1\11\12\1\2\0\1\11\2\1\1\0\1\1"+
    "\2\11\1\1\1\11\1\1\1\0\1\11\1\0\6\11"+
    "\20\1\3\0\1\1\13\0\2\1\1\0\6\1\1\0"+
    "\2\1\1\11\1\1\1\0\17\1\2\11\14\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\4\11\1\0\24\1\2\0\2\11\1\0\10\1\2\11"+
    "\30\1\3\0\4\1\1\0\1\1\1\0\1\11\24\1"+
    "\3\0\5\1\1\11\1\0\21\1\3\0\1\11\2\0"+
    "\3\1\5\0\1\1\1\0\21\1\2\0\3\1\1\0"+
    "\15\1\12\0\25\1\5\0\15\1\1\0\1\1\2\0"+
    "\12\1\2\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;
  private int afterNls = YYINITIAL;
  private int afterBrace = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  public _GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GroovyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1334) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { gStringStack.clear();
                                             yybegin(IN_WRONG_SINGLE_GSTRING);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 177: break;
        case 8: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR);
          }
        case 178: break;
        case 84: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mNOT_EQUAL);
          }
        case 179: break;
        case 64: 
          { blockStack.push(mLCURLY);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return(mLCURLY);
          }
        case 180: break;
        case 6: 
          { return mWS;
          }
        case 181: break;
        case 134: 
          { return( kTRUE );
          }
        case 182: break;
        case 133: 
          { return( kNULL );
          }
        case 183: break;
        case 48: 
          { yybegin(IN_TRIPLE_GSTRING_DOLLAR);
                                             return mGSTRING_SINGLE_CONTENT;
          }
        case 184: break;
        case 1: 
          { gStringStack.clear();
                                             yybegin(YYINITIAL);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 185: break;
        case 27: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMMA);
          }
        case 186: break;
        case 132: 
          { return( kENUM );
          }
        case 187: break;
        case 93: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDEC);
          }
        case 188: break;
        case 96: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_INCLUSIVE);
          }
        case 189: break;
        case 83: 
          { return mSH_COMMENT;
          }
        case 190: break;
        case 68: 
          { return mWRONG_REGEX_LITERAL;
          }
        case 191: break;
        case 127: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSR_ASSIGN);
          }
        case 192: break;
        case 69: 
          { yybegin(IN_REGEX_DOT);
                                             return mIDENT;
          }
        case 193: break;
        case 10: 
          { return mIDENT;
          }
        case 194: break;
        case 29: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGT);
          }
        case 195: break;
        case 149: 
          { return( kSUPER );
          }
        case 196: break;
        case 53: 
          { yypushback(yytext().length());
                                             yybegin(IN_TRIPLE_IDENT);
          }
        case 197: break;
        case 79: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDIV_ASSIGN);
          }
        case 198: break;
        case 174: 
          { return( kINSTANCEOF );
          }
        case 199: break;
        case 103: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mEQUAL);
          }
        case 200: break;
        case 22: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLPAREN);
          }
        case 201: break;
        case 17: 
          { return mWRONG_STRING_LITERAL;
          }
        case 202: break;
        case 26: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOLON);
          }
        case 203: break;
        case 55: 
          { yypushback(1);
                                             yybegin(KING_STATE_INNER);
          }
        case 204: break;
        case 159: 
          { return( kSTATIC );
          }
        case 205: break;
        case 148: 
          { return( kCATCH );
          }
        case 206: break;
        case 58: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 207: break;
        case 33: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR);
          }
        case 208: break;
        case 61: 
          { return mREGEX_CONTENT;
          }
        case 209: break;
        case 31: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD);
          }
        case 210: break;
        case 28: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLT);
          }
        case 211: break;
        case 173: 
          { return( kPROTECTED );
          }
        case 212: break;
        case 116: 
          { return mNUM_BIG_DECIMAL;
          }
        case 213: break;
        case 81: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSPREAD_DOT);
          }
        case 214: break;
        case 45: 
          { yybegin(IN_SINGLE_GSTRING_DOLLAR);
                                             return mGSTRING_SINGLE_CONTENT;
          }
        case 215: break;
        case 153: 
          { return( kDOUBLE );
          }
        case 216: break;
        case 41: 
          { yybegin(IN_TRIPLE_DOT);
                                             return mIDENT;
          }
        case 217: break;
        case 39: 
          { blockStack.push(mLPAREN);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 218: break;
        case 122: 
          { return( kNEW );
          }
        case 219: break;
        case 66: 
          { yypushback(yytext().length());
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
          }
        case 220: break;
        case 154: 
          { return( kNATIVE );
          }
        case 221: break;
        case 97: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMEMBER_POINTER);
          }
        case 222: break;
        case 23: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRPAREN);
          }
        case 223: break;
        case 117: 
          { return( kFOR );
          }
        case 224: break;
        case 140: 
          { return( kCHAR );
          }
        case 225: break;
        case 152: 
          { return( kIMPORT );
          }
        case 226: break;
        case 101: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mOPTIONAL_DOT);
          }
        case 227: break;
        case 111: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND_ASSIGN);
          }
        case 228: break;
        case 72: 
          { yypushback(yytext().length());
                                             yybegin(IN_REGEX);
          }
        case 229: break;
        case 163: 
          { return( kEXTENDS );
          }
        case 230: break;
        case 12: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS);
          }
        case 231: break;
        case 5: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = WAIT_FOR_REGEX;
                                             return !braceCount.isEmpty() &&
                                                 mLPAREN == braceCount.peek() ? mWS : mNLS;
          }
        case 232: break;
        case 104: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_FIND);
          }
        case 233: break;
        case 30: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBNOT);
          }
        case 234: break;
        case 109: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBOR_ASSIGN);
          }
        case 235: break;
        case 161: 
          { return( kFINALLY );
          }
        case 236: break;
        case 110: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLOR);
          }
        case 237: break;
        case 82: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_ASSIGN);
          }
        case 238: break;
        case 141: 
          { return( kVOID );
          }
        case 239: break;
        case 157: 
          { return( kPUBLIC );
          }
        case 240: break;
        case 131: 
          { return( kELSE );
          }
        case 241: break;
        case 47: 
          { clearStacks();
                                             yybegin(WRONG_STRING);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 242: break;
        case 42: 
          { blockStack.push(mLBRACK);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 243: break;
        case 100: 
          { return mSTRING_LITERAL;
          }
        case 244: break;
        case 94: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS_ASSIGN);
          }
        case 245: break;
        case 95: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCLOSABLE_BLOCK_OP);
          }
        case 246: break;
        case 175: 
          { return( kIMPLEMENTS );
          }
        case 247: break;
        case 107: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMOD_ASSIGN);
          }
        case 248: break;
        case 20: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mQUESTION);
          }
        case 249: break;
        case 11: 
          { return mNUM_INT;
          }
        case 250: break;
        case 171: 
          { return( kINTERFACE );
          }
        case 251: break;
        case 35: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSEMI);
          }
        case 252: break;
        case 166: 
          { return( kPACKAGE );
          }
        case 253: break;
        case 145: 
          { return( kTHROW );
          }
        case 254: break;
        case 21: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mASSIGN);
          }
        case 255: break;
        case 90: 
          { return( kIN );
          }
        case 256: break;
        case 77: 
          { return mSL_COMMENT;
          }
        case 257: break;
        case 136: 
          { return( kBYTE );
          }
        case 258: break;
        case 112: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLAND);
          }
        case 259: break;
        case 129: 
          { if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return(mREGEX_LITERAL);
          }
        case 260: break;
        case 15: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDOLLAR);
          }
        case 261: break;
        case 32: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR);
          }
        case 262: break;
        case 7: 
          { if (zzStartRead == 0 ||
                                                 zzBuffer.subSequence(0, zzStartRead).toString().trim().length() == 0) {
                                                yypushback(1);
                                                yybegin(WAIT_FOR_REGEX);
                                             } else {
                                               return(mDIV);
                                             }
          }
        case 263: break;
        case 176: 
          { return( kSYNCHRONIZED );
          }
        case 264: break;
        case 126: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSL_ASSIGN);
          }
        case 265: break;
        case 59: 
          { yybegin(KING_STATE);
                                             return mREGEX_BEGIN;
          }
        case 266: break;
        case 123: 
          { return( kTRY );
          }
        case 267: break;
        case 13: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mMINUS);
          }
        case 268: break;
        case 14: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mDOT);
          }
        case 269: break;
        case 139: 
          { return( kCASE );
          }
        case 270: break;
        case 50: 
          { yybegin(IN_SINGLE_IDENT);
                                             return mDOT;
          }
        case 271: break;
        case 88: 
          { return mNUM_DOUBLE;
          }
        case 272: break;
        case 162: 
          { return( kDEFAULT );
          }
        case 273: break;
        case 124: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mREGEX_MATCH);
          }
        case 274: break;
        case 3: 
          { gStringStack.clear();
                                             yybegin(YYINITIAL);
                                             return mWRONG_REGEX_LITERAL;
          }
        case 275: break;
        case 172: 
          { return( kTRANSIENT );
          }
        case 276: break;
        case 62: 
          { yybegin(KING_STATE_CONTENT);
                                             return mREGEX_CONTENT;
          }
        case 277: break;
        case 91: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mINC);
          }
        case 278: break;
        case 114: 
          { return GROOVY_DOC_COMMENT;
          }
        case 279: break;
        case 37: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             clearStacks();
                                             return mNLS;
          }
        case 280: break;
        case 160: 
          { return( kSWITCH );
          }
        case 281: break;
        case 19: 
          { if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRCURLY);
          }
        case 282: break;
        case 99: 
          { return mGSTRING_LITERAL;
          }
        case 283: break;
        case 24: 
          { yybegin(WAIT_FOR_REGEX);
                                             braceCount.push(mLPAREN);
                                             return(mLBRACK);
          }
        case 284: break;
        case 76: 
          { yypushback(yytext().length());
                                              yybegin(NLS_AFTER_COMMENT);
          }
        case 285: break;
        case 49: 
          { yypushback(yytext().length());
                                             yybegin(IN_SINGLE_GSTRING);
          }
        case 286: break;
        case 142: 
          { return( kFLOAT );
          }
        case 287: break;
        case 138: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBSR_ASSIGN);
          }
        case 288: break;
        case 75: 
          { yypushback(yytext().length());
                                              yybegin(WAIT_FOR_REGEX);
          }
        case 289: break;
        case 89: 
          { return( kIF );
          }
        case 290: break;
        case 51: 
          { yypushback(yytext().length());
                                             yybegin(IN_TRIPLE_GSTRING);
          }
        case 291: break;
        case 102: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mELVIS);
          }
        case 292: break;
        case 143: 
          { return( kFINAL );
          }
        case 293: break;
        case 38: 
          { yybegin(IN_SINGLE_DOT);
                                             return mIDENT;
          }
        case 294: break;
        case 106: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mGE);
          }
        case 295: break;
        case 156: 
          { return( kTHROWS );
          }
        case 296: break;
        case 86: 
          { return mNUM_FLOAT;
          }
        case 297: break;
        case 120: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mTRIPLE_DOT);
          }
        case 298: break;
        case 137: 
          { yybegin(IN_TRIPLE_GSTRING_DOLLAR);
                                                              gStringStack.push(mLBRACK);
                                                              return mGSTRING_SINGLE_BEGIN;
          }
        case 299: break;
        case 56: 
          { yypushback(yytext().length());
                                             gStringStack.push(mDIV);       // For regexes
                                             yybegin(IN_REGEX_DOLLAR);
          }
        case 300: break;
        case 118: 
          { return( kINT );
          }
        case 301: break;
        case 169: 
          { return( kSTRICTFP );
          }
        case 302: break;
        case 98: 
          { yybegin(IN_SINGLE_GSTRING_DOLLAR);
                                                              gStringStack.push(mLPAREN);
                                                              return mGSTRING_SINGLE_BEGIN;
          }
        case 303: break;
        case 16: 
          { return mWRONG_GSTRING_LITERAL;
          }
        case 304: break;
        case 74: 
          { yypushback(yytext().length());
                                              yybegin(afterComment);
          }
        case 305: break;
        case 167: 
          { return( kABSTRACT );
          }
        case 306: break;
        case 144: 
          { return( kFALSE );
          }
        case 307: break;
        case 113: 
          { return( kAS );
          }
        case 308: break;
        case 54: 
          { yybegin(NLS_AFTER_NLS);
                                             afterComment = IN_TRIPLE_IDENT;
                                             return mNLS;
          }
        case 309: break;
        case 121: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mRANGE_EXCLUSIVE);
          }
        case 310: break;
        case 168: 
          { return( kCONTINUE );
          }
        case 311: break;
        case 36: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mAT);
          }
        case 312: break;
        case 130: 
          { return( kLONG );
          }
        case 313: break;
        case 87: 
          { return mNUM_LONG;
          }
        case 314: break;
        case 146: 
          { return( kBREAK );
          }
        case 315: break;
        case 105: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLE);
          }
        case 316: break;
        case 164: 
          { return( kBOOLEAN );
          }
        case 317: break;
        case 158: 
          { return( kASSERT );
          }
        case 318: break;
        case 2: 
          { yybegin(YYINITIAL);
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 319: break;
        case 73: 
          { yybegin(IN_REGEX_IDENT);
                                             return mDOT;
          }
        case 320: break;
        case 65: 
          { if (!blockStack.isEmpty()) {
                                               IElementType br = blockStack.pop();
                                               if (br.equals(mLPAREN)) yybegin(IN_SINGLE_GSTRING);
                                               if (br.equals(mLBRACK)) yybegin(IN_TRIPLE_GSTRING);
                                               if (br.equals(mDIV)) yybegin(IN_REGEX);
                                             }
                                             if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return mRCURLY;
          }
        case 321: break;
        case 135: 
          { return( kTHIS );
          }
        case 322: break;
        case 165: 
          { return( kPRIVATE );
          }
        case 323: break;
        case 60: 
          { yypushback(1);
                                             yybegin(KING_STATE_INNER_CONTENT);
          }
        case 324: break;
        case 150: 
          { return( kSHORT );
          }
        case 325: break;
        case 25: 
          { if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
                                               braceCount.pop();
                                             }
                                             return(mRBRACK);
          }
        case 326: break;
        case 18: 
          { yybegin(NLS_AFTER_LBRACE);
                                             braceCount.push(mLCURLY);
                                             return(mLCURLY);
          }
        case 327: break;
        case 170: 
          { return( kVOLATILE );
          }
        case 328: break;
        case 63: 
          { yypushback(yytext().length());
                                             yybegin(YYINITIAL);
          }
        case 329: break;
        case 40: 
          { clearStacks();
                                             return mWRONG_GSTRING_LITERAL;
          }
        case 330: break;
        case 52: 
          { yybegin(IN_TRIPLE_NLS);
                                             return mDOT;
          }
        case 331: break;
        case 9: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mLNOT);
          }
        case 332: break;
        case 80: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR);
          }
        case 333: break;
        case 85: 
          { return mNUM_BIG_INT;
          }
        case 334: break;
        case 71: 
          { if (!gStringStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mREGEX_END;
          }
        case 335: break;
        case 147: 
          { return( kCLASS );
          }
        case 336: break;
        case 92: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mPLUS_ASSIGN);
          }
        case 337: break;
        case 34: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBAND);
          }
        case 338: break;
        case 125: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mCOMPARE_TO);
          }
        case 339: break;
        case 108: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mBXOR_ASSIGN);
          }
        case 340: break;
        case 128: 
          { if (!gStringStack.isEmpty()){
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_SINGLE_END;
          }
        case 341: break;
        case 67: 
          { afterComment = YYINITIAL;
                                             return(mWS);
          }
        case 342: break;
        case 155: 
          { return( kRETURN );
          }
        case 343: break;
        case 57: 
          { return mREGEX_BEGIN;
          }
        case 344: break;
        case 115: 
          { yybegin(WAIT_FOR_REGEX);
                                             return(mSTAR_STAR_ASSIGN);
          }
        case 345: break;
        case 46: 
          { if (!blockStack.isEmpty()) {
                                               gStringStack.pop();
                                             }
                                             if (blockStack.isEmpty()){
                                               yybegin(YYINITIAL);
                                             } else {
                                               yybegin(IN_INNER_BLOCK);
                                             }
                                             return mGSTRING_SINGLE_END;
          }
        case 346: break;
        case 119: 
          { return( kDEF );
          }
        case 347: break;
        case 43: 
          { clearStacks();
                                             yybegin(NLS_AFTER_NLS);
                                             afterComment = YYINITIAL;
                                             return mNLS;
          }
        case 348: break;
        case 70: 
          { blockStack.push(mDIV);
                                             braceCount.push(mLCURLY);
                                             yybegin(NLS_AFTER_LBRACE);
                                             return mLCURLY;
          }
        case 349: break;
        case 151: 
          { return( kWHILE );
          }
        case 350: break;
        case 4: 
          { return mWRONG;
          }
        case 351: break;
        case 78: 
          { return mML_COMMENT;
          }
        case 352: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
