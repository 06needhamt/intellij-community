add.action.name=Add
add.adding=Adding files...
annotate.action.name=Annotate
changes.retrieving=Retrieving Changes for Revision {0}
checking.out=Checkout {0}
commit.action.name=Comm&it
commit.author.diffs=<html>Author differs from default</html>
commit.author=&Author:
commit.partial.merge.message=Partial commit during a {0} is not allowed.\n\
  The following files are not included in commit.\n\
  Perform commit with all files included?
commit.partial.merge.title=Partial Merge Commit
common.current.branch.tooltip=The currently checked out branch.
common.current.branch=Current Branch:
common.git.root.tooltip=Select Git VCS root
common.git.root=Git &Root:
common.no.active.branch=<no active branch>
common.refreshing=Refreshing Files
common.suffix.in.one.repository=in {0}
common.suffix.in.several.repositories=in {0} repositories

login.dialog.label.login.to.url=Log In to {0}
login.dialog.button.login=Log In
login.dialog.prompt.enter.credentials=Enter credentials:
login.dialog.select.login.way.credentials=Enter credentials
login.dialog.select.login.way.use.helper=Use credentials helper
login.dialog.username.label=Username:
login.dialog.password.label=Password:
login.dialog.error.username.cant.be.empty=Username cannot be empty
login.dialog.error.password.cant.be.empty=Password cannot be empty
login.dialog.login.with.selected.provider=Log In with {0}\u2026

computing.annotation=Computing annotation for {0}
diff.find.error=Finding revision for diff: {0}
error.dialog.title=Error
error.list.title={0} Error:
error.occurred.during=Error occurred during ''{0}''
errors.message.item=\n   {0}
errors.message=The Git operation ended with multiple errors:{0}

# suppress inspection "UnusedProperty": used by 3-party plugins
fetch.action.name=Fetch

# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.error.title=Error Running Git
# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.success.title=Git executed successfully
# suppress inspection "UnusedProperty": used by 3-party plugins
find.git.unsupported.message=<html><tt>{0}</tt><br>This version is unsupported, and some plugin functionality could fail to work.<br>The minimal supported version is <em>{1}</em>.</html>

git.error.exit=The Git process exited with the code {0}
git.running=Running: {0}

init.destination.directory.description=Select directory where the new Git repository will be created.
init.destination.directory.title=Create Git Repository
init.warning.already.under.git=<html>The selected directory <tt>{0}</tt> is already under Git.<br/>Are you sure that you want to create a new VCS root?</html>
init.warning.title=Git Init
initializing.title=Initializing repository...
merge.action.name=Merge
merge.add.log.information.tooltip=Add log information to the commit message (\"--log\" option)
merge.add.log.information=Add &log information
merge.branch.button=Merge
merge.branch.title=Merge Branches
merge.branches.tooltip=<html>The chooser for branches. Select one or more branches to merge (already merged branches are not shown)</html>.
merge.branches=&Branches to merge:
merge.commit.message.tooltip=The message for the merge commit in case one is created (\"-m\" option).
merge.commit.message=Commit &Message
merge.default.strategy=<default>
merge.no.commit.tooltip=Force no commit for merge (the \"--no-commit\" option)
merge.no.commit=No &commit
merge.no.fast.forward.tooltip=Disable fast forward (\"--no-ff\" option)
merge.no.fast.forward=No &fast forward
merge.retrieving.branches=Retrieving unmerged branches
merge.squash.commit=S&quash commit
merge.squash.tooltip=Squash all changes into the single commit (\"--squash\" option)
merge.strategy.tooltip=The merge strategy to use (\"-s\" option)
merge.strategy=&Strategy:
merge.tool.column.status.deleted=Deleted
merge.tool.column.status.modified=Modified
merge.tool.column.theirs.status=Theirs
merge.tool.column.yours.status=Yours
merging.title=Merging changes to {0}
paths.affected.title=Paths affected in commit {0}
pull.action.name=Pull
pull.button=Pull
pull.get.branches.tooltip=Get branch names from remote repository. Otherwise a locally cached information is used.
pull.getting.remote.branches=Getting Remote Branches...
pull.remote.tooltip=Registered remote name or URL.
pull.remote=Re&mote:
pull.title=Pull Changes
pulling.title=Pulling changes from {0}
operation.action.message=Multiple Git roots have unfinished {0} process, please select root to perform action on.

rebase.confirmation.dialog.published.commits.button.cancel.text=Cancel
rebase.confirmation.dialog.published.commits.button.rebase.text=Rebase Anyway
rebase.confirmation.dialog.published.commits.message=<html>You're trying to rebase some commits already pushed to a protected branch.<br/> Rebasing them would duplicate commits, which is not recommended and most likely unwanted.</html>
rebase.confirmation.dialog.published.commits.title=Rebasing Published Commit
rebase.conflict.diff.dialog.left.title=<html>Rebasing {0} from <b>{1}</b></html>
rebase.conflict.diff.dialog.right.simple.title=<html>Already rebased commits</html>
rebase.conflict.diff.dialog.right.with.branch.title=<html>Already rebased commits and commits from <b>{0}</b></html>
rebase.dialog.button.onto.validate.text=&Validate
rebase.dialog.button.validate.from.text=Va&lidate
rebase.dialog.button.validate.from.tooltip=Validate \"from\" reference
rebase.dialog.button.validate.onto.tooltip=Validate "onto" reference.
rebase.dialog.checkbox.interactive.text=&Interactive
rebase.dialog.checkbox.interactive.tooltip=If selected, the interactive rebase will be performed.
rebase.dialog.checkbox.preserve.merges.text=&Preserve Merges
rebase.dialog.checkbox.preserve.merges.tooltip=Preserve merges during rebase instead of squashing them.
rebase.dialog.checkbox.show.tags.text=Show &tags
rebase.dialog.checkbox.show.tags.tooltip=Show tags in \"from\" and \"onto\" comboboxes.
rebase.dialog.error.invalid.from=\"From\" reference expression is invalid.
rebase.dialog.error.invalid.onto=\"Onto\" reference expression is invalid.
rebase.dialog.error.rebase.in.progress=Interactive rebase has been already started for this Git root.
rebase.dialog.label.branch.text=&Branch:
rebase.dialog.label.branch.tooltip=Select branch to rebase (if branch is different from the current branch, it will be checked out first)
rebase.dialog.label.from.text=&From:
rebase.dialog.label.from.tooltip=Specify actual base for the branch. Leave blank to onto.
rebase.dialog.label.onto.text=&Onto:
rebase.dialog.label.onto.tooltip=The reference that will become a new base for selected branch.
rebase.dialog.progress.loading.branch.info=Loading Branch Configuration...
rebase.dialog.progress.loading.tags=Loading Tags...
rebase.dialog.start.rebase=Rebase
rebase.dialog.title=Rebase Branch
rebase.entry.action.name.drop=Drop
rebase.entry.action.name.edit=Edit
rebase.entry.action.name.fixup=Fixup
rebase.entry.action.name.pick=Pick
rebase.entry.action.name.reword=Reword
rebase.entry.action.name.squash=Squash
rebase.entry.action.name.unknown=Unknown
rebase.git.operation.name=Rebase
rebase.interactive.dialog.discard.modifications.cancel=Cancel Rebase
rebase.interactive.dialog.discard.modifications.continue=Continue Rebasing
rebase.interactive.dialog.discard.modifications.discard=Discard
rebase.interactive.dialog.discard.modifications.message=Discard changes and cancel rebase?
rebase.interactive.dialog.git.commands.column.action=Action
rebase.interactive.dialog.git.commands.column.hash=Hash
rebase.interactive.dialog.git.commands.column.subject=Subject
rebase.interactive.dialog.git.commands=Git Commands
rebase.interactive.dialog.reset.link.text=Reset
rebase.interactive.dialog.start.rebase=Start Rebasing
rebase.interactive.dialog.stop.to.edit.text=Stop to Edit
rebase.interactive.dialog.title=Rebasing Commits
rebase.interactive.dialog.view.git.commands.text=View Git Commands
rebase.notification.action.abort.text=Abort
rebase.notification.action.continue.text=Continue
rebase.notification.action.retry.text=Retry
rebase.notification.action.view.shelf.text=View Shelf...
rebase.notification.action.view.stash.text=View Stash...
rebase.notification.conflict.title=Rebase Stopped Due to Conflicts
rebase.notification.editing.title=Rebase Stopped for Editing
rebase.notification.failed.continue.title=Continue Rebase Failed
rebase.notification.failed.rebase.title=Rebase Failed
rebase.notification.failed.shelf.text=Couldn't shelve local uncommitted changes:<br/>{0}
rebase.notification.failed.stash.text=Couldn't stash local uncommitted changes:<br/>{0}
rebase.notification.not.started.title=Rebase Not Started
rebase.notification.saved.local.changes.part.shelf.text=<br/>Local changes were shelved before rebase.
rebase.notification.saved.local.changes.part.stash.text=<br/>Local changes were stashed before rebase.
rebase.notification.skipped.commits.part.text=<br/>The following {0,choice,1#commit|2#commits} {0,choice,1#was|2#were} skipped during rebase:<br/>{1}
rebase.notification.successful.title=Rebase Successful
rebase.progress.indicator.aborting.title=Aborting Rebase Process...
rebase.progress.indicator.conflicts.collecting.title=Collecting Conflicts to Resolve...
rebase.progress.indicator.continue.title=Continue Rebase Process...
rebase.progress.indicator.preparing.title=Preparing to Rebase...
rebase.progress.indicator.retry.title=Retry Rebase Process...
rebase.progress.indicator.title=Rebasing...

remove.removing=Removing files...
repository.action.missing.roots.misconfigured=None of configured Git roots are under Git. The configured directory must have ".git" directory in it.
repository.action.missing.roots.title=No Git Roots
repository.action.missing.roots.unconfigured.message=No Git roots are configured for the project.
repository.not.found.error=Can''t find configured git repository for {0}
reset.action.name=Reset Head ...
reset.commit.invalid=The specified commit expression did not pass validation.
reset.commit.label=To &Commit:
reset.commit.tooltip=The commit that will become the current HEAD\n as result of reset operation.
reset.title=Reset Head
reset.type.tooltip=<html>The reset type (see also <code>git reset</code> man page):<ul><li><b>Mixed</b> resets index but not working tree</li><li><b>Soft</b> leaves index and working tree, just moves head pointer</li><li><b>Hard</b> resets index and working tree.<em>Changes in the working tree will be lost</em></li></ul></html>
reset.type=Reset &Type:
reset.validate=&Validate
resetting.title=Resetting HEAD...
restore.conflict.diff.dialog.left.shelf.title=Uncommitted changes from the shelf
restore.conflict.diff.dialog.left.stash.title=Uncommitted changes from the stash
restore.notification.failed.shelf.message=Before update your uncommitted changes were saved to <a href='saver'>shelf</a>.<br/>Update is not complete, you have unresolved merges in your working tree<br/>Resolve conflicts, complete update and restore changes manually.
restore.notification.failed.stash.message=Before update your uncommitted changes were saved to <a href='saver'>stash</a>.<br/>Update is not complete, you have unresolved merges in your working tree<br/>Resolve conflicts, complete update and restore changes manually.
restore.notification.failed.title=Local changes were not restored
save.notification.failed.shelf.text=Tried to save uncommitted changes in shelf before {0}, but failed with an error.<br/>{1}
save.notification.failed.stash.text=Tried to save uncommitted changes in stash before {0}, but failed with an error.<br/>{1}
save.notification.failed.title=Couldn't save uncommitted changes
smart.operation.dialog.north.panel.label.shelf.text=<html>Your local changes to the following files would be overwritten by {0}.<br/> {1} can shelve the changes, {0} and unshelve them after that.</html>
smart.operation.dialog.north.panel.label.stash.text=<html>Your local changes to the following files would be overwritten by {0}.<br/> {1} can stash the changes, {0} and unstash them after that.</html>
smart.operation.dialog.ok.action.shelf.description=Shelve local changes, {0}, unshelve
smart.operation.dialog.ok.action.stash.description=Stash local changes, {0}, unstash
ssh.ask.passphrase.title=SSH Key Passphrase
ssh.ask.passphrase.message=Password for the SSH key "{0}":
ssh.changed.host.key=<html>The server host key for the host {0}:{1} has changed to {2} (type {3}).\nDo you want to accept the changed key?</html>
ssh.confirm.key.title=Confirm SSH Server Key
ssh.error.title=Authentication Error
ssh.keyboard.interactive.title=SSH Keyboard Interactive
ssh.keyboard.interactive.username=Username:
ssh.new.host.key=<html>Connecting to a new host {0}:{1,number,#} that has the key {2} (type {3}).\nDo you want to add this host to known hosts database?</html>
ssh.password.message=Password for user {0}:
ssh.password.title=SSH Password Login
stash.action.name=Stash
stash.button=Create Stash
stash.keep.index.tooltip=If this checkbox is selected, indexed changes are kept in the index.
stash.keep.index=Keep &index
stash.message.tooltip=Enter stash message here.
stash.message=&Message:
stash.title=Stash
stashing.title=Stashing Changes...
stash.error.can.not.stash.changes.now=Can not stash changes now

tag.action.name=Tag
tag.button=Create Tag
tag.commit.label=&Commit:
tag.commit.tooltip=Enter name of commit or object to tag or leave blank to use HEAD.
tag.error.creating.message.file.message=Unable to create message file: {0}
tag.error.invalid.commit=The commit or object name is invalid.
tag.error.tag.exists=The tag with the same name exists.
tag.force.tooltip=Force creation of the tag even if another tag with such name already exists.
tag.force=&Force
tag.getting.existing.tags=Getting Existing Tags...
tag.message.label=&Message:
tag.message.tooltip=If the message is not empty, an annotated tag is created.
tag.name.label=Tag &Name:
tag.name.tooltip=Enter the new tag name here.
tag.title=Tag
tag.validate.tooltip=Click this button to validate the commit to be tagged
tag.validate=&Validate

unstash.action.name=UnStash
unstash.branch.label\:=As new &branch:
unstash.branch.tooltip=If non-empty name is entered, the stash is checked out as a new branch.
unstash.button.apply=Apply Stash
unstash.button.branch=Branch
unstash.button.pop=Pop Stash
unstash.clear.tooltip=Delete all stashes in the repository.
unstash.clear=&Clear
unstash.clearing.stashes=Clearing Stashes...
unstash.drop.tooltip=Delete selected stash
unstash.drop=&Drop
unstash.pop.stash.tooltip=If selected the stash is dropped after it is applied.
unstash.pop.stash=&Pop stash
unstash.reinstate.index.tooltip=Attempt to reinstate index as well as working tree changes.
unstash.reinstate.index=Reinstate &index
unstash.stashes=&Stashes:
unstash.title=UnStash Changes
unstash.unstashing=Unstashing...
unstash.view.tooltip=View selected stash
unstash.view=&View
unstash.error.can.not.unstash.changes.now=Can not unstash changes now

update.options.display.name=Git Update Settings
update.options.type.default=Branch &Default
update.options.type.merge=&Merge
update.options.type=Update Type
util.remote.renderer.none=<html><i>None</i></html>
util.remote.renderer.self=<html><i>Current repository</i></html>
vfs.listener.add.single.prompt=Do you want to add the following file to Git?\n{0}\n\nIf you choose Cancel, you can still add it later manually.
vfs.listener.add.single.title=Add File to Git
vfs.listener.add.title=Add Files to Git
vfs.listener.checking.ignored=Checking for Ignored Files...
vfs.listener.delete.single.prompt=Do you want to delete the following file from Git?\n{0}\n\nIf you choose Cancel, you can still delete it later manually.
vfs.listener.delete.single.title=Delete File from Git
vfs.listener.delete.title=Delete Files from Git

git.commit.message.empty=Please specify commit message
git.commit.message.empty.title=Commit Message Is Empty

git.executable.version.progress.title=Identifying Git Version
git.executable.version.is=Git version is {0}

git.executable.validation.error.start.title=Cannot Run Git
git.executable.validation.error.version.title=Unsupported Git Version {0}
git.executable.validation.error.version.message=At least {0} is required
git.executable.validation.error.xcode.title=Accept XCode/iOS License to Run Git
git.executable.validation.error.xcode.message=Run \u201Csudo xcodebuild -license\u201D and retry (admin rights required)

git.executable.notification.title=Can't start Git
git.executable.notification.description=The path to Git executable is probably not valid.

executable.error.git.not.installed=Git is not installed
executable.mac.fix.path.action=Fix Path
executable.mac.error.invalid.path.to.command.line.tools=Invalid path to Command Line Tools

git.unstash.clear.confirmation.message=Remove all stashes? This cannot be undone.
git.unstash.clear.confirmation.title=Remove All Stashes?
git.unstash.drop.confirmation.message=<html>Do you want to remove {0}?<br/>"{1}"</html>
git.unstash.drop.confirmation.title=Remove Stash {0}?
vcs.history.action.gitlog=Show in Git Log

# suppress inspection "UnusedProperty": used by 3-party plugins
vcs.history.action.gitlog.error=Git Log is not Ready

# suppress inspection "UnusedProperty": used by ExportSettingsActionKt
exportable.Git.Application.Settings.presentable.name=Git

git.add.to.exclude.file.action.text=.git/info/exclude
git.add.to.exclude.file.action.description=Add entries to .git/info/exclude
git.open.exclude.file.action.text=Open .git/info/exclude
git.open.exclude.file.action.description=Open .git/info/exclude in editor

git.fetch.progress=Fetching...

action.CopyPathFromRepositoryRootProvider.text=Path From Repository Root
action.git4idea.commands.TestGitHttpLoginDialogAction.text=Test Git Login Dialog
action.Git.Log.DeepCompare.text=Not Cherry-Picked Commits
action.Git.Log.DeepCompare.description=Highlights commits which have not been cherry-picked to the current branch
group.Git.RepositoryContextMenu.text=_Repository
group.Git.ContextMenu.text=_Git
group.Git.Menu.text=_Git
action.Git.Rebase.Skip.text=Skip Commit
action.Git.Rebase.Continue.text=Continue Rebase
action.Git.Revert.Abort.text=Abort Revert
action.Git.CherryPick.Abort.text=Abort Cherry-Pick
action.Git.Merge.Abort.text=Abort Merge
action.Git.Rebase.Abort.text=Abort Rebase
action.Git.Rebase.text=Rebase...
action.Git.Pull.text=Pull...
action.Git.Fetch.text=Fetch
action.Git.Clone.text=Clone...
action.Git.Configure.Remotes.text=Remotes...
action.Git.Reset.text=Reset HEAD...
action.Git.Unstash.text=UnStash Changes...
action.Git.Stash.text=Stash Changes...
action.Git.Merge.text=Merge Changes...
action.Git.Tag.text=Tag...
action.Git.Branches.text=_Branches...
action.Git.ResolveConflicts.text=Resolve Conflicts...
action.Git.CompareWithBranch.text=Compare with Branch...
action.Git.Add.text=Add
action.Git.Commit.And.Push.Executor.text=Commit and &Push...
action.Git.Interactive.Rebase.text=Interactively Rebase from Here...
action.Git.Interactive.Rebase.description=Show the dialog for interactive rebase which allows to squash, fixup, reorder, remove and reword commits
action.Git.Squash.Into.Commit.text=Squash Into...
action.Git.Squash.Into.Commit.description=Create a squash commit
action.Git.Fixup.To.Commit.text=Fixup...
action.Git.Fixup.To.Commit.description=Create a fixup commit
action.Git.Rename.Local.Branch.text=Rename...
action.Git.Rename.Local.Branch.description=Rename a local branch
action.Git.New.Branch.description=Select only one branch to proceed create a new branch
action.Git.New.Branch.dialog.title=Create New Branch From {0}
action.Git.Update.Selected.text=Update Selected
action.Git.Update.Selected.description=Fetch remote tracking {0,choice,1#branch|2#branches} and fast-forward selected local {1,choice,1#branch|2#branches} (like `git fetch branch:branch`)
action.Git.Update.Selected.description.already.running=Update is already running
action.Git.Update.Selected.description.select.non.current=Select non current branches only
action.Git.Update.Selected.description.tracking.not.configured=Tracking branch doesn''t configured for selected {0,choice,1#branch|2#branches}
action.Git.Delete.Branch.title=Delete {0,choice,1#branch|2#branches}
action.Git.Compare.With.Current.title=Compare with Current
action.Git.Show.My.Branches.title=Show My Branches
action.Git.Show.My.Branches.description.not.support.indexing=Some of the repositories doesn't support indexing.
action.Git.Show.My.Branches.description.not.all.roots.indexed=Not all repositories are indexed.
action.Git.Show.My.Branches.description.not.graph.ready=The log is not ready yet, please wait a bit.
action.Git.Show.My.Branches.description.is.my.branch=A branch is 'My' if all exclusive commits of this branch are made by 'me', i.e. by current Git author.
action.Git.Show.My.Branches.description.calculating.branches.progress=Calculating My Branches
action.Git.Fetch.title=Fetch All Remotes
action.Git.Fetch.description.fetch.in.progress=Fetch in progress...
action.Git.Toggle.Favorite.title=Mark/Unmark As Favorite
action.Git.Loading.Branches.progress=Loading branches...
group.Git.Local.Branch.title=Local
group.Git.Remote.Branch.title=Remote
action.Git.Checkout.Branch.text=Checkout Selected...
action.Git.Checkout.Branch.description=Checkout selected branch
action.Git.Log.Hide.Branches.text=Hide Git Branches
action.Git.Log.Show.Branches.text=Branches
action.Git.Reword.Commit.text=Edit Commit Message...
action.Git.Reword.Commit.description=Change commit message via reword option of git rebase or amend
action.Git.Uncommit.text=Undo Commit...
action.Git.Uncommit.description=Undo last commit and put its changes into selected changelist
action.Git.Revert.In.Log.text=Revert Commit
action.Git.Revert.In.Log.description=Produce a new commit, which reverts the changes made in the original commit
action.Git.Reset.In.Log.text=Reset Current Branch to Here...
action.Git.CreateNewTag.text=New Tag...
action.Git.CreateNewTag.description=Create new tag pointing to this commit
action.Git.CreateNewBranch.text=New Branch...
action.Git.CreateNewBranch.description=Create new branch starting from the selected commit
group.Git.CheckoutGroup.text=Checkout
group.Git.CheckoutGroup.description=Checkout selected revision or a branch on selected commit
action.Git.BrowseRepoAtRevision.text=Show Repository at Revision
action.Git.Log.text=Show Git Repository Log...
action.Git.Init.text=Create Git Repository...
checkbox.dont.warn.again=Don't warn again
checkbox.run.git.hooks=Run Git hooks
action.NotificationAction.text.resolve=Resolve...
action.NotificationAction.GitDeleteBranchOperation.text.restore=Restore
action.NotificationAction.GitDeleteBranchOperation.text.view.commits=View Commits
action.NotificationAction.GitDeleteBranchOperation.text.delete.tracked.branch=Delete Tracked Branch
action.NotificationAction.GitDeleteTagOperation.text.restore=Restore
action.NotificationAction.GithubNotifications.text.configure=Configure...
action.NotificationAction.GitMergeAction.text.view.commits=View Commits
action.NotificationAction.GitRewordOperation.text.undo=Undo
action.NotificationAction.GitUpdateSession.text.view.commits=View Commits
settings.git.incoming.change.strategy.text.auto=Auto
settings.git.incoming.change.strategy.text.always=Always
settings.git.incoming.change.strategy.text.never=Never
settings.git.update.method.rebase.description=Rebase the current branch on top of incoming changes
settings.git.update.method.rebase=Rebase
settings.git.update.method.merge.description=Merge incoming changes into the current branch
settings.git.update.method.merge=Merge
settings.git.update.method.branch.default=Branch Default
clone.dialog.checking.git.version=Checking Git version...
push.dialog.push.tags=Push tags
push.dialog.push.tags.combo.current.branch=Current Branch
push.dialog.push.tags.combo.all=All
push.dialog.target.panel.define.remote=Define remote
push.dialog.target.panel.add.remote=Add Remote
push.dialog.target.panel.couldnt.add.remote=Couldn''t add remote: {0}
push.dialog.target.panel.adding.remote=Adding Remote...
push.dialog.target.panel.can.t.push=Can't push
push.dialog.target.panel.empty.repository=Empty repository
push.dialog.target.panel.detached.head=Detached HEAD
push.dialog.target.panel.new=New

install.download.and.install.action=Download and Install
install.installing.progress=Installing...
install.downloading.progress=Downloading...
install.success.message=Git has been installed
install.general.error=Couldn't install Git
install.mac.error.couldnt.start.command.line.tools=Couldn't start Command Line Tools installation
install.mac.requesting.command.line.tools=Requesting XCode Command Line Developer Tools

git.status.not.changed=Not Changed
git.status.renamed=Renamed
git.status.copied=Copied
git.status.type.changed=Type Changed
git.status.unmerged=Unmerged
git.status.untracked=Untracked
git.status.index={0} in the staging area
git.status.work.tree={0} in the working directory
git.status.unmerged.index={0} by us
git.status.unmerged.work.tree={0} by them
git.status.unmerged.both=both {0}

git.status.bar.widget.name=Git Branch

git.light.status.bar.display.name=Git
git.light.status.bar.tooltip=Current Git Branch: {0}
git.light.status.bar.text=Git: {0}
branches.selected.branches.updated.title=Selected {0,choice,1#branch|2#branches} Updated
branches.update.failed=Update Failed
branches.updating.process=Updating branches...
branches.checkout.failed.description=Can''t overwrite {0} branch because some commits can be lost
branches.creation.failed.title=New Branch Creation Failed
branches.checkout.failed.title=Checkout Failed
branches.checking.existing.commits.process=Checking Existing Commits...
branches.create.new.branch.dialog.title=Create New Branch
branches.tag.0=Tag ''{0}''
branches.branch.0=Branch ''{0}''
in.branches.all.repositories=In All Repositories
branches.tags=Tags
branches.branches=Branches
repositories=Repositories
common.remote.branches=Common Remote Branches
common.local.branches=Common Local Branches
update.checks.not.supported.git.2.9.required=Update Checks not Supported. Git 2.9+ Required
action.fetch.text=Fetch
fetching=Fetching...
branches.current.branch=current branch
branches.tracking.branch.doesn.t.configured.for.s=Tracking branch doesn''t configured for %s
branches.update.is.already.running=Update is already running
branches.fetch.remote.and.fast.forward=Fetch remote tracking branch and fast-forward %s (like `git fetch %s:%s`)
branches.update=Update
branches.checkout.and.rebase.onto.in.one.step=Checkout %s, and rebase it onto %s in one step (like `git rebase HEAD %s`)
branches.checkout.and.rebase.onto.current=Checkout and Rebase onto Current
branches.rebase.is.not.possible.in.the.detached.head.state=Rebase is not possible in the detached HEAD state
branches.rebase.onto=Rebase %s onto %s
branches.rebase.current.onto.selected=Rebase Current onto Selected
branches.merge.into=Merge %s into %s
branches.merge.into.current=Merge into Current
branches.compare.the.current.working.tree.with=Compare the current working tree with the tree in %1$s
branches.show.diff.with.working.tree=Show Diff with Working Tree
branches.show.commits.in=Show commits in %1$s that are missing in %2$s
branches.compare.with.current=Compare with Current
branches.new.branch.from.selected=New Branch from Selected...
branches.checkout.s=Checkout %s
checkout.and.rebase=Checkout and Rebase
checkout.0=Checkout {0}
branch.0.already.exists.and.has.commits.which.do.not.exist.in.1.would.you.like.to.rebase.or.reset.them=Branch {0} already exists and has commits which do not exist in {1}. Would you like to rebase or reset them?
branches.checkout=Checkout
branches.renaming.branch.is.not.possible.before.the.first.commit=Renaming branch is not possible before the first commit
branches.rename.branch=Rename Branch {0}
branches.there.are.outgoing.commits=There are outgoing commits
branches.there.are.incoming.commits=There are incoming commits
branches.there.are.incoming.and.outgoing.commits=There are incoming and outgoing commits
branches.checkout.is.not.possible.before.the.first.commit=Checkout is not possible before the first commit
branches.checkout.tag.or.revision=Checkout Tag or Revision...
branches.enter.reference.branch.tag.name.or.commit.hash=Enter reference (branch, tag) name or commit hash:
branches.remote.branches=Remote Branches{0}
branches.local.branches=Local Branches{0}
git.rollback=&Rollback

new.branch.dialog.operation.create.name=Create
new.branch.dialog.operation.create.description=Create new branches in other repositories
new.branch.dialog.operation.checkout.name=Checkout
new.branch.dialog.operation.checkout.description=Checkout existing branches, and create new branches in other repositories
new.branch.dialog.operation.rename.name=Rename
new.branch.dialog.branch.name=New branch name:
new.branch.dialog.checkout.branch.checkbox=Checkout branch
new.branch.dialog.overwrite.existing.branch.checkbox=Overwrite existing branch
new.branch.dialog.overwrite.existing.branch.warning=Change the name or overwrite existing branch
new.branch.dialog.error.branch.name.invalid=Branch name {0} is not valid
new.branch.dialog.error.branch.already.exists=Branch name {0} already exists
new.branch.dialog.error.branch.clashes.with.remote=Branch name {0} clashes with remote branch with the same name
git.reset.mode.soft=Soft
git.reset.mode.soft.description=Files won't change, differences will be staged for commit.
git.reset.mode.mixed=Mixed
git.reset.mode.mixed.description=Files won't change, differences won't be staged.
git.reset.mode.hard=Hard
git.reset.mode.hard.description=Files will be reverted to the state of the selected commit.<br>Warning: any local changes will be lost.
git.reset.mode.keep=Keep
git.reset.mode.keep.description=Files will be reverted to the state of the selected commit,<br>but local changes will be kept intact.
git.reset.dialog.title=Git Reset
git.reset.dialog.description=<nobr>This will reset the current branch head to the selected commit,<nobr/><br><nobr>and update the working tree and the index according to the selected mode:<nobr/>
git.reset.dialog.description.commit.details.by.author={0} by {1}
git.reset.dialog.description.source.in.repository={0} in {1}
git.reset.process=Git Reset
git.undo.action.cant.undo.commit.failure=Can''t Undo Commit
git.undo.action.description=The selected commit is not the last in the current branch
git.undo.action.select.target.changelist.title=Select Target Changelist
git.undo.action.undoing.last.commit.process=Undoing Last Commit...
git.undo.action.refreshing.changes.process=Refreshing Changes...
git.undo.action.could.not.load.changes.of.commit=Couldn''t load changes of {0}
git.new.tag.dialog.title=Create New Tag On {0}
git.new.tag.dialog.tag.name.label=Enter the name of new tag

git.log.external.tab.description=Log for {0}
git.log.external.window.title=Git Log
git.log.external.loading.process=Loading Git Log...

git.log.cherry.picked.highlighter.process=Comparing Branches...
git.log.cherry.picked.highlighter.error.message=Couldn''t compare with branch {0}
git.log.cherry.picked.highlighter.cancelled.message=Highlighting of non-picked commits has been cancelled

git.log.diff.handler.process=Calculating Diff for {0}
git.log.diff.handler.failed.message={0} failed
git.log.diff.handler.paths.diff.title=Changes between {0} and {1} in {2}
git.log.diff.handler.local.version.name=local version
git.log.diff.handler.local.version.content.title=Local

git.log.show.commit.in.log.process=Searching for Revision {0}