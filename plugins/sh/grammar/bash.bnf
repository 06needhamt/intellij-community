//noinspection BnfSuspiciousTokenForFile
{
  generate = [ token-accessors="yes" ]

  parserClass="com.intellij.bash.parser.BashParser"
  parserUtilClass="com.intellij.bash.parser.BashParserUtil"

  implements="com.intellij.bash.psi.BashCompositeElement"
  extends="com.intellij.bash.psi.impl.BashCompositeElementImpl"

  elementTypeHolderClass="com.intellij.bash.BashTypes"
  elementTypeClass="com.intellij.bash.psi.BashCompositeElementType"
  tokenTypeClass="com.intellij.bash.psi.BashTokenType"

  psiClassPrefix="Bash"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.bash.psi"
  psiImplPackage="com.intellij.bash.psi.impl"

  tokens = [
    DOLLAR = '$'
    LEFT_PAREN = '('
    RIGHT_PAREN = ')'
    LEFT_CURLY = '{'
    RIGHT_CURLY = '}'
    LEFT_SQUARE = '['
    RIGHT_SQUARE = ']'
    BANG = '!'
    BACKQUOTE = '`'

    LEFT_DOUBLE_BRACKET = "[["
    RIGHT_DOUBLE_BRACKET = "]]"

    BACKSLASH = '\\'
    AMP = '&'
    AT = '@'
    COLON = ':'
    COMMA = ','
    EQ = '='
    ADD_EQ = '+='
    SEMI = ';'
    SHIFT_RIGHT = '>>'
    LESS_THAN = '<'
    GREATER_THAN = '>'
    PIPE = '|'
    PIPE_AMP = '|&' //bash 4 only, equivalent to 2>&1 |
    AND_AND = '&&'
    OR_OR = '||'

    EXPONENT = '**'
    MULT = '*'
    DIV = '/'
    MOD = '%'
    SHIFT_LEFT = '<<'
    SHIFT_RIGHT = '>>'

    LINEFEED = '\n'
    CASE_END = ';;'

    ARITH_LE = '<='
    ARITH_GE = '>='
    ARITH_GT = 'arith >'
    ARITH_LT = 'arith <'
    ARITH_PLUS_PLUS = "++"
    ARITH_PLUS = "+"
    ARITH_MINUS_MINUS = "--"
    ARITH_MINUS = "-"

    LEFT_DOUBLE_PAREN = '(('
    RIGHT_DOUBLE_PAREN = '))'

    REDIRECT_HERE_STRING = "<<<"
    REDIRECT_LESS_AMP = "<&"
    REDIRECT_GREATER_AMP = ">&"
    REDIRECT_LESS_GREATER = "<>"
    REDIRECT_GREATER_BAR = ">|"
  ]

  pin('.*list(?:_\d.*)?')=1
  pin('.*_(command|clause)')=1
  extends(".*command")=command

  extends("(comma|assignment|conditional|logical_or|logical_and|bitwise_or|bitwise_exclusive_or|bitwise_and|equality|comparison|bitwise_shift|add|mul|exp)_expression")=binary_expression
  extends(".*expression")=expression
}

private file ::=
  shebang? newlines
  simple_list

private newlines ::= '\n'*
private simple_list ::= (commands_list ['&' | ';' | newlines])*
private word_list ::= w+
private w ::= word | vars | string | num | FILEDESCRIPTOR


redirection ::=    '>' w
                |  '<' w
                |  num '>' w
                |  num '<' w
                |  '>>' w
                |  num '>>' w
                |  '<<' w
                |  '<<<' w
                |  num '<<' w
                |  num '<<<' w
                |  '<&' num
                |  num '<&' num
                |  '>&' num
                |  num '>&' num
                |  '<&' w
                |  num '<&' w
                |  '>&' w
                |  num '>&' w
                |  '<<-' w
                |  num '<<-' w
                |  '>&' '-'
                |  num '>&' '-'
                |  '<&' '-'
                |  num '<&' '-'
                |  '&>' w
                |  num '<>' w
                |  '<>' w
                |  '>|' w
                |  num '>|' w

private num ::= number | int
string ::= (string_begin (string_content|vars)* string_end) | STRING2

private vars ::= variable | composed_var | command_substitution_command
private composed_var ::= '$' (arithmetic_expansion | old_arithmetic_expansion | command_substitution | shell_parameter_expansion) {pin=1}
private command_substitution ::= subshell_command // todo: rethink naming with command_substitution_command
shell_parameter_expansion ::= '{' (param_body | '[' param_body ']')*'}' {pin=1} // todo: simplify lexer for parameters
private param_body ::= literal | <<paramExpansionOp>>
bash_expansion ::=

command_substitution_command ::= !<<isModeOn "BACKQUOTE">> '`' <<withOn "BACKQUOTE" list?>> '`' {pin=2}

conditional_command ::= cond_left (<<condOp>> | lit | vars)* cond_right {pin(".*")=1}
private cond_right ::= EXPR_CONDITIONAL_RIGHT | ']]'
private cond_left ::= EXPR_CONDITIONAL_LEFT | '[['
private lit ::= literal | '(' lit ')' {pin(".*")=1}

process_substitution ::= ('<' | '>') '(' compound_list ')' {pin=1}

private literal ::= w | string | num
simple_command_element ::=  assignment_word_rule
                          | literal
                          | redirection
                          | composed_var
                          | heredoc
                          | conditional_command
                          | command_substitution_command
                          | arithmetic_expansion

assignment_list ::= '(' (<<backslash>> | array_assignment)* ')'
array_assignment ::= newlines '='? expression newlines

heredoc ::= HEREDOC_MARKER_TAG HEREDOC_MARKER_START ['|'? simple_command] newlines
            (HEREDOC_CONTENT | vars)*
            (HEREDOC_MARKER_END  | HEREDOC_MARKER_IGNORING_TABS_END | <<eof>>)
arithmetic_expansion ::= '((' expression '))' {pin=1}
old_arithmetic_expansion ::= ARITH_SQUARE_LEFT expression ARITH_SQUARE_RIGHT {pin=1 extends=arithmetic_expansion}
assignment_word_rule ::= (assignment_word | word) '=' [literal | composed_var | assignment_list] {pin=2}

redirection_list ::= redirection redirection*
simple_command ::= simple_command_element+
command ::= shell_command redirection_list? | simple_command

shell_command ::=   for_command
                  | case_command
                  | while_command
                  | until_command
                  | select_command
                  | if_command
                  | subshell_command
                  | block
                  | function_def

while_command ::= while compound_list do_block
until_command ::= until compound_list do_block

for_command ::= for (
                    w (newlines in_clause? any_block | ';' newlines any_block)
                  | arithmetic_for
                  )
private arithmetic_for ::= '((' expression ';' expression ';' expression '))' [list_terminator newlines] any_block {pin=1}

private in_clause ::= "in" word_list list_terminator newlines {pin=1}

private any_block ::= block | do_block
do_block ::= do  compound_list done {pin(".*")=1 extends=block}
block    ::= '{' compound_list '}'  {pin(".*")=1 extends=command}

select_command ::= select w (';'? newlines any_block | newlines in_clause any_block)

case_command ::= case w newlines "in" (case_clause_list newlines) esac {pin(".*")=1}

function_def ::=           word argument_list  newlines block
                | function word argument_list? newlines block {pin(".*")="function|argument_list"}
private argument_list ::= '(' ')'

subshell_command ::=  '(' list ')' {pin=1}

if_command ::= if compound_list then_clause
               elif_clause*
               else_clause?
               fi

elif_clause ::= elif compound_list then_clause
else_clause ::= else compound_list
then_clause ::= then compound_list

case_clause ::= pattern_list

pattern_list ::=   newlines pattern ')' compound_list
                 | newlines pattern ')' newlines
                 | newlines '(' pattern ')' compound_list
                 | newlines '(' pattern ')' newlines {pin=0}

private case_clause_list ::= (case_clause ';;')+

pattern ::=  w ('|' w)* {pin('.*')=1}

compound_list ::= newlines pipeline_command_list end_of_list  newlines {pin=2}
list ::=          newlines pipeline_command_list end_of_list? newlines {pin=2 elementType=compound_list}
private end_of_list ::= '\n' | ';' | '&'

private pipeline_command_list ::= pipeline_command (pipeline_command_list_separator pipeline_command)* {pin=1} // todo with pin
private pipeline_command_list_separator ::= ('&&'|  '||' |  '&' |  ';' |  '\n') newlines

list_terminator ::= '\n' | ';'

commands_list ::= pipeline_command (
                     '&&' newlines pipeline_command
                   | '||' newlines pipeline_command
                   | '&' pipeline_command
                   | ';' pipeline_command?
                 )*

pipeline_command ::=  '!'? pipeline
                    | timespec '!'? pipeline
                    | '!' timespec pipeline
                    | trap_command

pipeline ::= command ('|' newlines command)* {pin(".*")=1}

time_opt ::= '-p'
timespec ::= time time_opt?

trap_command ::= trap literal*

expression ::=
    comma_expression
  | assignment_expression
  | conditional_expression
  | logical_or_expression
  | logical_and_expression
  | bitwise_or_expression
  | bitwise_exclusive_or_expression
  | bitwise_and_expression
  | equality_expression
  | comparison_expression
  | bitwise_shift_expression
  | add_expression
  | mul_expression
  | exp_expression
  | logical_bitwise_negation_expression
  | unary_expression
  | pre_expression
  | post_expression
  | index_expression
  | array_expression
  | literal_expression
  | parentheses_expression

comma_expression ::= expression ',' expression
assignment_expression ::= expression ('=' |'*=' |'/=' |'%=' |'+=' |'-=' |'<<=' |'>>=' |'&=' |'^=' |'|=') expression
conditional_expression ::= expression '?' expression ':' expression
logical_or_expression ::= expression '||' expression
logical_and_expression ::= expression '&&' expression
bitwise_or_expression ::= expression '|' expression
bitwise_exclusive_or_expression ::= expression '^' expression
bitwise_and_expression ::= expression '&' expression
equality_expression ::= expression ('==' | '!=') expression
comparison_expression ::= expression ('<=' | '>=' | '<' | '>') expression
bitwise_shift_expression ::= expression ('<<' | '>>') expression
add_expression ::= expression ('+' | '-') expression
mul_expression ::= expression ('*' | '/' | '%') expression
exp_expression ::= expression '**' expression
fake binary_expression ::= expression+ { methods=[left="expression[0]" right="expression[1]"] }

logical_bitwise_negation_expression ::= ('!' | '~') expression
unary_expression ::= ('-' | '+') expression
pre_expression ::= ('--' | '++') expression
post_expression ::= expression ('--' | '++')
index_expression ::= expression '[' expression ']'
array_expression ::= '[' expression ']'
parentheses_expression ::= '(' expression ')' {pin=1}

literal_expression ::= literal | assignment_word