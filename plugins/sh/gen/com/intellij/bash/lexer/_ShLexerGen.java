/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.bash.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;
import com.intellij.lexer.FlexLexer;
import static com.intellij.bash.lexer.ShTokenTypes.*;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>sh.flex</tt>
 */
public class _ShLexerGen implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ARITHMETIC_EXPRESSION = 2;
  public static final int OLD_ARITHMETIC_EXPRESSION = 4;
  public static final int LET_EXPRESSION = 6;
  public static final int CONDITIONAL_EXPRESSION = 8;
  public static final int IF_CONDITION = 10;
  public static final int OTHER_CONDITIONS = 12;
  public static final int CASE_CONDITION = 14;
  public static final int CASE_PATTERN = 16;
  public static final int STRING_EXPRESSION = 18;
  public static final int REGULAR_EXPRESSION = 20;
  public static final int HERE_STRING = 22;
  public static final int HERE_DOC_START_MARKER = 24;
  public static final int HERE_DOC_END_MARKER = 26;
  public static final int HERE_DOC_PIPELINE = 28;
  public static final int HERE_DOC_BODY = 30;
  public static final int PARAMETER_EXPANSION = 32;
  public static final int PARENTHESES_COMMAND_SUBSTITUTION = 34;
  public static final int BACKQUOTE_COMMAND_SUBSTITUTION = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  2,  3,  4,  5,  6,  7,  0,  1,  0,  1,  8,  9, 
    10, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 18, 19, 20, 21, 21, 
    22, 22,  0,  1,  0, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14304 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\141\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\142\1\24"+
    "\45\12\1\143\1\12\1\24\1\27\4\12\1\27\1\144\1\145\1\15\1\12\1\15\1\12\1\15"+
    "\1\145\1\70\3\12\1\146\1\1\1\147\1\114\2\1\1\114\5\12\1\26\1\150\1\12\1\151"+
    "\4\12\1\37\1\12\1\152\2\1\1\64\1\12\1\153\1\154\2\12\1\155\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\154\2\1\2\114\1\156\5\1\1\107\2\12\1\146\1\157\1\114"+
    "\2\1\1\160\1\12\1\161\1\41\2\12\1\37\1\1\2\12\1\146\1\1\1\162\1\41\1\12\1"+
    "\153\1\45\5\1\1\163\1\164\14\12\4\1\21\12\1\142\2\12\1\142\1\165\1\12\1\153"+
    "\3\12\1\166\1\167\1\170\1\124\1\167\7\1\1\171\1\1\1\124\6\1\1\172\1\173\1"+
    "\174\1\175\1\176\3\1\1\177\147\1\2\12\1\152\2\12\1\152\10\12\1\200\1\201\2"+
    "\12\1\133\3\12\1\202\1\1\1\12\1\112\4\203\4\1\1\126\35\1\1\204\2\1\1\205\1"+
    "\24\4\12\1\206\1\24\4\12\1\134\1\107\1\12\1\153\1\24\4\12\1\152\1\1\1\12\1"+
    "\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1\2\12\1\153"+
    "\20\12\1\124\1\12\1\207\1\1\2\12\1\152\1\126\1\12\1\153\4\12\1\37\2\1\1\210"+
    "\1\211\5\12\1\212\1\12\1\152\1\26\3\1\1\210\1\213\1\12\1\30\1\1\3\12\1\146"+
    "\1\211\2\12\1\146\1\1\1\114\1\1\1\214\1\41\1\12\1\37\1\12\1\112\1\1\1\12\1"+
    "\124\1\47\2\12\1\30\1\126\1\114\1\215\1\216\2\12\1\45\1\1\1\217\1\114\1\12"+
    "\1\220\3\12\1\221\1\222\1\223\1\27\1\65\1\224\1\225\1\203\2\12\1\134\1\37"+
    "\7\12\1\30\1\114\72\12\1\146\1\12\1\226\2\12\1\155\20\1\26\12\1\153\6\12\1"+
    "\76\2\1\1\112\1\227\1\55\1\230\1\231\6\12\1\15\1\1\1\160\25\12\1\153\1\1\4"+
    "\12\1\211\2\12\1\26\2\1\1\155\7\1\1\215\7\12\1\124\1\1\1\114\1\24\1\27\1\24"+
    "\1\27\1\232\4\12\1\152\1\233\1\234\2\1\1\235\1\12\1\141\1\236\2\153\2\1\7"+
    "\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\237\2\12\1\37\1\12"+
    "\1\153\2\12\1\240\3\1\11\12\1\153\1\114\2\12\1\240\1\12\1\155\2\12\1\26\3"+
    "\12\1\146\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\241\2\12\1\242\1\12\1\37"+
    "\1\12\1\112\1\12\1\152\4\1\1\12\1\243\1\12\1\37\1\12\1\76\4\1\3\12\1\244\4"+
    "\1\1\70\1\245\1\12\1\146\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1\12\1\154\1"+
    "\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12"+
    "\1\30\60\1\1\160\2\12\1\26\2\1\1\64\1\1\1\160\2\12\2\1\1\12\1\45\1\114\1\160"+
    "\1\12\1\112\1\64\1\1\2\12\1\246\1\160\2\12\1\30\1\247\1\250\2\1\1\12\1\21"+
    "\1\155\5\1\1\251\1\252\1\45\2\12\1\152\1\1\1\114\1\72\1\54\1\55\1\67\1\1\1"+
    "\253\1\15\11\1\3\12\1\154\1\254\1\114\2\1\3\12\1\1\1\255\1\114\12\1\2\12\1"+
    "\152\2\1\1\256\2\1\3\12\1\1\1\257\1\114\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1"+
    "\76\1\1\1\114\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1\12\1\152\1"+
    "\1\1\70\1\114\1\1\1\211\1\12\67\1\71\12\1\76\16\1\14\12\1\146\53\1\2\12\1"+
    "\152\75\1\44\12\1\112\33\1\43\12\1\45\1\12\1\152\1\114\6\1\1\12\1\153\1\1"+
    "\3\12\1\1\1\146\1\114\1\160\1\260\1\12\67\1\4\12\1\154\1\70\3\1\1\160\4\1"+
    "\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124\1\45\1"+
    "\76\66\1\5\12\1\215\3\12\1\145\1\261\1\262\1\263\3\12\1\264\1\265\1\12\1\266"+
    "\1\267\1\35\24\12\1\270\1\12\1\35\1\134\1\12\1\134\1\12\1\215\1\12\1\215\1"+
    "\152\1\12\1\152\1\12\1\55\1\12\1\55\1\12\1\271\3\272\14\12\1\154\3\1\4\12"+
    "\1\146\1\114\112\1\1\263\1\12\1\273\1\274\1\275\1\276\1\277\1\300\1\301\1"+
    "\155\1\302\1\155\24\1\55\12\1\112\2\1\103\12\1\154\15\12\1\153\150\12\1\15"+
    "\25\1\41\12\1\153\36\1");

  /* The ZZ_CMAP_A table has 3120 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\45\1\1\1\0\1\4\1\2\22\0\1\5\1\7\1\10\1\6\1\22\1\55\1\37\1\11\1\35"+
    "\1\70\1\53\1\42\1\12\1\40\1\16\1\54\1\25\1\27\3\31\1\30\1\26\1\34\2\20\1\62"+
    "\1\46\1\56\1\41\1\47\1\23\1\24\6\33\21\17\1\32\2\17\1\100\1\3\1\101\1\60\1"+
    "\21\1\36\1\66\1\33\1\67\1\71\1\51\1\73\1\17\1\76\1\63\2\17\1\50\1\17\1\64"+
    "\1\72\2\17\1\74\1\65\1\52\1\75\1\17\1\77\1\32\2\17\1\43\1\57\1\44\1\61\13"+
    "\0\1\15\12\0\1\15\4\0\1\15\5\0\27\15\1\14\12\15\4\0\14\15\16\0\5\15\7\0\1"+
    "\15\1\0\1\15\1\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6\0\1\15\1\0\3\15\1\0\1\15"+
    "\1\0\4\15\1\0\23\15\1\0\13\15\10\0\6\15\1\0\26\15\2\0\1\15\6\0\10\15\10\0"+
    "\13\15\5\0\3\15\15\0\12\13\4\0\6\15\1\0\1\15\17\0\2\15\7\0\2\15\12\13\3\15"+
    "\2\0\2\15\1\0\16\15\15\0\11\15\13\0\1\15\16\0\12\13\6\15\4\0\2\15\4\0\1\15"+
    "\5\0\6\15\4\0\1\15\11\0\1\15\3\0\1\15\7\0\11\15\7\0\5\15\1\0\10\15\6\0\26"+
    "\15\3\0\1\15\2\0\1\15\7\0\12\15\4\0\12\13\1\15\4\0\10\15\2\0\2\15\2\0\26\15"+
    "\1\0\7\15\1\0\1\15\3\0\4\15\3\0\1\15\20\0\1\15\15\0\2\15\1\0\1\15\5\0\6\15"+
    "\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\17\0\4\15\1\0\1\15\7\0\12\13\2\0\3\15"+
    "\20\0\11\15\1\0\2\15\1\0\2\15\1\0\5\15\3\0\1\15\2\0\1\15\30\0\1\15\13\0\10"+
    "\15\2\0\1\15\3\0\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15\1\0\2\15"+
    "\3\0\2\15\3\0\3\15\3\0\14\15\13\0\10\15\1\0\2\15\10\0\3\15\5\0\1\15\4\0\10"+
    "\15\1\0\6\15\1\0\5\15\3\0\1\15\3\0\2\15\15\0\13\15\2\0\1\15\6\0\3\15\10\0"+
    "\1\15\12\0\6\15\5\0\22\15\3\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15\11\0\1\15"+
    "\1\0\2\15\14\0\12\13\7\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15"+
    "\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\0\2\15\11\0\1\15"+
    "\2\0\5\15\1\0\1\15\11\0\12\13\2\0\14\15\1\0\24\15\13\0\5\15\22\0\7\15\4\0"+
    "\4\15\3\0\1\15\3\0\2\15\7\0\3\15\4\0\15\15\14\0\1\15\1\0\6\15\1\0\1\15\5\0"+
    "\1\15\2\0\13\15\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\1\15\1\0"+
    "\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\17\15\1\0\16\15\2\0\6\15\2\0\15\15\2"+
    "\0\1\15\1\0\10\15\7\0\15\15\1\0\6\15\23\0\1\15\4\0\1\15\3\0\5\15\2\0\22\15"+
    "\1\0\1\15\5\0\17\15\1\0\16\15\2\0\5\15\13\0\14\15\13\0\1\15\15\0\7\15\7\0"+
    "\16\15\15\0\2\15\12\13\3\0\3\15\11\0\4\15\1\0\4\15\3\0\2\15\11\0\10\15\1\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4"+
    "\15\2\0\6\15\5\0\1\15\15\0\1\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5"+
    "\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0\5\15\4\0\1"+
    "\15\4\0\2\15\13\0\5\15\6\0\4\15\3\0\2\15\14\0\10\15\7\0\10\15\1\0\7\15\6\0"+
    "\2\15\12\0\5\15\5\0\2\15\3\0\7\15\6\0\3\15\12\13\2\15\13\0\11\15\2\0\27\15"+
    "\2\0\7\15\1\0\3\15\1\0\4\15\1\0\4\15\2\0\6\15\3\0\1\15\1\0\1\15\2\0\5\15\1"+
    "\0\12\15\12\13\5\15\1\0\3\15\1\0\10\15\4\0\7\15\3\0\1\15\3\0\2\15\1\0\1\15"+
    "\3\0\2\15\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15\3\0\6\15\2\0\6\15\2\0\6\15"+
    "\11\0\7\15\4\0\5\15\3\0\5\15\5\0\1\15\1\0\10\15\1\0\5\15\1\0\1\15\1\0\2\15"+
    "\1\0\2\15\1\0\12\15\6\0\12\15\2\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0\14\15"+
    "\1\0\16\15\1\0\2\15\1\0\2\15\1\0\10\15\6\0\4\15\4\0\16\15\2\0\1\15\1\0\14"+
    "\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15\1\0\3\15\1\0\12"+
    "\15\3\0\1\15\12\0\4\15\13\0\12\13\1\15\1\0\1\15\3\0\7\15\1\0\1\15\1\0\4\15"+
    "\1\0\17\15\1\0\2\15\14\0\3\15\7\0\4\15\11\0\2\15\1\0\1\15\20\0\4\15\10\0\1"+
    "\15\13\0\10\15\5\0\3\15\2\0\1\15\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0"+
    "\7\15\1\0\21\15\1\0\4\15\2\0\10\15\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15\1"+
    "\0\1\15\3\0\14\15\2\0\13\15\1\0\10\15\2\0\22\13\1\0\2\15\1\0\1\15\2\0\1\15"+
    "\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1"+
    "\0\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\1\0\12\15\1"+
    "\0\5\15\1\0\3\15\1\0\5\15\1\0\5\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\4\11\1\13\1\14\1\15"+
    "\1\16\1\10\1\17\1\20\1\21\1\22\3\10\1\23"+
    "\1\24\3\10\1\25\4\10\1\26\1\27\1\4\1\1"+
    "\1\5\1\30\1\1\2\10\1\11\1\31\4\11\1\15"+
    "\1\32\1\16\1\33\1\22\1\34\1\35\1\36\1\23"+
    "\1\24\1\37\1\40\1\41\2\42\1\43\1\44\1\10"+
    "\1\16\1\21\7\10\1\45\1\46\1\47\1\50\1\1"+
    "\1\3\2\1\2\10\2\51\1\10\4\52\1\10\2\52"+
    "\1\10\1\53\1\1\1\53\2\1\1\54\2\55\2\56"+
    "\2\57\1\60\2\61\3\1\1\62\2\3\1\0\1\7"+
    "\1\0\1\63\1\10\2\11\2\64\1\65\1\66\1\67"+
    "\1\70\1\10\1\71\5\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\4\10\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\2\10\1\107\1\110\1\111\4\10\1\112\1\113"+
    "\1\114\1\10\1\115\3\0\2\11\1\70\1\0\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\77\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\10\1\134"+
    "\2\135\1\136\6\10\1\47\6\0\1\10\1\3\2\10"+
    "\1\0\3\10\14\0\2\137\1\0\1\3\1\10\1\140"+
    "\1\141\1\142\2\72\1\143\1\144\4\10\1\145\1\146"+
    "\3\10\1\147\3\10\2\114\1\142\1\150\1\151\1\152"+
    "\1\0\6\10\1\3\3\50\1\0\2\51\2\10\2\53"+
    "\2\56\1\153\1\154\1\155\1\156\1\157\1\146\1\10"+
    "\1\160\1\161\4\10\1\3\2\10\1\162\1\3\2\10"+
    "\1\0\2\10\1\163\1\164\2\10\1\146\1\165\3\10"+
    "\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u05ee\0\u05ee\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u05ee\0\u09cc\0\u05ee\0\u0a0e\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u05ee\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u05ee\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u05ee\0\u05ee\0\u05ee\0\u141c\0\u05ee\0\u05ee\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u0ca2\0\u05ee\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c"+
    "\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u098a\0\u09cc\0\u05ee"+
    "\0\u0a50\0\u19c8\0\u0b9a\0\u0ca2\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u05ee\0\u1bd8\0\u1c1a\0\u1c5c\0\u05ee"+
    "\0\u1c9e\0\u1ce0\0\u05ee\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u05ee"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u05ee\0\u1ef0\0\u05ee\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u05ee\0\u1ff8\0\u203a\0\u05ee\0\u05ee\0\u207c\0\u20be"+
    "\0\u05ee\0\u2100\0\u05ee\0\u2142\0\u2184\0\u21c6\0\u05ee\0\u2208"+
    "\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u05ee\0\u05ee\0\u2352\0\u05ee\0\u05ee\0\u07bc\0\u2394\0\u23d6"+
    "\0\u05ee\0\u2418\0\u07bc\0\u245a\0\u249c\0\u24de\0\u2520\0\u05ee"+
    "\0\u05ee\0\u2562\0\u25a4\0\u05ee\0\u0f36\0\u25e6\0\u0eb2\0\u2628"+
    "\0\u266a\0\u26ac\0\u26ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u2730\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u2772"+
    "\0\u05ee\0\u05ee\0\u27b4\0\u05ee\0\u05ee\0\u27f6\0\u07bc\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u05ee\0\u1776\0\u29c4"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u1a8e\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2de4\0\u2e26\0\u1bd8\0\u2e68\0\u2eaa\0\u1d64\0\u1da6\0\u2eec"+
    "\0\u05ee\0\u1d64\0\u0672\0\u2f2e\0\u2f70\0\u05ee\0\u05ee\0\u20be"+
    "\0\u2fb2\0\u2ff4\0\u05ee\0\u07bc\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u05ee\0\u313e\0\u3180\0\u31c2\0\u3204\0\u07bc\0\u3246\0\u3288"+
    "\0\u32ca\0\u05ee\0\u330c\0\u26ee\0\u05ee\0\u05ee\0\u0fba\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u05ee"+
    "\0\u2a06\0\u2a8a\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u05ee\0\u36ea\0\u372c\0\u05ee\0\u07bc\0\u07bc\0\u07bc\0\u07bc"+
    "\0\u376e\0\u37b0\0\u07bc\0\u07bc\0\u37f2\0\u3834\0\u3876\0\u38b8"+
    "\0\u38fa\0\u393c\0\u397e\0\u15ea\0\u39c0\0\u3a02\0\u3a44\0\u3a86"+
    "\0\u3ac8\0\u3b0a\0\u07bc\0\u07bc\0\u3b4c\0\u3b8e\0\u3bd0\0\u07bc"+
    "\0\u3c12\0\u3c54\0\u3c96\0\u07bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\3\41\1\42\1\41\1\42\1\43\1\42\1\44"+
    "\2\41\1\45\1\46\1\47\2\50\2\42\1\43\1\51"+
    "\1\52\1\53\1\41\1\54\1\55\1\56\1\57\1\34"+
    "\1\60\1\61\1\62\1\63\1\64\3\41\1\65\1\66"+
    "\3\41\1\67\1\42\1\70\1\42\1\71\1\72\1\73"+
    "\1\42\1\74\1\42\1\75\1\42\1\76\1\77\1\100"+
    "\1\30\1\31\1\32\1\33\2\34\1\101\1\36\1\37"+
    "\1\40\3\41\1\42\1\41\1\42\1\43\1\42\1\44"+
    "\2\41\1\45\1\46\1\47\2\50\2\42\1\43\1\51"+
    "\1\52\1\53\1\41\1\54\1\55\1\56\1\57\1\34"+
    "\1\60\1\61\1\62\1\63\1\64\3\41\1\65\1\66"+
    "\3\41\1\67\1\42\1\70\1\42\1\71\1\72\1\73"+
    "\1\42\1\74\1\42\1\75\1\42\1\76\1\77\1\100"+
    "\1\30\1\31\1\32\1\102\2\34\1\35\1\103\1\37"+
    "\1\40\1\104\2\30\1\105\1\106\1\107\1\110\1\107"+
    "\1\44\1\111\1\106\1\112\1\113\1\114\2\115\2\107"+
    "\1\110\1\51\1\52\1\116\1\117\1\120\1\121\1\56"+
    "\1\57\1\34\1\60\1\122\3\107\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\5\107\1\72\7\107"+
    "\1\77\1\100\1\30\1\31\1\32\1\102\2\34\1\101"+
    "\1\103\1\37\1\40\1\104\2\30\1\105\1\106\1\107"+
    "\1\110\1\107\1\44\1\111\1\106\1\112\1\113\1\114"+
    "\2\115\2\107\1\110\1\51\1\52\1\116\1\117\1\120"+
    "\1\121\1\56\1\57\1\34\1\60\1\122\3\107\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\5\107"+
    "\1\72\7\107\1\77\1\100\1\30\1\133\1\134\1\102"+
    "\2\34\1\35\1\103\1\135\1\40\1\104\2\30\1\105"+
    "\1\106\1\107\1\110\1\107\1\44\1\111\1\106\1\112"+
    "\1\113\1\114\2\115\2\107\1\110\1\51\1\52\1\116"+
    "\1\117\1\120\1\121\1\56\1\57\1\34\1\136\1\122"+
    "\1\137\2\107\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\5\107\1\72\7\107\1\77\1\100\1\30"+
    "\1\133\1\134\1\102\2\34\1\101\1\103\1\135\1\40"+
    "\1\104\2\30\1\105\1\106\1\107\1\110\1\107\1\44"+
    "\1\111\1\106\1\112\1\113\1\114\2\115\2\107\1\110"+
    "\1\51\1\52\1\116\1\117\1\120\1\121\1\56\1\57"+
    "\1\34\1\136\1\122\1\137\2\107\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\5\107\1\72\7\107"+
    "\1\77\1\100\1\30\1\31\1\32\1\33\2\34\1\35"+
    "\1\103\1\37\1\40\3\41\1\42\1\41\1\42\1\43"+
    "\1\42\1\44\2\41\1\45\1\46\1\47\2\50\2\42"+
    "\1\43\1\51\1\52\1\53\1\41\1\140\1\55\1\56"+
    "\1\57\1\34\1\60\1\61\3\42\3\41\1\65\1\66"+
    "\3\41\5\42\1\72\7\42\1\77\1\100\1\30\1\31"+
    "\1\32\1\33\2\34\1\101\1\103\1\37\1\40\3\41"+
    "\1\42\1\41\1\42\1\43\1\42\1\44\2\41\1\45"+
    "\1\46\1\47\2\50\2\42\1\43\1\51\1\52\1\53"+
    "\1\41\1\140\1\55\1\56\1\57\1\34\1\60\1\61"+
    "\3\42\3\41\1\65\1\66\3\41\5\42\1\72\7\42"+
    "\1\77\1\100\1\30\1\31\1\32\1\33\2\34\1\35"+
    "\1\36\1\37\1\40\3\41\1\42\1\41\1\42\1\43"+
    "\1\42\1\44\2\41\1\45\1\46\1\47\2\50\2\42"+
    "\1\43\1\51\1\52\1\53\1\41\1\54\1\55\1\56"+
    "\1\57\1\34\1\141\1\61\1\62\1\63\1\64\3\41"+
    "\1\65\1\66\3\41\1\142\1\42\1\70\1\42\1\71"+
    "\1\72\1\73\1\42\1\74\1\42\1\75\1\42\1\76"+
    "\1\77\1\100\1\30\1\31\1\32\1\33\2\34\1\101"+
    "\1\36\1\37\1\40\3\41\1\42\1\41\1\42\1\43"+
    "\1\42\1\44\2\41\1\45\1\46\1\47\2\50\2\42"+
    "\1\43\1\51\1\52\1\53\1\41\1\54\1\55\1\56"+
    "\1\57\1\34\1\141\1\61\1\62\1\63\1\64\3\41"+
    "\1\65\1\66\3\41\1\142\1\42\1\70\1\42\1\71"+
    "\1\72\1\73\1\42\1\74\1\42\1\75\1\42\1\76"+
    "\1\77\1\100\1\143\1\31\1\32\1\144\2\34\1\35"+
    "\1\143\1\37\1\40\10\145\1\44\12\145\1\51\2\143"+
    "\1\145\1\143\1\145\2\143\1\34\1\143\1\146\1\145"+
    "\1\147\4\145\1\150\1\66\10\145\1\151\7\145\3\143"+
    "\1\31\1\32\1\144\2\34\1\101\1\143\1\37\1\40"+
    "\10\145\1\44\12\145\1\51\2\143\1\145\1\143\1\145"+
    "\2\143\1\34\1\143\1\146\1\145\1\147\4\145\1\150"+
    "\1\66\10\145\1\151\7\145\2\143\1\30\1\31\1\32"+
    "\1\33\2\34\1\35\1\36\1\152\1\153\3\41\1\42"+
    "\1\41\1\42\1\43\1\42\1\44\2\41\1\45\1\46"+
    "\1\47\2\50\2\42\1\43\1\51\1\52\1\53\1\41"+
    "\1\54\1\55\1\56\1\57\1\34\1\60\1\61\3\42"+
    "\3\41\1\65\1\66\3\41\5\42\1\72\7\42\1\77"+
    "\1\100\1\30\1\31\1\32\1\33\2\34\1\101\1\36"+
    "\1\152\1\153\3\41\1\42\1\41\1\42\1\43\1\42"+
    "\1\44\2\41\1\45\1\46\1\47\2\50\2\42\1\43"+
    "\1\51\1\52\1\53\1\41\1\54\1\55\1\56\1\57"+
    "\1\34\1\60\1\61\3\42\3\41\1\65\1\66\3\41"+
    "\5\42\1\72\7\42\1\77\1\100\1\154\2\30\1\155"+
    "\1\156\1\34\2\154\1\157\1\160\33\154\1\34\34\154"+
    "\1\161\1\133\1\134\1\162\1\163\1\164\1\165\1\161"+
    "\1\37\1\40\10\161\1\44\12\161\1\166\1\52\1\167"+
    "\5\161\1\163\1\170\1\171\6\161\1\172\1\173\10\161"+
    "\1\174\12\161\1\133\1\134\1\162\1\163\1\164\1\175"+
    "\1\161\1\37\1\40\10\161\1\44\12\161\1\166\1\52"+
    "\1\167\5\161\1\163\1\170\1\171\6\161\1\172\1\173"+
    "\10\161\1\174\11\161\1\176\1\133\1\134\1\177\1\200"+
    "\1\34\2\176\1\201\1\202\23\176\1\30\1\176\1\30"+
    "\5\176\1\34\1\30\10\176\1\30\10\176\1\30\11\176"+
    "\1\203\2\204\1\205\1\206\1\207\2\203\2\204\23\203"+
    "\1\204\1\203\1\204\5\203\1\207\1\204\10\203\1\204"+
    "\10\203\1\204\11\203\1\30\1\210\1\211\1\33\2\34"+
    "\1\35\1\36\1\37\1\40\3\41\1\42\1\41\1\42"+
    "\1\43\1\42\1\44\2\41\1\45\1\46\1\47\2\50"+
    "\2\42\1\43\1\51\1\52\1\53\1\41\1\54\1\55"+
    "\1\56\1\57\1\34\1\60\1\61\3\42\3\41\1\65"+
    "\1\66\3\41\5\42\1\72\7\42\1\77\1\100\1\30"+
    "\1\210\1\211\1\33\2\34\1\101\1\36\1\37\1\40"+
    "\3\41\1\42\1\41\1\42\1\43\1\42\1\44\2\41"+
    "\1\45\1\46\1\47\2\50\2\42\1\43\1\51\1\52"+
    "\1\53\1\41\1\54\1\55\1\56\1\57\1\34\1\60"+
    "\1\61\3\42\3\41\1\65\1\66\3\41\5\42\1\72"+
    "\7\42\1\77\1\100\1\212\1\213\1\214\77\212\3\215"+
    "\1\216\16\215\1\217\20\215\1\56\1\220\35\215\103\0"+
    "\1\31\100\0\1\41\1\221\1\222\77\41\3\0\1\223"+
    "\2\34\37\0\1\34\34\0\1\35\2\0\77\35\11\40"+
    "\1\224\70\40\3\0\1\225\2\0\2\41\2\0\10\41"+
    "\1\0\12\41\3\0\1\41\1\0\1\41\5\0\6\41"+
    "\2\0\10\41\1\0\7\41\5\0\1\225\2\0\2\41"+
    "\2\0\3\41\1\42\1\41\3\42\1\0\2\41\10\42"+
    "\3\0\1\41\1\226\1\227\5\0\3\42\3\41\2\0"+
    "\3\41\5\42\1\0\7\42\5\0\1\225\2\0\1\230"+
    "\1\41\2\0\6\41\1\231\1\41\1\0\2\41\5\231"+
    "\2\41\1\231\3\0\1\41\1\0\1\41\5\0\6\41"+
    "\2\0\10\41\1\0\7\41\10\0\2\232\5\0\1\233"+
    "\1\0\1\233\1\232\1\233\10\232\2\233\1\232\1\234"+
    "\2\0\1\232\2\0\1\235\4\0\3\233\1\232\7\0"+
    "\5\233\1\0\7\233\1\236\4\0\1\225\2\0\2\41"+
    "\2\0\10\41\1\0\2\41\5\237\1\240\1\41\1\237"+
    "\3\0\1\41\1\0\1\41\5\0\6\41\2\0\10\41"+
    "\1\0\7\41\5\0\1\225\2\0\1\230\1\41\2\0"+
    "\6\41\1\231\1\41\1\0\2\41\1\43\1\231\1\43"+
    "\1\231\1\43\2\41\1\231\3\0\1\41\1\0\1\41"+
    "\5\0\6\41\2\0\10\41\1\0\7\41\5\0\1\225"+
    "\2\0\2\41\2\0\6\41\1\43\1\41\1\0\2\41"+
    "\5\43\2\41\1\43\3\0\1\41\1\0\1\41\5\0"+
    "\6\41\2\0\10\41\1\0\7\41\5\0\1\225\2\0"+
    "\1\230\1\41\2\0\6\41\1\43\1\41\1\0\2\41"+
    "\5\43\2\41\1\43\3\0\1\41\1\0\1\41\5\0"+
    "\6\41\2\0\10\41\1\0\7\41\37\0\1\241\64\0"+
    "\1\242\4\0\1\243\1\244\1\245\2\246\2\0\1\242"+
    "\2\0\1\247\1\243\6\0\1\250\35\0\1\225\2\0"+
    "\2\41\2\0\10\41\1\0\12\41\3\0\1\41\1\251"+
    "\1\41\5\0\6\41\2\0\10\41\1\0\7\41\41\0"+
    "\1\252\7\0\1\253\7\0\1\254\25\0\1\225\2\0"+
    "\2\41\2\0\3\41\1\42\1\41\3\42\1\0\2\41"+
    "\10\42\3\0\1\41\1\226\1\227\5\0\1\42\1\255"+
    "\1\42\3\41\2\0\3\41\5\42\1\0\7\42\5\0"+
    "\1\225\2\0\2\41\2\0\3\41\1\42\1\41\3\42"+
    "\1\0\2\41\10\42\3\0\1\41\1\226\1\227\5\0"+
    "\1\256\2\42\3\41\2\0\3\41\2\42\1\257\2\42"+
    "\1\0\7\42\5\0\1\225\2\0\2\41\2\0\3\41"+
    "\1\42\1\41\3\42\1\0\2\41\10\42\3\0\1\41"+
    "\1\226\1\227\5\0\3\42\3\41\2\0\3\41\5\42"+
    "\1\0\5\42\1\260\1\42\41\0\1\261\7\0\1\262"+
    "\6\0\1\263\62\0\1\264\17\0\1\265\25\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\5\42\1\0\2\42\1\266\4\42"+
    "\5\0\1\225\2\0\2\41\2\0\3\41\1\42\1\41"+
    "\3\42\1\0\2\41\10\42\3\0\1\41\1\226\1\227"+
    "\5\0\1\42\1\267\1\42\3\41\2\0\3\41\5\42"+
    "\1\0\7\42\5\0\1\225\2\0\2\41\2\0\3\41"+
    "\1\42\1\41\3\42\1\0\2\41\10\42\3\0\1\41"+
    "\1\226\1\227\5\0\3\42\3\41\2\0\3\41\3\42"+
    "\1\270\1\42\1\0\7\42\72\0\1\271\14\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\5\42\1\0\1\42\1\272\5\42"+
    "\5\0\1\225\2\0\2\41\2\0\3\41\1\42\1\41"+
    "\3\42\1\0\2\41\10\42\3\0\1\41\1\226\1\227"+
    "\5\0\3\42\3\41\2\0\3\41\1\273\4\42\1\0"+
    "\1\42\1\274\2\42\1\275\2\42\5\0\1\225\2\0"+
    "\2\41\2\0\3\41\1\42\1\41\3\42\1\0\2\41"+
    "\10\42\3\0\1\41\1\226\1\227\5\0\3\42\3\41"+
    "\2\0\3\41\1\42\1\276\3\42\1\0\7\42\5\0"+
    "\1\225\2\0\2\41\2\0\3\41\1\42\1\41\3\42"+
    "\1\0\2\41\10\42\3\0\1\41\1\226\1\227\5\0"+
    "\3\42\3\41\2\0\3\41\5\42\1\0\5\42\1\277"+
    "\1\42\102\0\1\300\102\0\1\301\1\35\2\0\4\35"+
    "\1\302\72\35\2\106\1\303\77\106\41\0\1\304\55\0"+
    "\1\305\1\0\3\305\3\0\10\305\4\0\1\226\1\306"+
    "\5\0\3\305\10\0\5\305\1\0\7\305\5\0\1\307"+
    "\2\0\2\106\6\0\4\106\2\0\11\106\13\0\3\106"+
    "\10\0\5\106\1\0\7\106\5\0\1\307\2\0\2\106"+
    "\5\0\1\305\1\106\3\107\2\0\1\106\10\107\4\0"+
    "\1\226\1\306\5\0\3\107\10\0\5\107\1\0\7\107"+
    "\10\0\1\310\11\0\1\311\4\0\5\311\2\0\1\311"+
    "\72\0\5\312\1\313\1\0\1\312\53\0\1\310\11\0"+
    "\1\311\4\0\1\110\1\311\1\110\1\311\1\110\2\0"+
    "\1\311\65\0\1\110\4\0\5\110\2\0\1\110\53\0"+
    "\1\310\11\0\1\110\4\0\5\110\2\0\1\110\65\0"+
    "\1\242\4\0\1\243\1\244\1\245\2\246\2\0\1\242"+
    "\2\0\1\247\1\243\1\314\5\0\1\250\72\0\1\315"+
    "\1\316\101\0\1\317\101\0\1\251\1\320\76\0\1\252"+
    "\1\0\1\321\5\0\1\322\7\0\1\254\63\0\1\323"+
    "\11\0\1\324\67\0\1\325\101\0\1\326\77\0\1\261"+
    "\1\0\1\327\5\0\1\262\6\0\1\330\62\0\1\264"+
    "\1\0\1\331\15\0\1\265\63\0\1\332\41\0\1\133"+
    "\103\0\1\307\2\0\2\106\5\0\1\305\1\106\3\107"+
    "\2\0\1\106\10\107\4\0\1\226\1\306\5\0\1\107"+
    "\1\333\1\107\10\0\5\107\1\0\7\107\43\0\1\317"+
    "\17\0\1\334\57\0\1\335\6\0\1\336\36\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\1\42\1\337\3\42\1\0\2\42"+
    "\1\266\4\42\2\0\1\143\2\0\1\340\2\0\2\143"+
    "\2\0\10\143\1\0\12\143\2\0\6\143\2\0\10\143"+
    "\1\0\10\143\1\0\11\143\1\145\1\221\1\341\1\342"+
    "\76\145\1\143\2\0\1\343\2\0\2\145\2\0\10\145"+
    "\1\0\12\145\2\0\1\143\1\145\1\143\1\145\2\143"+
    "\2\0\1\143\6\145\1\143\1\0\10\145\1\0\7\145"+
    "\3\143\2\0\1\340\2\0\2\143\2\0\10\143\1\0"+
    "\12\143\2\0\6\143\2\0\10\143\1\254\10\143\1\0"+
    "\12\143\2\0\1\343\2\0\2\145\2\0\10\145\1\0"+
    "\12\145\2\0\1\143\1\145\1\143\1\145\2\143\2\0"+
    "\1\143\6\145\1\143\1\0\5\145\1\344\2\145\1\0"+
    "\7\145\3\143\2\0\1\340\2\0\2\143\2\0\10\143"+
    "\1\0\12\143\2\0\6\143\2\0\7\143\1\345\1\0"+
    "\10\143\1\0\11\143\11\153\1\346\70\153\1\154\2\0"+
    "\1\347\1\154\1\0\2\154\2\0\33\154\1\0\35\154"+
    "\1\0\101\154\2\0\1\350\1\156\1\34\2\154\2\0"+
    "\33\154\1\34\34\154\3\351\1\352\4\351\2\0\70\351"+
    "\3\353\1\354\4\353\2\0\70\353\1\161\2\0\1\355"+
    "\1\161\1\0\2\161\2\0\10\161\1\0\12\161\3\0"+
    "\6\161\2\0\7\161\1\0\10\161\1\0\12\161\1\356"+
    "\1\357\1\355\77\161\2\0\1\360\1\163\1\164\2\161"+
    "\2\0\10\161\1\0\12\161\3\0\5\161\1\163\2\0"+
    "\7\161\1\0\10\161\1\0\11\161\3\0\1\361\2\164"+
    "\37\0\1\164\34\0\1\165\2\0\1\362\1\165\1\35"+
    "\2\165\2\35\10\165\1\35\12\165\3\35\6\165\2\35"+
    "\7\165\1\35\10\165\1\35\11\165\1\161\2\0\1\355"+
    "\1\161\1\0\2\161\2\0\10\161\1\0\12\161\2\0"+
    "\1\261\6\161\1\0\1\262\6\161\1\363\1\0\10\161"+
    "\1\0\11\161\1\165\2\0\1\362\1\165\1\35\1\165"+
    "\1\364\2\35\10\165\1\35\12\165\3\35\6\165\2\35"+
    "\7\165\1\35\10\165\1\35\11\165\1\176\2\0\1\365"+
    "\1\176\1\0\2\176\2\0\23\176\1\0\1\176\1\0"+
    "\5\176\2\0\10\176\1\0\10\176\1\0\12\176\1\0"+
    "\101\176\2\0\1\366\1\200\1\34\2\176\2\0\23\176"+
    "\1\0\1\176\1\0\5\176\1\34\1\0\10\176\1\0"+
    "\10\176\1\0\11\176\1\367\2\0\1\370\1\367\1\0"+
    "\2\367\2\0\23\367\1\0\1\367\1\0\5\367\2\0"+
    "\10\367\1\0\10\367\1\0\11\367\1\371\2\0\1\372"+
    "\1\371\1\0\2\371\2\0\23\371\1\0\1\371\1\0"+
    "\5\371\2\0\10\371\1\0\10\371\1\0\11\371\1\203"+
    "\2\0\1\373\1\203\1\0\2\203\2\0\23\203\1\0"+
    "\1\203\1\0\5\203\2\0\10\203\1\0\10\203\1\0"+
    "\12\203\1\0\101\203\2\0\1\374\1\206\1\207\2\203"+
    "\2\0\23\203\1\0\1\203\1\0\5\203\1\207\1\0"+
    "\10\203\1\0\10\203\1\0\11\203\3\0\1\375\2\207"+
    "\37\0\1\207\35\0\1\210\100\0\1\212\2\0\77\212"+
    "\1\0\1\213\100\0\3\376\1\377\16\376\1\u0100\20\376"+
    "\1\0\1\u0101\40\376\1\377\16\376\1\u0100\21\376\1\u0102"+
    "\40\376\1\377\16\376\1\u0100\20\376\1\235\1\u0101\35\376"+
    "\3\0\1\u0103\2\0\2\41\2\0\10\41\1\0\12\41"+
    "\3\0\1\41\1\0\1\41\5\0\6\41\2\0\10\41"+
    "\1\0\7\41\3\0\1\221\1\0\1\u0103\2\0\2\41"+
    "\2\0\10\41\1\0\12\41\3\0\1\41\1\0\1\41"+
    "\5\0\6\41\2\0\10\41\1\0\7\41\3\0\1\34"+
    "\1\u0104\77\0\2\41\1\u0105\77\41\3\0\1\225\2\0"+
    "\2\41\2\0\10\41\1\0\12\41\3\0\1\41\1\u0106"+
    "\1\41\5\0\6\41\2\0\10\41\1\0\7\41\5\0"+
    "\1\225\2\0\2\41\2\0\1\41\1\230\1\41\1\230"+
    "\1\41\2\230\1\41\1\0\2\41\10\230\3\0\1\41"+
    "\1\0\1\41\5\0\3\230\3\41\2\0\3\41\5\230"+
    "\1\0\7\230\5\0\1\225\2\0\2\41\2\0\6\41"+
    "\1\231\1\41\1\0\2\41\5\231\2\41\1\231\3\0"+
    "\1\41\1\0\1\41\5\0\6\41\2\0\10\41\1\0"+
    "\7\41\17\0\1\233\1\0\3\233\3\0\10\233\13\0"+
    "\3\233\10\0\5\233\1\0\7\233\37\0\1\u0107\47\0"+
    "\1\225\2\0\2\41\2\0\10\41\1\0\2\41\5\237"+
    "\2\41\1\237\3\0\1\41\1\0\1\41\5\0\6\41"+
    "\2\0\10\41\1\0\7\41\5\0\1\225\2\0\2\41"+
    "\2\0\6\41\1\u0108\1\41\1\0\2\41\5\u0108\1\41"+
    "\2\u0108\3\0\1\41\1\0\1\41\5\0\1\41\1\u0108"+
    "\4\41\2\0\6\41\2\u0108\1\0\1\u0108\1\41\1\u0108"+
    "\4\41\10\0\1\u0109\11\0\1\u010a\4\0\5\u010a\2\0"+
    "\1\u010a\53\0\1\u0109\11\0\1\u010a\4\0\1\242\1\u010a"+
    "\1\242\1\u010a\1\242\2\0\1\u010a\65\0\1\242\4\0"+
    "\5\242\2\0\1\242\53\0\1\u0109\11\0\1\242\4\0"+
    "\5\242\2\0\1\242\114\0\1\u010b\35\0\1\225\2\0"+
    "\2\41\2\0\3\41\1\42\1\41\3\42\1\0\2\41"+
    "\10\42\3\0\1\41\1\226\1\227\5\0\2\42\1\u010c"+
    "\3\41\2\0\3\41\5\42\1\0\7\42\5\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\1\u010d\1\42\1\u010e\2\42\1\0"+
    "\7\42\5\0\1\225\2\0\2\41\2\0\3\41\1\42"+
    "\1\41\3\42\1\0\2\41\10\42\3\0\1\41\1\226"+
    "\1\227\5\0\3\42\3\41\2\0\3\41\3\42\1\u010f"+
    "\1\42\1\0\7\42\5\0\1\225\2\0\2\41\2\0"+
    "\3\41\1\42\1\41\3\42\1\0\2\41\10\42\3\0"+
    "\1\41\1\226\1\227\5\0\1\42\1\u0110\1\42\3\41"+
    "\2\0\3\41\5\42\1\0\7\42\42\0\1\u0111\15\0"+
    "\1\u0112\26\0\1\225\2\0\2\41\2\0\3\41\1\42"+
    "\1\41\3\42\1\0\2\41\10\42\3\0\1\41\1\226"+
    "\1\227\5\0\1\u0113\2\42\3\41\2\0\3\41\5\42"+
    "\1\0\7\42\5\0\1\225\2\0\2\41\2\0\3\41"+
    "\1\42\1\41\3\42\1\0\2\41\10\42\3\0\1\41"+
    "\1\226\1\227\5\0\3\42\3\41\2\0\3\41\2\42"+
    "\1\u0114\2\42\1\0\7\42\5\0\1\225\2\0\2\41"+
    "\2\0\3\41\1\42\1\41\3\42\1\0\2\41\10\42"+
    "\3\0\1\41\1\226\1\227\5\0\3\42\3\41\2\0"+
    "\3\41\1\42\1\u0115\3\42\1\0\7\42\5\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\5\42\1\0\3\42\1\u0116\3\42"+
    "\5\0\1\225\2\0\2\41\2\0\3\41\1\42\1\41"+
    "\3\42\1\0\2\41\10\42\3\0\1\41\1\226\1\227"+
    "\5\0\3\42\3\41\2\0\3\41\1\42\1\u0117\3\42"+
    "\1\0\7\42\5\0\1\225\2\0\2\41\2\0\3\41"+
    "\1\42\1\41\3\42\1\0\2\41\10\42\3\0\1\41"+
    "\1\226\1\227\5\0\2\42\1\u0118\3\41\2\0\3\41"+
    "\5\42\1\0\7\42\5\0\1\225\2\0\2\41\2\0"+
    "\3\41\1\42\1\41\3\42\1\0\2\41\10\42\3\0"+
    "\1\41\1\226\1\227\5\0\3\42\3\41\2\0\3\41"+
    "\1\u0119\4\42\1\0\7\42\2\0\1\302\1\u011a\1\u011b"+
    "\77\302\1\0\1\106\1\0\1\307\2\0\2\106\6\0"+
    "\4\106\2\0\11\106\13\0\3\106\10\0\5\106\1\0"+
    "\7\106\43\0\1\u0106\53\0\1\310\1\0\1\310\1\0"+
    "\2\310\4\0\10\310\13\0\3\310\10\0\5\310\1\0"+
    "\7\310\22\0\1\311\4\0\5\311\2\0\1\311\72\0"+
    "\5\312\2\0\1\312\65\0\1\u011c\4\0\5\u011c\1\0"+
    "\2\u011c\14\0\1\u011c\14\0\2\u011c\1\0\1\u011c\1\0"+
    "\1\u011c\47\0\1\u011d\100\0\1\u0111\1\u011e\14\0\1\u0112"+
    "\26\0\1\307\2\0\2\106\5\0\1\305\1\106\3\107"+
    "\2\0\1\106\10\107\4\0\1\226\1\306\5\0\2\107"+
    "\1\u011f\10\0\5\107\1\0\7\107\41\0\1\335\42\0"+
    "\1\143\1\u0120\1\u0121\1\340\77\143\1\221\1\0\1\u0122"+
    "\2\0\2\145\2\0\10\145\1\0\12\145\2\0\1\143"+
    "\1\145\1\143\1\145\2\143\2\0\1\143\6\145\1\143"+
    "\1\0\10\145\1\0\7\145\3\143\1\u0120\1\u0121\1\343"+
    "\2\143\2\145\2\143\10\145\1\143\12\145\3\143\1\145"+
    "\1\143\1\145\5\143\6\145\2\143\10\145\1\143\7\145"+
    "\2\143\1\145\1\u0123\1\u0124\1\342\76\145\1\143\2\0"+
    "\1\343\2\0\2\145\2\0\10\145\1\0\12\145\2\0"+
    "\1\143\1\145\1\143\1\145\2\143\2\0\1\143\6\145"+
    "\1\143\1\0\6\145\1\u0125\1\145\1\0\7\145\3\143"+
    "\2\0\1\340\2\0\2\143\2\0\10\143\1\0\12\143"+
    "\2\0\6\143\2\0\7\143\1\u0126\1\0\10\143\1\0"+
    "\11\143\1\154\1\34\1\u0127\77\154\3\351\1\352\4\351"+
    "\1\u0128\1\0\73\351\1\352\4\351\1\u0129\71\351\3\353"+
    "\1\354\4\353\1\0\1\u0128\73\353\1\354\5\353\1\u012a"+
    "\70\353\1\161\1\0\1\161\1\355\76\161\3\0\1\u012b"+
    "\76\0\1\161\1\356\1\0\1\162\1\161\1\0\2\161"+
    "\2\0\10\161\1\0\12\161\3\0\6\161\2\0\7\161"+
    "\1\0\10\161\1\0\12\161\1\164\1\u012c\1\355\76\161"+
    "\1\0\1\164\1\u012d\77\0\1\165\1\0\1\161\1\362"+
    "\76\165\1\161\2\0\1\355\1\161\1\0\2\161\2\0"+
    "\10\161\1\0\12\161\3\0\6\161\2\0\6\161\1\u012e"+
    "\1\0\10\161\1\0\11\161\1\364\1\u011a\1\u011b\1\u012f"+
    "\1\364\1\302\2\364\2\302\10\364\1\302\12\364\3\302"+
    "\6\364\2\302\7\364\1\302\10\364\1\302\11\364\1\176"+
    "\1\34\1\u0130\77\176\1\367\2\0\1\370\1\367\1\0"+
    "\2\367\1\u0131\1\0\23\367\1\0\1\367\1\0\5\367"+
    "\2\0\10\367\1\0\10\367\1\0\12\367\1\0\100\367"+
    "\1\371\2\0\1\372\1\371\1\0\2\371\1\0\1\u0131"+
    "\23\371\1\0\1\371\1\0\5\371\2\0\10\371\1\0"+
    "\10\371\1\0\12\371\1\0\100\371\1\203\1\207\1\u0132"+
    "\77\203\1\0\1\207\1\u0133\77\0\3\376\1\377\16\376"+
    "\1\u0100\20\376\1\u0134\1\u0101\35\376\1\0\1\34\1\0"+
    "\1\223\2\34\37\0\1\34\35\0\1\41\1\0\1\225"+
    "\2\0\2\41\2\0\10\41\1\0\12\41\3\0\1\41"+
    "\1\0\1\41\5\0\6\41\2\0\10\41\1\0\7\41"+
    "\15\0\1\u0109\1\0\1\u0109\1\0\2\u0109\4\0\10\u0109"+
    "\13\0\3\u0109\10\0\5\u0109\1\0\7\u0109\22\0\1\u010a"+
    "\4\0\5\u010a\2\0\1\u010a\50\0\1\225\2\0\2\41"+
    "\2\0\3\41\1\42\1\41\3\42\1\0\2\41\10\42"+
    "\3\0\1\41\1\226\1\227\5\0\3\42\3\41\2\0"+
    "\3\41\5\42\1\0\2\42\1\u0135\4\42\5\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\1\42"+
    "\1\u0136\1\42\3\41\2\0\3\41\5\42\1\0\7\42"+
    "\5\0\1\225\2\0\2\41\2\0\3\41\1\42\1\41"+
    "\3\42\1\0\2\41\10\42\3\0\1\41\1\226\1\227"+
    "\5\0\3\42\3\41\2\0\3\41\4\42\1\u0137\1\0"+
    "\7\42\5\0\1\225\2\0\2\41\2\0\3\41\1\42"+
    "\1\41\3\42\1\0\2\41\10\42\3\0\1\41\1\226"+
    "\1\227\5\0\3\42\3\41\2\0\3\41\1\42\1\u0138"+
    "\3\42\1\0\7\42\6\0\2\u0139\37\0\1\u0139\37\0"+
    "\1\225\2\0\2\41\2\0\3\41\1\42\1\41\3\42"+
    "\1\0\2\41\10\42\3\0\1\41\1\226\1\227\5\0"+
    "\1\42\1\u013a\1\42\3\41\2\0\3\41\5\42\1\0"+
    "\7\42\5\0\1\225\2\0\2\41\2\0\3\41\1\42"+
    "\1\41\3\42\1\0\2\41\10\42\3\0\1\41\1\226"+
    "\1\227\5\0\1\42\1\u013b\1\42\3\41\2\0\3\41"+
    "\5\42\1\0\7\42\5\0\1\225\2\0\2\41\2\0"+
    "\3\41\1\42\1\41\3\42\1\0\2\41\10\42\3\0"+
    "\1\41\1\226\1\227\5\0\1\42\1\u013c\1\42\3\41"+
    "\2\0\3\41\5\42\1\0\7\42\5\0\1\225\2\0"+
    "\2\41\2\0\3\41\1\42\1\41\3\42\1\0\2\41"+
    "\10\42\3\0\1\41\1\226\1\227\5\0\3\42\3\41"+
    "\2\0\3\41\4\42\1\u013d\1\0\7\42\5\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\1\u013e\4\42\1\0\7\42\5\0"+
    "\1\225\2\0\2\41\2\0\3\41\1\42\1\41\3\42"+
    "\1\0\2\41\10\42\3\0\1\41\1\226\1\227\5\0"+
    "\1\u013f\2\42\3\41\2\0\3\41\5\42\1\0\7\42"+
    "\3\0\1\u011a\100\0\1\143\2\0\1\u0140\2\0\2\143"+
    "\2\0\10\143\1\0\12\143\2\0\6\143\2\0\10\143"+
    "\1\0\10\143\1\0\12\143\1\u0120\1\0\1\340\2\0"+
    "\2\143\2\0\10\143\1\0\12\143\2\0\6\143\2\0"+
    "\10\143\1\0\10\143\1\0\11\143\1\145\1\u0141\1\u0142"+
    "\1\342\76\145\1\143\2\0\1\u0143\2\0\2\145\2\0"+
    "\10\145\1\0\12\145\2\0\1\143\1\145\1\143\1\145"+
    "\2\143\2\0\1\143\6\145\1\143\1\0\10\145\1\0"+
    "\7\145\3\143\1\u0123\1\0\1\343\2\0\2\145\2\0"+
    "\10\145\1\0\12\145\2\0\1\143\1\145\1\143\1\145"+
    "\2\143\2\0\1\143\6\145\1\143\1\0\10\145\1\0"+
    "\7\145\3\143\2\0\1\343\2\0\2\145\2\0\10\145"+
    "\1\0\12\145\2\0\1\143\1\145\1\143\1\145\2\143"+
    "\2\0\1\143\6\145\1\143\1\0\7\145\1\u0144\1\0"+
    "\7\145\3\143\2\0\1\340\2\u0139\2\143\2\0\10\143"+
    "\1\0\12\143\2\0\6\143\1\u0139\1\0\10\143\1\0"+
    "\10\143\1\0\11\143\1\154\1\34\1\0\1\350\1\156"+
    "\1\34\2\154\2\0\33\154\1\34\34\154\1\0\1\356"+
    "\1\u0145\77\0\1\161\1\164\1\0\1\360\1\163\1\164"+
    "\2\161\2\0\10\161\1\0\12\161\3\0\5\161\1\163"+
    "\2\0\7\161\1\0\10\161\1\0\11\161\1\0\1\164"+
    "\1\0\1\361\2\164\37\0\1\164\34\0\1\161\2\0"+
    "\1\355\1\u0146\1\u0139\2\161\2\0\10\161\1\0\12\161"+
    "\3\0\5\161\1\u0146\2\0\7\161\1\0\10\161\1\0"+
    "\11\161\1\364\1\u011a\1\u0147\1\u012f\76\364\1\176\1\34"+
    "\1\0\1\366\1\200\1\34\2\176\2\0\23\176\1\0"+
    "\1\176\1\0\5\176\1\34\1\0\10\176\1\0\10\176"+
    "\1\0\11\176\1\203\1\207\1\0\1\374\1\206\1\207"+
    "\2\203\2\0\23\203\1\0\1\203\1\0\5\203\1\207"+
    "\1\0\10\203\1\0\10\203\1\0\11\203\1\0\1\207"+
    "\1\0\1\375\2\207\37\0\1\207\37\0\1\u0148\2\u0139"+
    "\37\0\1\u0139\37\0\1\225\2\0\2\41\2\0\3\41"+
    "\1\42\1\41\3\42\1\0\2\41\10\42\3\0\1\41"+
    "\1\226\1\227\5\0\3\42\3\41\2\0\3\41\4\42"+
    "\1\u0149\1\0\7\42\5\0\1\225\2\0\2\41\2\0"+
    "\3\41\1\42\1\41\3\42\1\0\2\41\10\42\3\0"+
    "\1\41\1\226\1\227\5\0\2\42\1\u014a\3\41\2\0"+
    "\3\41\5\42\1\0\7\42\5\0\1\225\2\0\2\41"+
    "\2\0\3\41\1\42\1\41\3\42\1\0\2\41\10\42"+
    "\3\0\1\41\1\226\1\227\5\0\1\u014b\2\42\3\41"+
    "\2\0\3\41\5\42\1\0\7\42\5\0\1\225\2\0"+
    "\2\41\2\0\3\41\1\42\1\41\3\42\1\0\2\41"+
    "\10\42\3\0\1\41\1\226\1\227\5\0\1\42\1\u014c"+
    "\1\42\3\41\2\0\3\41\5\42\1\0\7\42\2\0"+
    "\1\143\1\0\1\143\1\340\77\143\2\0\1\144\2\0"+
    "\2\145\2\0\10\145\1\0\12\145\2\0\1\143\1\145"+
    "\1\143\1\145\2\143\2\0\1\143\6\145\1\143\1\0"+
    "\10\145\1\0\7\145\3\143\1\u0141\1\0\1\u0122\2\0"+
    "\2\145\2\0\10\145\1\0\12\145\2\0\1\143\1\145"+
    "\1\143\1\145\2\143\2\0\1\143\6\145\1\143\1\0"+
    "\10\145\1\0\7\145\2\143\1\145\1\41\1\u014d\1\342"+
    "\76\145\1\0\1\356\1\0\1\u012b\76\0\1\161\2\0"+
    "\1\u014e\1\u0146\1\u0139\2\161\2\0\10\161\1\0\12\161"+
    "\3\0\5\161\1\u0146\2\0\7\161\1\0\10\161\1\0"+
    "\12\161\1\u011a\1\0\1\355\1\161\1\0\2\161\2\0"+
    "\10\161\1\0\12\161\3\0\6\161\2\0\7\161\1\0"+
    "\10\161\1\0\11\161\1\0\1\u0139\1\u014f\102\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\2\42"+
    "\1\u0150\3\41\2\0\3\41\5\42\1\0\7\42\5\0"+
    "\1\225\2\0\2\41\2\0\3\41\1\42\1\41\3\42"+
    "\1\0\2\41\10\42\3\0\1\41\1\226\1\227\5\0"+
    "\3\42\3\41\2\0\3\41\1\u0151\4\42\1\0\7\42"+
    "\2\0\1\143\1\41\1\0\1\343\2\0\2\145\2\0"+
    "\10\145\1\0\12\145\2\0\1\143\1\145\1\143\1\145"+
    "\2\143\2\0\1\143\6\145\1\143\1\0\10\145\1\0"+
    "\7\145\2\143\1\161\1\u0139\1\u0152\1\355\76\161\1\0"+
    "\1\u0139\1\0\1\u0148\2\u0139\37\0\1\u0139\37\0\1\225"+
    "\2\0\2\41\2\0\3\41\1\42\1\41\3\42\1\0"+
    "\2\41\10\42\3\0\1\41\1\226\1\227\5\0\3\42"+
    "\3\41\2\0\3\41\5\42\1\0\1\42\1\u0153\5\42"+
    "\2\0\1\161\1\u0139\1\0\1\u014e\1\u0146\1\u0139\2\161"+
    "\2\0\10\161\1\0\12\161\3\0\5\161\1\u0146\2\0"+
    "\7\161\1\0\10\161\1\0\11\161\3\0\1\225\2\0"+
    "\2\41\2\0\3\41\1\42\1\41\3\42\1\0\2\41"+
    "\10\42\3\0\1\41\1\226\1\227\5\0\3\42\3\41"+
    "\2\0\3\41\1\42\1\u0154\3\42\1\0\7\42\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\2\11\4\1\2\11\12\1\1\11\1\1\1\11"+
    "\1\1\3\11\23\1\1\11\4\1\1\11\17\1\3\11"+
    "\1\1\2\11\13\1\1\11\15\1\1\11\13\1\1\11"+
    "\3\1\1\11\2\1\1\11\4\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\11\3\1\1\11\2\1\2\11\2\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\4\11\4\1"+
    "\2\11\1\1\2\11\3\1\1\11\6\1\2\11\2\1"+
    "\1\11\3\0\3\1\1\0\6\11\1\1\5\11\1\1"+
    "\2\11\1\1\2\11\10\1\1\11\6\0\4\1\1\0"+
    "\3\1\14\0\1\11\1\1\1\0\2\1\2\11\3\1"+
    "\1\11\5\1\1\11\10\1\1\11\2\1\2\11\1\1"+
    "\1\0\7\1\1\11\2\1\1\0\5\1\1\11\2\1"+
    "\1\11\23\1\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ShLexerGen() {
    this(null);
  }

  private static final int DOUBLE_PARENTHESES = 2;
  private static final int PARENTHESES = 1;

  private boolean isArithmeticExpansion;
  private String heredocMarker;
  private boolean heredocWithWhiteSpaceIgnore;
  private final IntStack stateStack = new IntStack(1_000);
  private final IntStack parenStack = new IntStack(1_000);

  private void pushState(int state) {
    int currentState = yystate();
    assert currentState != YYINITIAL || stateStack.empty() : "Can't push initial state into the not empty stack";
    stateStack.push(currentState);
    yybegin(state);
  }

  private void popState() {
    assert !stateStack.empty() : "States stack is empty";
    yybegin(stateStack.pop());
  }

  private void pushParentheses(int parentheses) {
    parenStack.push(parentheses);
  }

  private void popParentheses() {
    assert !parenStack.empty() : "Parentheses stack is empty";
    parenStack.pop();
  }

  private boolean shouldCloseDoubleParen() {
    return !parenStack.empty() && parenStack.peek() == DOUBLE_PARENTHESES;
  }

  private boolean shouldCloseSingleParen() {
    return !parenStack.empty() && parenStack.peek() == PARENTHESES;
  }

  protected void onReset() {
    stateStack.clear();
    parenStack.clear();
    heredocWithWhiteSpaceIgnore = false;
    heredocMarker = null;
    isArithmeticExpansion = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ShLexerGen(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 119: break;
          case 2: 
            { return LINEFEED;
            } 
            // fall through
          case 120: break;
          case 3: 
            { return WHITESPACE;
            } 
            // fall through
          case 121: break;
          case 4: 
            { if (yystate() == STRING_EXPRESSION) { yypushback(yylength() - 1); return WORD; } return COMMENT;
            } 
            // fall through
          case 122: break;
          case 5: 
            { return BANG;
            } 
            // fall through
          case 123: break;
          case 6: 
            { pushState(STRING_EXPRESSION); return QUOTE;
            } 
            // fall through
          case 124: break;
          case 7: 
            { return RAW_STRING;
            } 
            // fall through
          case 125: break;
          case 8: 
            { return WORD;
            } 
            // fall through
          case 126: break;
          case 9: 
            { return INT;
            } 
            // fall through
          case 127: break;
          case 10: 
            { return DOLLAR;
            } 
            // fall through
          case 128: break;
          case 11: 
            { pushParentheses(PARENTHESES); return LEFT_PAREN;
            } 
            // fall through
          case 129: break;
          case 12: 
            { if (yystate() == BACKQUOTE_COMMAND_SUBSTITUTION) popState(); else pushState(BACKQUOTE_COMMAND_SUBSTITUTION);
                                  return BACKQUOTE;
            } 
            // fall through
          case 130: break;
          case 13: 
            { return AMP;
            } 
            // fall through
          case 131: break;
          case 14: 
            { return ASSIGN;
            } 
            // fall through
          case 132: break;
          case 15: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 133: break;
          case 16: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 134: break;
          case 17: 
            { return SEMI;
            } 
            // fall through
          case 135: break;
          case 18: 
            { return GT;
            } 
            // fall through
          case 136: break;
          case 19: 
            { return LT;
            } 
            // fall through
          case 137: break;
          case 20: 
            { return PIPE;
            } 
            // fall through
          case 138: break;
          case 21: 
            { if (shouldCloseSingleParen()) popParentheses();
                                    if (yystate() == PARENTHESES_COMMAND_SUBSTITUTION) popState(); return RIGHT_PAREN;
            } 
            // fall through
          case 139: break;
          case 22: 
            { if (yystate() != STRING_EXPRESSION) pushState(CONDITIONAL_EXPRESSION); return LEFT_SQUARE;
            } 
            // fall through
          case 140: break;
          case 23: 
            { switch (yystate()) {
                                      case OLD_ARITHMETIC_EXPRESSION: popState(); return ARITH_SQUARE_RIGHT;
                                      case CONDITIONAL_EXPRESSION: popState(); return RIGHT_SQUARE;
                                      default: return RIGHT_SQUARE; }
            } 
            // fall through
          case 141: break;
          case 24: 
            { return COMMA;
            } 
            // fall through
          case 142: break;
          case 25: 
            { return QMARK;
            } 
            // fall through
          case 143: break;
          case 26: 
            { return MINUS;
            } 
            // fall through
          case 144: break;
          case 27: 
            { return PLUS;
            } 
            // fall through
          case 145: break;
          case 28: 
            { return MULT;
            } 
            // fall through
          case 146: break;
          case 29: 
            { return DIV;
            } 
            // fall through
          case 147: break;
          case 30: 
            { return MOD;
            } 
            // fall through
          case 148: break;
          case 31: 
            { return XOR;
            } 
            // fall through
          case 149: break;
          case 32: 
            { return BITWISE_NEGATION;
            } 
            // fall through
          case 150: break;
          case 33: 
            { return COLON;
            } 
            // fall through
          case 151: break;
          case 34: 
            { popState(); return LINEFEED;
            } 
            // fall through
          case 152: break;
          case 35: 
            { return QUOTE;
            } 
            // fall through
          case 153: break;
          case 36: 
            { popState(); return SEMI;
            } 
            // fall through
          case 154: break;
          case 37: 
            { popState(); return RIGHT_PAREN;
            } 
            // fall through
          case 155: break;
          case 38: 
            { popState(); return QUOTE;
            } 
            // fall through
          case 156: break;
          case 39: 
            { if (StringUtil.indexOf(yytext(), '"') > 0) { yypushback(yylength() - 1); return WORD; }
                                    else return RAW_STRING;
            } 
            // fall through
          case 157: break;
          case 40: 
            { popState(); return WORD;
            } 
            // fall through
          case 158: break;
          case 41: 
            { popState(); return WHITESPACE;
            } 
            // fall through
          case 159: break;
          case 42: 
            { popState(); yypushback(1);
            } 
            // fall through
          case 160: break;
          case 43: 
            { if ((yycharat(yylength()-1) == '\'' || yycharat(yylength()-1) == '"') && yylength() > 2)
                                      heredocMarker = yytext().subSequence(1, yylength()-1).toString();
                                    else heredocMarker = yytext().toString();
                                    heredocMarker = heredocMarker.replaceAll("(\\\\)(.)", "$2");
                                    yybegin(HERE_DOC_PIPELINE);
                                    return HEREDOC_MARKER_START;
            } 
            // fall through
          case 161: break;
          case 44: 
            { if (yytext().toString().equals(heredocMarker))
                                  { heredocMarker = null; heredocWithWhiteSpaceIgnore = false; popState(); return HEREDOC_MARKER_END; }
                                    else { yypushback(yylength()); yybegin(HERE_DOC_BODY); }
            } 
            // fall through
          case 162: break;
          case 45: 
            { yypushback(yylength()); yybegin(HERE_DOC_BODY);
            } 
            // fall through
          case 163: break;
          case 46: 
            { if (!heredocWithWhiteSpaceIgnore) yybegin(HERE_DOC_BODY); return HEREDOC_CONTENT;
            } 
            // fall through
          case 164: break;
          case 47: 
            { yybegin(HERE_DOC_END_MARKER); return LINEFEED;
            } 
            // fall through
          case 165: break;
          case 48: 
            { return HEREDOC_CONTENT;
            } 
            // fall through
          case 166: break;
          case 49: 
            { yybegin(HERE_DOC_END_MARKER); return HEREDOC_CONTENT;
            } 
            // fall through
          case 167: break;
          case 50: 
            { popState(); return RIGHT_CURLY;
            } 
            // fall through
          case 168: break;
          case 51: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return WORD;
            } 
            // fall through
          case 169: break;
          case 52: 
            { return VAR;
            } 
            // fall through
          case 170: break;
          case 53: 
            { pushState(PARENTHESES_COMMAND_SUBSTITUTION); yypushback(1); return DOLLAR;
            } 
            // fall through
          case 171: break;
          case 54: 
            { pushState(PARAMETER_EXPANSION); yypushback(1); return DOLLAR;
            } 
            // fall through
          case 172: break;
          case 55: 
            { pushState(OLD_ARITHMETIC_EXPRESSION); return ARITH_SQUARE_LEFT;
            } 
            // fall through
          case 173: break;
          case 56: 
            { return OCTAL;
            } 
            // fall through
          case 174: break;
          case 57: 
            { if (yystate() == STRING_EXPRESSION && !isArithmeticExpansion) { pushParentheses(PARENTHESES);
                                           yypushback(1); isArithmeticExpansion = false; return LEFT_PAREN;}
                                    else { pushState(ARITHMETIC_EXPRESSION); pushParentheses(DOUBLE_PARENTHESES);
                                           isArithmeticExpansion = false; return LEFT_DOUBLE_PAREN; }
            } 
            // fall through
          case 175: break;
          case 58: 
            { return FILEDESCRIPTOR;
            } 
            // fall through
          case 176: break;
          case 59: 
            { return AND_AND;
            } 
            // fall through
          case 177: break;
          case 60: 
            { return REDIRECT_AMP_GREATER;
            } 
            // fall through
          case 178: break;
          case 61: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 179: break;
          case 62: 
            { return REDIRECT_GREATER_AMP;
            } 
            // fall through
          case 180: break;
          case 63: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 181: break;
          case 64: 
            { return REDIRECT_GREATER_BAR;
            } 
            // fall through
          case 182: break;
          case 65: 
            { return REDIRECT_LESS_AMP;
            } 
            // fall through
          case 183: break;
          case 66: 
            { return REDIRECT_LESS_GREATER;
            } 
            // fall through
          case 184: break;
          case 67: 
            { if (yystate() != HERE_DOC_PIPELINE && yystate() != STRING_EXPRESSION)
                                    { pushState(HERE_DOC_START_MARKER); return HEREDOC_MARKER_TAG; }
                                    else return SHIFT_LEFT;
            } 
            // fall through
          case 185: break;
          case 68: 
            { return PIPE_AMP;
            } 
            // fall through
          case 186: break;
          case 69: 
            { return OR_OR;
            } 
            // fall through
          case 187: break;
          case 70: 
            { pushState(IF_CONDITION); return IF;
            } 
            // fall through
          case 188: break;
          case 71: 
            { if (shouldCloseDoubleParen()) { popState(); popParentheses(); return RIGHT_DOUBLE_PAREN; }
                                    else if (shouldCloseSingleParen()) {
                                      if (yystate() == PARENTHESES_COMMAND_SUBSTITUTION) popState(); yypushback(1); popParentheses(); return RIGHT_PAREN;
                                    } else return RIGHT_DOUBLE_PAREN;
            } 
            // fall through
          case 189: break;
          case 72: 
            { return DO;
            } 
            // fall through
          case 190: break;
          case 73: 
            { if (yystate() == IF_CONDITION) popState(); return FI;
            } 
            // fall through
          case 191: break;
          case 74: 
            { if (yystate() != STRING_EXPRESSION) pushState(CONDITIONAL_EXPRESSION); return LEFT_DOUBLE_BRACKET;
            } 
            // fall through
          case 192: break;
          case 75: 
            { if (yystate() == CONDITIONAL_EXPRESSION) popState(); return RIGHT_DOUBLE_BRACKET;
            } 
            // fall through
          case 193: break;
          case 76: 
            { if (getTokenStart() == 0) return SHEBANG; else return COMMENT;
            } 
            // fall through
          case 194: break;
          case 77: 
            { return NE;
            } 
            // fall through
          case 195: break;
          case 78: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 196: break;
          case 79: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 197: break;
          case 80: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 198: break;
          case 81: 
            { return EQ;
            } 
            // fall through
          case 199: break;
          case 82: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 200: break;
          case 83: 
            { return GE;
            } 
            // fall through
          case 201: break;
          case 84: 
            { return MULT_ASSIGN;
            } 
            // fall through
          case 202: break;
          case 85: 
            { return EXPONENT;
            } 
            // fall through
          case 203: break;
          case 86: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 204: break;
          case 87: 
            { return MOD_ASSIGN;
            } 
            // fall through
          case 205: break;
          case 88: 
            { return LE;
            } 
            // fall through
          case 206: break;
          case 89: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 207: break;
          case 90: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 208: break;
          case 91: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 209: break;
          case 92: 
            { pushState(REGULAR_EXPRESSION); return REGEXP;
            } 
            // fall through
          case 210: break;
          case 93: 
            { pushState(CASE_PATTERN);    return CASE_END;
            } 
            // fall through
          case 211: break;
          case 94: 
            { if (yystate() == CASE_CONDITION) {pushState(CASE_PATTERN); return IN; } else return WORD;
            } 
            // fall through
          case 212: break;
          case 95: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return PARAMETER_EXPANSION_BODY;
            } 
            // fall through
          case 213: break;
          case 96: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return WORD;
            } 
            // fall through
          case 214: break;
          case 97: 
            { isArithmeticExpansion = true; yypushback(2); return DOLLAR;
            } 
            // fall through
          case 215: break;
          case 98: 
            { return HEX;
            } 
            // fall through
          case 216: break;
          case 99: 
            { return REDIRECT_AMP_GREATER_GREATER;
            } 
            // fall through
          case 217: break;
          case 100: 
            { pushState(LET_EXPRESSION); return LET;
            } 
            // fall through
          case 218: break;
          case 101: 
            { if (yystate() != HERE_DOC_PIPELINE && yystate() != STRING_EXPRESSION)
                                    { pushState(HERE_DOC_START_MARKER); heredocWithWhiteSpaceIgnore = true; return HEREDOC_MARKER_TAG; }
                                    else return SHIFT_LEFT;
            } 
            // fall through
          case 219: break;
          case 102: 
            { pushState(HERE_STRING); return REDIRECT_HERE_STRING;
            } 
            // fall through
          case 220: break;
          case 103: 
            { pushState(OTHER_CONDITIONS); return FOR;
            } 
            // fall through
          case 221: break;
          case 104: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 222: break;
          case 105: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 223: break;
          case 106: 
            { return LET;
            } 
            // fall through
          case 224: break;
          case 107: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return PARAMETER_EXPANSION_BODY;
            } 
            // fall through
          case 225: break;
          case 108: 
            { return ELIF;
            } 
            // fall through
          case 226: break;
          case 109: 
            { return ELSE;
            } 
            // fall through
          case 227: break;
          case 110: 
            { if (yystate() == CASE_CONDITION) popState(); return ESAC;
            } 
            // fall through
          case 228: break;
          case 111: 
            { return THEN;
            } 
            // fall through
          case 229: break;
          case 112: 
            { pushState(CASE_CONDITION); return CASE;
            } 
            // fall through
          case 230: break;
          case 113: 
            { if (yystate() == OTHER_CONDITIONS) popState(); return DONE;
            } 
            // fall through
          case 231: break;
          case 114: 
            { popState(); yypushback(yylength());
            } 
            // fall through
          case 232: break;
          case 115: 
            { pushState(OTHER_CONDITIONS); return UNTIL;
            } 
            // fall through
          case 233: break;
          case 116: 
            { pushState(OTHER_CONDITIONS); return WHILE;
            } 
            // fall through
          case 234: break;
          case 117: 
            { pushState(OTHER_CONDITIONS); return SELECT;
            } 
            // fall through
          case 235: break;
          case 118: 
            { return FUNCTION;
            } 
            // fall through
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
