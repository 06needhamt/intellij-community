/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.bash.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;
import com.intellij.util.containers.Stack;
import com.intellij.lexer.FlexLexer;
import static com.intellij.bash.lexer.BashTokenTypes.*;
import static org.apache.commons.lang3.StringUtils.contains;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>bash.flex</tt>
 */
public class _BashLexerGen implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ARITHMETIC_EXPRESSION = 2;
  public static final int OLD_ARITHMETIC_EXPRESSION = 4;
  public static final int LET_EXPRESSION = 6;
  public static final int CONDITIONAL_EXPRESSION = 8;
  public static final int IF_CONDITION = 10;
  public static final int OTHER_CONDITIONS = 12;
  public static final int CASE_CONDITION = 14;
  public static final int CASE_PATTERN = 16;
  public static final int STRING_EXPRESSION = 18;
  public static final int HERE_DOC_START_MARKER = 20;
  public static final int HERE_DOC_END_MARKER = 22;
  public static final int HERE_DOC_PIPELINE = 24;
  public static final int HERE_DOC_BODY = 26;
  public static final int PARAMETER_EXPANSION = 28;
  public static final int COMMAND_SUBSTITUTION = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  0,  0,  0,  0,  4,  4, 
     5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14304 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\141\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\142\1\24"+
    "\45\12\1\143\1\12\1\24\1\27\4\12\1\27\1\144\1\145\1\15\1\12\1\15\1\12\1\15"+
    "\1\145\1\70\3\12\1\146\1\1\1\147\1\114\2\1\1\114\5\12\1\26\1\150\1\12\1\151"+
    "\4\12\1\37\1\12\1\152\2\1\1\64\1\12\1\153\1\154\2\12\1\155\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\154\2\1\2\114\1\156\5\1\1\107\2\12\1\146\1\157\1\114"+
    "\2\1\1\160\1\12\1\161\1\41\2\12\1\37\1\1\2\12\1\146\1\1\1\162\1\41\1\12\1"+
    "\153\1\45\5\1\1\163\1\164\14\12\4\1\21\12\1\142\2\12\1\142\1\165\1\12\1\153"+
    "\3\12\1\166\1\167\1\170\1\124\1\167\7\1\1\171\1\1\1\124\6\1\1\172\1\173\1"+
    "\174\1\175\1\176\3\1\1\177\147\1\2\12\1\152\2\12\1\152\10\12\1\200\1\201\2"+
    "\12\1\133\3\12\1\202\1\1\1\12\1\112\4\203\4\1\1\126\35\1\1\204\2\1\1\205\1"+
    "\24\4\12\1\206\1\24\4\12\1\134\1\107\1\12\1\153\1\24\4\12\1\152\1\1\1\12\1"+
    "\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1\2\12\1\153"+
    "\20\12\1\124\1\12\1\207\1\1\2\12\1\152\1\126\1\12\1\153\4\12\1\37\2\1\1\210"+
    "\1\211\5\12\1\212\1\12\1\152\1\26\3\1\1\210\1\213\1\12\1\30\1\1\3\12\1\146"+
    "\1\211\2\12\1\146\1\1\1\114\1\1\1\214\1\41\1\12\1\37\1\12\1\112\1\1\1\12\1"+
    "\124\1\47\2\12\1\30\1\126\1\114\1\215\1\216\2\12\1\45\1\1\1\217\1\114\1\12"+
    "\1\220\3\12\1\221\1\222\1\223\1\27\1\65\1\224\1\225\1\203\2\12\1\134\1\37"+
    "\7\12\1\30\1\114\72\12\1\146\1\12\1\226\2\12\1\155\20\1\26\12\1\153\6\12\1"+
    "\76\2\1\1\112\1\227\1\55\1\230\1\231\6\12\1\15\1\1\1\160\25\12\1\153\1\1\4"+
    "\12\1\211\2\12\1\26\2\1\1\155\7\1\1\215\7\12\1\124\1\1\1\114\1\24\1\27\1\24"+
    "\1\27\1\232\4\12\1\152\1\233\1\234\2\1\1\235\1\12\1\141\1\236\2\153\2\1\7"+
    "\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\237\2\12\1\37\1\12"+
    "\1\153\2\12\1\240\3\1\11\12\1\153\1\114\2\12\1\240\1\12\1\155\2\12\1\26\3"+
    "\12\1\146\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\241\2\12\1\242\1\12\1\37"+
    "\1\12\1\112\1\12\1\152\4\1\1\12\1\243\1\12\1\37\1\12\1\76\4\1\3\12\1\244\4"+
    "\1\1\70\1\245\1\12\1\146\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1\12\1\154\1"+
    "\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12"+
    "\1\30\60\1\1\160\2\12\1\26\2\1\1\64\1\1\1\160\2\12\2\1\1\12\1\45\1\114\1\160"+
    "\1\12\1\112\1\64\1\1\2\12\1\246\1\160\2\12\1\30\1\247\1\250\2\1\1\12\1\21"+
    "\1\155\5\1\1\251\1\252\1\45\2\12\1\152\1\1\1\114\1\72\1\54\1\55\1\67\1\1\1"+
    "\253\1\15\11\1\3\12\1\154\1\254\1\114\2\1\3\12\1\1\1\255\1\114\12\1\2\12\1"+
    "\152\2\1\1\256\2\1\3\12\1\1\1\257\1\114\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1"+
    "\76\1\1\1\114\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1\12\1\152\1"+
    "\1\1\70\1\114\1\1\1\211\1\12\67\1\71\12\1\76\16\1\14\12\1\146\53\1\2\12\1"+
    "\152\75\1\44\12\1\112\33\1\43\12\1\45\1\12\1\152\1\114\6\1\1\12\1\153\1\1"+
    "\3\12\1\1\1\146\1\114\1\160\1\260\1\12\67\1\4\12\1\154\1\70\3\1\1\160\4\1"+
    "\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124\1\45\1"+
    "\76\66\1\5\12\1\215\3\12\1\145\1\261\1\262\1\263\3\12\1\264\1\265\1\12\1\266"+
    "\1\267\1\35\24\12\1\270\1\12\1\35\1\134\1\12\1\134\1\12\1\215\1\12\1\215\1"+
    "\152\1\12\1\152\1\12\1\55\1\12\1\55\1\12\1\271\3\272\14\12\1\154\3\1\4\12"+
    "\1\146\1\114\112\1\1\263\1\12\1\273\1\274\1\275\1\276\1\277\1\300\1\301\1"+
    "\155\1\302\1\155\24\1\55\12\1\112\2\1\103\12\1\154\15\12\1\153\150\12\1\15"+
    "\25\1\41\12\1\153\36\1");

  /* The ZZ_CMAP_A table has 3120 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\44\1\1\1\0\1\4\1\2\22\0\1\44\1\6\1\7\1\5\1\21\1\52\1\36\1\10\1\34"+
    "\1\67\1\22\1\41\1\11\1\37\1\15\1\51\1\24\1\26\3\30\1\27\1\25\1\33\2\17\1\61"+
    "\1\45\1\54\1\40\1\53\1\60\1\23\6\32\21\16\1\31\2\16\1\101\1\3\1\102\1\56\1"+
    "\20\1\35\1\65\1\32\1\66\1\70\1\47\1\72\1\16\1\75\1\62\2\16\1\46\1\100\1\63"+
    "\1\71\1\77\1\16\1\73\1\64\1\50\1\74\1\16\1\76\1\31\2\16\1\42\1\55\1\43\1\57"+
    "\13\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\13\12\14\4\0\14\14\16\0\5\14\7\0"+
    "\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6\0\1\14\1\0\3\14\1\0\1"+
    "\14\1\0\4\14\1\0\23\14\1\0\13\14\10\0\6\14\1\0\26\14\2\0\1\14\6\0\10\14\10"+
    "\0\13\14\5\0\3\14\15\0\12\12\4\0\6\14\1\0\1\14\17\0\2\14\7\0\2\14\12\12\3"+
    "\14\2\0\2\14\1\0\16\14\15\0\11\14\13\0\1\14\16\0\12\12\6\14\4\0\2\14\4\0\1"+
    "\14\5\0\6\14\4\0\1\14\11\0\1\14\3\0\1\14\7\0\11\14\7\0\5\14\1\0\10\14\6\0"+
    "\26\14\3\0\1\14\2\0\1\14\7\0\12\14\4\0\12\12\1\14\4\0\10\14\2\0\2\14\2\0\26"+
    "\14\1\0\7\14\1\0\1\14\3\0\4\14\3\0\1\14\20\0\1\14\15\0\2\14\1\0\1\14\5\0\6"+
    "\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14\17\0\4\14\1\0\1\14\7\0\12\12\2\0\3"+
    "\14\20\0\11\14\1\0\2\14\1\0\2\14\1\0\5\14\3\0\1\14\2\0\1\14\30\0\1\14\13\0"+
    "\10\14\2\0\1\14\3\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0"+
    "\2\14\3\0\2\14\3\0\3\14\3\0\14\14\13\0\10\14\1\0\2\14\10\0\3\14\5\0\1\14\4"+
    "\0\10\14\1\0\6\14\1\0\5\14\3\0\1\14\3\0\2\14\15\0\13\14\2\0\1\14\6\0\3\14"+
    "\10\0\1\14\12\0\6\14\5\0\22\14\3\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14\11\0"+
    "\1\14\1\0\2\14\14\0\12\12\7\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0"+
    "\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11\0"+
    "\1\14\2\0\5\14\1\0\1\14\11\0\12\12\2\0\14\14\1\0\24\14\13\0\5\14\22\0\7\14"+
    "\4\0\4\14\3\0\1\14\3\0\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0\6\14\1\0\1\14"+
    "\5\0\1\14\2\0\13\14\1\0\15\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\17\14\1\0\16\14\2\0\6\14\2\0\15\14"+
    "\2\0\1\14\1\0\10\14\7\0\15\14\1\0\6\14\23\0\1\14\4\0\1\14\3\0\5\14\2\0\22"+
    "\14\1\0\1\14\5\0\17\14\1\0\16\14\2\0\5\14\13\0\14\14\13\0\1\14\15\0\7\14\7"+
    "\0\16\14\15\0\2\14\12\12\3\0\3\14\11\0\4\14\1\0\4\14\3\0\2\14\11\0\10\14\1"+
    "\0\1\14\1\0\1\14\1\0\1\14\1\0\6\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0"+
    "\4\14\2\0\6\14\5\0\1\14\15\0\1\14\2\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0"+
    "\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0"+
    "\1\14\4\0\2\14\13\0\5\14\6\0\4\14\3\0\2\14\14\0\10\14\7\0\10\14\1\0\7\14\6"+
    "\0\2\14\12\0\5\14\5\0\2\14\3\0\7\14\6\0\3\14\12\12\2\14\13\0\11\14\2\0\27"+
    "\14\2\0\7\14\1\0\3\14\1\0\4\14\1\0\4\14\2\0\6\14\3\0\1\14\1\0\1\14\2\0\5\14"+
    "\1\0\12\14\12\12\5\14\1\0\3\14\1\0\10\14\4\0\7\14\3\0\1\14\3\0\2\14\1\0\1"+
    "\14\3\0\2\14\2\0\5\14\2\0\1\14\1\0\1\14\30\0\3\14\3\0\6\14\2\0\6\14\2\0\6"+
    "\14\11\0\7\14\4\0\5\14\3\0\5\14\5\0\1\14\1\0\10\14\1\0\5\14\1\0\1\14\1\0\2"+
    "\14\1\0\2\14\1\0\12\14\6\0\12\14\2\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\14"+
    "\14\1\0\16\14\1\0\2\14\1\0\2\14\1\0\10\14\6\0\4\14\4\0\16\14\2\0\1\14\1\0"+
    "\14\14\1\0\2\14\3\0\1\14\2\0\4\14\1\0\2\14\12\0\10\14\6\0\6\14\1\0\3\14\1"+
    "\0\12\14\3\0\1\14\12\0\4\14\13\0\12\12\1\14\1\0\1\14\3\0\7\14\1\0\1\14\1\0"+
    "\4\14\1\0\17\14\1\0\2\14\14\0\3\14\7\0\4\14\11\0\2\14\1\0\1\14\20\0\4\14\10"+
    "\0\1\14\13\0\10\14\5\0\3\14\2\0\1\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14"+
    "\1\0\7\14\1\0\21\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0\14\14\1\0\4\14\1\0\5\14"+
    "\1\0\1\14\3\0\14\14\2\0\13\14\1\0\10\14\2\0\22\12\1\0\2\14\1\0\1\14\2\0\1"+
    "\14\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1"+
    "\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14"+
    "\1\0\5\14\1\0\3\14\1\0\5\14\1\0\5\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\0\1\2\2\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\2\2\10\1\11\1\12\4\11\1\13"+
    "\1\14\1\15\1\16\1\10\1\17\1\20\1\21\3\10"+
    "\1\22\1\23\1\24\3\10\1\25\4\10\1\26\1\27"+
    "\1\2\1\6\1\30\1\2\2\10\1\11\1\31\4\11"+
    "\1\15\1\32\1\16\1\33\1\34\1\35\1\22\1\23"+
    "\1\24\1\36\1\37\1\40\1\41\2\42\1\43\1\44"+
    "\1\10\1\16\1\21\6\10\1\45\1\46\1\2\1\47"+
    "\1\2\1\47\2\2\1\50\2\51\2\52\2\53\1\1"+
    "\2\54\3\2\1\55\2\4\1\0\1\5\1\56\1\0"+
    "\1\57\1\0\1\60\1\10\2\11\2\61\1\62\1\63"+
    "\1\64\1\65\1\10\1\66\5\67\1\70\1\71\1\72"+
    "\6\10\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\2\10\1\104\1\105\1\106\4\10\1\107"+
    "\1\110\1\10\1\111\3\0\2\11\1\112\1\113\1\65"+
    "\1\0\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\74\1\124\1\125\1\126\1\127\1\10\1\130"+
    "\2\131\1\132\5\10\1\0\1\133\14\0\2\134\1\0"+
    "\1\4\2\56\1\10\1\135\1\136\1\137\2\67\1\140"+
    "\1\141\6\10\1\142\1\143\3\10\1\144\3\10\1\137"+
    "\1\145\1\146\1\147\1\0\5\10\2\47\2\52\1\150"+
    "\1\151\1\152\1\153\1\154\1\155\1\156\1\10\1\157"+
    "\1\160\4\10\1\4\2\10\1\161\2\10\1\162\1\163"+
    "\1\10\1\164\2\10\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0324\0\u0324\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0324\0\u0711"+
    "\0\u0324\0\u0754\0\u0324\0\u0324\0\u0324\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0324"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u0324\0\u0c90\0\u0c90\0\u0324\0\u1146"+
    "\0\u0324\0\u0324\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u09f2\0\u0324\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u0324\0\u15b9\0\u15fc\0\u163f"+
    "\0\u0324\0\u1682\0\u16c5\0\u0324\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u0324\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u0473\0\u0324"+
    "\0\u1963\0\u0324\0\u19a6\0\u19e9\0\u1a2c\0\u0324\0\u1a6f\0\u1ab2"+
    "\0\u0324\0\u0324\0\u1af5\0\u1b38\0\u0324\0\u1b7b\0\u0324\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u0324\0\u1c87\0\u0324\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u0324\0\u0324\0\u0324\0\u0324\0\u0324"+
    "\0\u1e5c\0\u0324\0\u0324\0\u04f9\0\u1e9f\0\u1ee2\0\u0324\0\u1f25"+
    "\0\u04f9\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u0324\0\u0324\0\u2074"+
    "\0\u0324\0\u0c4d\0\u20b7\0\u0bc7\0\u20fa\0\u213d\0\u0324\0\u0324"+
    "\0\u2180\0\u21c3\0\u0324\0\u0324\0\u0324\0\u0324\0\u0324\0\u0324"+
    "\0\u0324\0\u0324\0\u2206\0\u0324\0\u2249\0\u0324\0\u0324\0\u228c"+
    "\0\u0324\0\u0324\0\u22cf\0\u04f9\0\u2312\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u13e4\0\u0324\0\u146a\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u15b9\0\u25b0\0\u25f3\0\u174b\0\u178e\0\u2636\0\u0324"+
    "\0\u174b\0\u03aa\0\u2679\0\u0324\0\u26bc\0\u26ff\0\u0324\0\u0324"+
    "\0\u1b38\0\u2742\0\u2785\0\u0324\0\u04f9\0\u27c8\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u0324\0\u0324\0\u295a\0\u299d\0\u29e0"+
    "\0\u04f9\0\u2a23\0\u2a66\0\u2aa9\0\u21c3\0\u0324\0\u0324\0\u0cd3"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u0324"+
    "\0\u2cc1\0\u2d04\0\u0324\0\u04f9\0\u04f9\0\u04f9\0\u04f9\0\u04f9"+
    "\0\u04f9\0\u2d47\0\u04f9\0\u04f9\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u131b\0\u2f5f\0\u2fa2\0\u04f9\0\u04f9"+
    "\0\u2fe5\0\u04f9\0\u3028\0\u306b\0\u04f9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\26\1\27\1\26\1\27\1\30\1\27\1\31"+
    "\2\26\1\32\1\33\1\34\2\35\2\27\1\30\1\36"+
    "\1\37\1\40\1\26\1\41\1\42\1\43\1\44\1\21"+
    "\1\45\1\46\1\47\1\50\2\26\1\51\1\52\1\53"+
    "\4\26\1\54\1\27\1\55\1\27\1\56\1\57\1\60"+
    "\1\27\1\61\1\27\1\62\1\27\1\63\2\27\1\64"+
    "\1\65\1\15\1\16\1\17\1\66\1\21\1\22\1\67"+
    "\1\24\1\25\1\70\2\15\1\71\1\72\1\73\1\74"+
    "\1\73\1\31\1\75\1\72\1\76\1\77\1\100\2\101"+
    "\2\73\1\74\1\36\1\37\1\102\1\103\1\104\1\105"+
    "\1\43\1\44\1\21\1\45\3\73\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\5\73\1\57"+
    "\11\73\1\64\1\65\1\15\1\117\1\120\1\66\1\21"+
    "\1\22\1\67\1\121\1\25\1\70\2\15\1\71\1\72"+
    "\1\73\1\74\1\73\1\31\1\75\1\72\1\76\1\77"+
    "\1\100\2\101\2\73\1\74\1\36\1\37\1\102\1\103"+
    "\1\104\1\105\1\43\1\44\1\21\1\122\1\123\2\73"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\5\73\1\57\11\73\1\64\1\65\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\67\1\24\1\25\3\26"+
    "\1\27\1\26\1\27\1\30\1\27\1\31\2\26\1\32"+
    "\1\33\1\34\2\35\2\27\1\30\1\36\1\37\1\40"+
    "\1\26\1\124\1\42\1\43\1\44\1\21\1\45\3\27"+
    "\2\26\1\51\1\52\1\53\4\26\5\27\1\57\11\27"+
    "\1\64\1\65\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\3\26\1\27\1\26\1\27\1\30"+
    "\1\27\1\31\2\26\1\32\1\33\1\34\2\35\2\27"+
    "\1\30\1\36\1\37\1\40\1\26\1\41\1\42\1\43"+
    "\1\44\1\21\1\125\1\46\1\47\1\50\2\26\1\51"+
    "\1\52\1\53\4\26\1\126\1\27\1\55\1\27\1\56"+
    "\1\57\1\60\1\27\1\61\1\27\1\62\1\27\1\63"+
    "\2\27\1\64\1\65\1\127\1\16\1\17\1\130\1\21"+
    "\1\22\1\127\1\24\1\25\10\131\1\31\12\131\1\36"+
    "\2\127\1\131\1\127\1\131\2\127\1\21\1\127\1\131"+
    "\1\132\3\131\1\133\1\127\1\53\11\131\1\134\11\131"+
    "\2\127\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\135\1\136\3\26\1\27\1\26\1\27\1\30\1\27"+
    "\1\31\2\26\1\32\1\33\1\34\2\35\2\27\1\30"+
    "\1\36\1\37\1\40\1\26\1\41\1\42\1\43\1\44"+
    "\1\21\1\45\3\27\2\26\1\51\1\52\1\53\4\26"+
    "\5\27\1\57\11\27\1\64\1\65\1\137\1\117\1\120"+
    "\1\140\1\141\2\137\1\142\1\143\23\137\1\15\1\137"+
    "\1\15\5\137\1\21\1\15\7\137\1\15\11\137\1\15"+
    "\13\137\1\144\2\145\1\146\1\147\2\144\2\145\23\144"+
    "\1\145\1\144\1\145\5\144\1\150\1\145\7\144\1\145"+
    "\11\144\1\145\13\144\1\15\1\151\1\152\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\3\26\1\27\1\26\1\27"+
    "\1\30\1\27\1\31\2\26\1\32\1\33\1\34\2\35"+
    "\2\27\1\30\1\36\1\37\1\40\1\26\1\41\1\42"+
    "\1\43\1\44\1\21\1\45\3\27\2\26\1\51\1\52"+
    "\1\53\4\26\5\27\1\57\11\27\1\64\1\65\1\153"+
    "\1\154\1\155\100\153\3\156\1\157\15\156\1\160\20\156"+
    "\1\43\1\161\37\156\104\0\1\16\101\0\1\26\1\162"+
    "\1\163\100\26\3\0\1\164\1\21\37\0\1\21\36\0"+
    "\1\165\2\0\3\165\1\166\74\165\10\167\1\170\72\167"+
    "\3\0\1\171\1\0\2\26\2\0\10\26\1\0\12\26"+
    "\3\0\1\26\1\0\1\26\4\0\5\26\3\0\11\26"+
    "\1\0\11\26\5\0\1\171\1\0\2\26\2\0\3\26"+
    "\1\27\1\26\3\27\1\0\2\26\10\27\3\0\1\26"+
    "\1\172\1\173\4\0\3\27\2\26\3\0\4\26\5\27"+
    "\1\0\11\27\5\0\1\171\1\0\1\174\1\26\2\0"+
    "\6\26\1\175\1\26\1\0\2\26\5\175\2\26\1\175"+
    "\3\0\1\26\1\0\1\26\4\0\5\26\3\0\11\26"+
    "\1\0\11\26\7\0\2\176\5\0\1\177\1\0\1\177"+
    "\1\176\1\177\10\176\2\177\1\176\1\200\2\0\1\176"+
    "\2\0\1\201\3\0\3\177\7\0\1\176\1\0\5\177"+
    "\1\0\11\177\1\202\4\0\1\171\1\0\2\26\2\0"+
    "\10\26\1\0\2\26\5\203\1\204\1\26\1\203\3\0"+
    "\1\26\1\0\1\26\4\0\5\26\3\0\11\26\1\0"+
    "\11\26\5\0\1\171\1\0\1\174\1\26\2\0\6\26"+
    "\1\175\1\26\1\0\2\26\1\30\1\175\1\30\1\175"+
    "\1\30\2\26\1\175\3\0\1\26\1\0\1\26\4\0"+
    "\5\26\3\0\11\26\1\0\11\26\5\0\1\171\1\0"+
    "\2\26\2\0\6\26\1\30\1\26\1\0\2\26\5\30"+
    "\2\26\1\30\3\0\1\26\1\0\1\26\4\0\5\26"+
    "\3\0\11\26\1\0\11\26\5\0\1\171\1\0\1\174"+
    "\1\26\2\0\6\26\1\30\1\26\1\0\2\26\5\30"+
    "\2\26\1\30\3\0\1\26\1\0\1\26\4\0\5\26"+
    "\3\0\11\26\1\0\11\26\36\0\1\205\65\0\1\206"+
    "\4\0\1\207\1\210\1\211\2\212\2\0\1\206\2\0"+
    "\1\213\1\207\13\0\1\214\32\0\1\171\1\0\2\26"+
    "\2\0\10\26\1\0\12\26\3\0\1\26\1\215\1\26"+
    "\4\0\5\26\3\0\11\26\1\0\11\26\5\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\1\27"+
    "\1\216\1\27\2\26\3\0\4\26\5\27\1\0\11\27"+
    "\5\0\1\171\1\0\2\26\2\0\3\26\1\27\1\26"+
    "\3\27\1\0\2\26\10\27\3\0\1\26\1\172\1\173"+
    "\4\0\1\217\2\27\2\26\3\0\4\26\2\27\1\220"+
    "\2\27\1\0\11\27\5\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\3\27\2\26\3\0\4\26"+
    "\1\221\4\27\1\0\3\27\1\222\1\27\1\223\3\27"+
    "\40\0\1\224\14\0\1\225\1\0\1\226\63\0\1\227"+
    "\14\0\1\230\1\231\64\0\1\232\16\0\1\233\30\0"+
    "\1\171\1\0\2\26\2\0\3\26\1\27\1\26\3\27"+
    "\1\0\2\26\10\27\3\0\1\26\1\172\1\173\4\0"+
    "\3\27\2\26\3\0\4\26\5\27\1\0\2\27\1\234"+
    "\6\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\1\27\1\235\1\27\2\26\3\0\4\26"+
    "\5\27\1\0\11\27\5\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\3\27\2\26\3\0\4\26"+
    "\3\27\1\236\1\27\1\0\11\27\71\0\1\237\16\0"+
    "\1\171\1\0\2\26\2\0\3\26\1\27\1\26\3\27"+
    "\1\0\2\26\10\27\3\0\1\26\1\172\1\173\4\0"+
    "\3\27\2\26\3\0\4\26\5\27\1\0\1\27\1\240"+
    "\7\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\3\27\2\26\3\0\4\26\1\241\4\27"+
    "\1\0\1\27\1\242\2\27\1\243\4\27\5\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\3\27"+
    "\2\26\3\0\4\26\1\27\1\244\3\27\1\0\11\27"+
    "\5\0\1\171\1\0\2\26\2\0\3\26\1\27\1\26"+
    "\3\27\1\0\2\26\10\27\3\0\1\26\1\172\1\173"+
    "\4\0\3\27\2\26\3\0\4\26\5\27\1\0\5\27"+
    "\1\245\3\27\103\0\1\246\103\0\1\247\2\72\1\250"+
    "\100\72\40\0\1\251\56\0\1\252\1\0\3\252\3\0"+
    "\10\252\4\0\1\172\1\253\4\0\3\252\11\0\5\252"+
    "\1\0\11\252\5\0\1\254\1\0\2\72\6\0\4\72"+
    "\2\0\11\72\12\0\3\72\7\0\7\72\1\0\11\72"+
    "\5\0\1\254\1\0\2\72\5\0\1\252\1\72\3\73"+
    "\2\0\1\72\10\73\4\0\1\172\1\253\4\0\3\73"+
    "\7\0\2\72\5\73\1\0\11\73\7\0\1\255\11\0"+
    "\1\256\4\0\5\256\2\0\1\256\71\0\1\257\15\0"+
    "\1\260\66\0\5\261\1\262\1\0\1\261\54\0\1\255"+
    "\11\0\1\256\4\0\1\74\1\256\1\74\1\256\1\74"+
    "\2\0\1\256\66\0\1\74\4\0\5\74\2\0\1\74"+
    "\54\0\1\255\11\0\1\74\4\0\5\74\2\0\1\74"+
    "\66\0\1\206\4\0\1\207\1\210\1\211\2\212\2\0"+
    "\1\206\2\0\1\213\1\207\1\263\12\0\1\214\66\0"+
    "\1\264\1\265\102\0\1\266\102\0\1\215\1\267\101\0"+
    "\1\270\102\0\1\271\100\0\1\224\1\0\1\272\12\0"+
    "\1\273\1\0\1\226\63\0\1\227\1\0\1\274\12\0"+
    "\1\230\1\275\64\0\1\232\1\0\1\276\14\0\1\233"+
    "\65\0\1\277\43\0\1\117\104\0\1\254\1\0\2\72"+
    "\5\0\1\252\1\72\3\73\2\0\1\72\10\73\4\0"+
    "\1\172\1\253\4\0\1\73\1\300\1\73\7\0\2\72"+
    "\5\73\1\0\11\73\42\0\1\266\16\0\1\301\61\0"+
    "\1\302\6\0\1\303\40\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\3\27\2\26\3\0\4\26"+
    "\1\27\1\304\3\27\1\0\2\27\1\234\6\27\2\0"+
    "\1\127\2\0\1\305\1\0\2\127\2\0\10\127\1\0"+
    "\12\127\2\0\6\127\2\0\7\127\1\0\11\127\1\0"+
    "\13\127\1\131\1\162\1\306\1\307\77\131\1\127\2\0"+
    "\1\310\1\0\2\131\2\0\10\131\1\0\12\131\2\0"+
    "\1\127\1\131\1\127\1\131\2\127\2\0\5\131\2\127"+
    "\1\0\11\131\1\0\11\131\3\127\2\0\1\310\1\0"+
    "\2\131\2\0\10\131\1\0\12\131\2\0\1\127\1\131"+
    "\1\127\1\131\2\127\2\0\5\131\2\127\1\0\6\131"+
    "\1\311\2\131\1\0\11\131\3\127\2\0\1\305\1\0"+
    "\2\127\2\0\10\127\1\0\12\127\2\0\6\127\2\0"+
    "\7\127\1\226\11\127\1\0\13\127\10\312\1\313\72\312"+
    "\1\137\2\0\1\314\3\137\2\0\23\137\1\0\1\137"+
    "\1\0\5\137\2\0\7\137\1\0\11\137\1\0\14\137"+
    "\1\0\102\137\2\0\1\315\1\141\2\137\2\0\23\137"+
    "\1\0\1\137\1\0\5\137\1\21\1\0\7\137\1\0"+
    "\11\137\1\0\13\137\1\316\2\0\1\317\3\316\2\0"+
    "\23\316\1\0\1\316\1\0\5\316\2\0\7\316\1\0"+
    "\11\316\1\0\13\316\1\320\2\0\1\321\3\320\2\0"+
    "\23\320\1\0\1\320\1\0\5\320\2\0\7\320\1\0"+
    "\11\320\1\0\13\320\1\144\2\0\1\322\3\144\2\0"+
    "\23\144\1\0\1\144\1\0\5\144\2\0\7\144\1\0"+
    "\11\144\1\0\14\144\1\0\102\144\2\0\1\323\1\147"+
    "\2\144\2\0\23\144\1\0\1\144\1\0\5\144\1\150"+
    "\1\0\7\144\1\0\11\144\1\0\13\144\3\0\1\324"+
    "\1\150\37\0\1\150\37\0\1\151\101\0\1\153\2\0"+
    "\100\153\1\0\1\154\101\0\3\325\1\326\15\325\1\327"+
    "\20\325\1\0\1\330\42\325\1\326\15\325\1\327\21\325"+
    "\1\331\42\325\1\326\15\325\1\327\20\325\1\201\1\330"+
    "\37\325\3\0\1\332\1\0\2\26\2\0\10\26\1\0"+
    "\12\26\3\0\1\26\1\0\1\26\4\0\5\26\3\0"+
    "\11\26\1\0\11\26\3\0\1\162\1\0\1\332\1\0"+
    "\2\26\2\0\10\26\1\0\12\26\3\0\1\26\1\0"+
    "\1\26\4\0\5\26\3\0\11\26\1\0\11\26\3\0"+
    "\1\21\1\333\100\0\1\165\2\0\100\165\1\166\1\334"+
    "\1\335\100\166\2\26\1\336\100\26\3\0\1\171\1\0"+
    "\2\26\2\0\10\26\1\0\12\26\3\0\1\26\1\337"+
    "\1\26\4\0\5\26\3\0\11\26\1\0\11\26\5\0"+
    "\1\171\1\0\2\26\2\0\1\26\1\174\1\26\1\174"+
    "\1\26\2\174\1\26\1\0\2\26\10\174\3\0\1\26"+
    "\1\0\1\26\4\0\3\174\2\26\3\0\4\26\5\174"+
    "\1\0\11\174\5\0\1\171\1\0\2\26\2\0\6\26"+
    "\1\175\1\26\1\0\2\26\5\175\2\26\1\175\3\0"+
    "\1\26\1\0\1\26\4\0\5\26\3\0\11\26\1\0"+
    "\11\26\16\0\1\177\1\0\3\177\3\0\10\177\12\0"+
    "\3\177\11\0\5\177\1\0\11\177\36\0\1\340\51\0"+
    "\1\171\1\0\2\26\2\0\10\26\1\0\2\26\5\203"+
    "\2\26\1\203\3\0\1\26\1\0\1\26\4\0\5\26"+
    "\3\0\11\26\1\0\11\26\5\0\1\171\1\0\2\26"+
    "\2\0\6\26\1\341\1\26\1\0\2\26\5\341\1\26"+
    "\2\341\3\0\1\26\1\0\1\26\4\0\1\26\1\341"+
    "\3\26\3\0\7\26\2\341\1\0\1\341\1\26\1\341"+
    "\6\26\7\0\1\342\11\0\1\343\4\0\5\343\2\0"+
    "\1\343\54\0\1\342\11\0\1\343\4\0\1\206\1\343"+
    "\1\206\1\343\1\206\2\0\1\343\66\0\1\206\4\0"+
    "\5\206\2\0\1\206\54\0\1\342\11\0\1\206\4\0"+
    "\5\206\2\0\1\206\122\0\1\344\32\0\1\171\1\0"+
    "\2\26\2\0\3\26\1\27\1\26\3\27\1\0\2\26"+
    "\10\27\3\0\1\26\1\172\1\173\4\0\2\27\1\345"+
    "\2\26\3\0\4\26\5\27\1\0\11\27\5\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\3\27"+
    "\2\26\3\0\4\26\1\346\1\27\1\347\2\27\1\0"+
    "\11\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\3\27\2\26\3\0\4\26\3\27\1\350"+
    "\1\27\1\0\11\27\5\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\3\27\2\26\3\0\4\26"+
    "\5\27\1\0\10\27\1\351\5\0\1\171\1\0\2\26"+
    "\2\0\3\26\1\27\1\26\3\27\1\0\2\26\10\27"+
    "\3\0\1\26\1\172\1\173\4\0\3\27\2\26\3\0"+
    "\4\26\3\27\1\352\1\27\1\0\11\27\5\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\1\27"+
    "\1\353\1\27\2\26\3\0\4\26\5\27\1\0\11\27"+
    "\41\0\1\354\14\0\1\355\31\0\1\171\1\0\2\26"+
    "\2\0\3\26\1\27\1\26\3\27\1\0\2\26\10\27"+
    "\3\0\1\26\1\172\1\173\4\0\1\356\2\27\2\26"+
    "\3\0\4\26\5\27\1\0\11\27\5\0\1\171\1\0"+
    "\2\26\2\0\3\26\1\27\1\26\3\27\1\0\2\26"+
    "\10\27\3\0\1\26\1\172\1\173\4\0\3\27\2\26"+
    "\3\0\4\26\2\27\1\357\2\27\1\0\11\27\5\0"+
    "\1\171\1\0\2\26\2\0\3\26\1\27\1\26\3\27"+
    "\1\0\2\26\10\27\3\0\1\26\1\172\1\173\4\0"+
    "\3\27\2\26\3\0\4\26\1\27\1\360\3\27\1\0"+
    "\11\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\3\27\2\26\3\0\4\26\5\27\1\0"+
    "\3\27\1\361\5\27\5\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\3\27\2\26\3\0\4\26"+
    "\1\27\1\362\3\27\1\0\11\27\5\0\1\171\1\0"+
    "\2\26\2\0\3\26\1\27\1\26\3\27\1\0\2\26"+
    "\10\27\3\0\1\26\1\172\1\173\4\0\2\27\1\363"+
    "\2\26\3\0\4\26\5\27\1\0\11\27\5\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\3\27"+
    "\2\26\3\0\4\26\1\364\4\27\1\0\11\27\3\0"+
    "\1\72\1\0\1\254\1\0\2\72\6\0\4\72\2\0"+
    "\11\72\12\0\3\72\7\0\7\72\1\0\11\72\42\0"+
    "\1\337\54\0\1\255\1\0\1\255\1\0\2\255\4\0"+
    "\10\255\12\0\3\255\11\0\5\255\1\0\11\255\21\0"+
    "\1\256\4\0\5\256\2\0\1\256\73\0\5\261\2\0"+
    "\1\261\66\0\1\365\4\0\5\365\1\0\2\365\13\0"+
    "\1\365\15\0\2\365\1\0\1\365\1\0\1\365\50\0"+
    "\1\366\101\0\1\354\1\367\13\0\1\355\31\0\1\254"+
    "\1\0\2\72\5\0\1\252\1\72\3\73\2\0\1\72"+
    "\10\73\4\0\1\172\1\253\4\0\2\73\1\370\7\0"+
    "\2\72\5\73\1\0\11\73\40\0\1\302\44\0\1\127"+
    "\1\371\1\372\1\305\100\127\1\162\1\0\1\373\1\0"+
    "\2\131\2\0\10\131\1\0\12\131\2\0\1\127\1\131"+
    "\1\127\1\131\2\127\2\0\5\131\2\127\1\0\11\131"+
    "\1\0\11\131\3\127\1\371\1\372\1\310\1\127\2\131"+
    "\2\127\10\131\1\127\12\131\3\127\1\131\1\127\1\131"+
    "\4\127\5\131\3\127\11\131\1\127\11\131\2\127\1\131"+
    "\1\374\1\375\1\307\77\131\1\127\2\0\1\310\1\0"+
    "\2\131\2\0\10\131\1\0\12\131\2\0\1\127\1\131"+
    "\1\127\1\131\2\127\2\0\5\131\2\127\1\0\7\131"+
    "\1\376\1\131\1\0\11\131\2\127\1\137\1\21\1\377"+
    "\100\137\1\316\2\0\1\317\3\316\1\u0100\1\0\23\316"+
    "\1\0\1\316\1\0\5\316\2\0\7\316\1\0\11\316"+
    "\1\0\14\316\1\0\101\316\1\320\2\0\1\321\3\320"+
    "\1\0\1\u0100\23\320\1\0\1\320\1\0\5\320\2\0"+
    "\7\320\1\0\11\320\1\0\14\320\1\0\101\320\1\144"+
    "\1\150\1\u0101\100\144\1\0\1\150\1\u0102\100\0\3\325"+
    "\1\326\15\325\1\327\20\325\1\u0103\1\330\37\325\1\0"+
    "\1\21\1\0\1\164\1\21\37\0\1\21\37\0\1\334"+
    "\102\0\1\26\1\0\1\171\1\0\2\26\2\0\10\26"+
    "\1\0\12\26\3\0\1\26\1\0\1\26\4\0\5\26"+
    "\3\0\11\26\1\0\11\26\14\0\1\342\1\0\1\342"+
    "\1\0\2\342\4\0\10\342\12\0\3\342\11\0\5\342"+
    "\1\0\11\342\21\0\1\343\4\0\5\343\2\0\1\343"+
    "\52\0\1\171\1\0\2\26\2\0\3\26\1\27\1\26"+
    "\3\27\1\0\2\26\10\27\3\0\1\26\1\172\1\173"+
    "\4\0\3\27\2\26\3\0\4\26\5\27\1\0\2\27"+
    "\1\u0104\6\27\5\0\1\171\1\0\2\26\2\0\3\26"+
    "\1\27\1\26\3\27\1\0\2\26\10\27\3\0\1\26"+
    "\1\172\1\173\4\0\1\27\1\u0105\1\27\2\26\3\0"+
    "\4\26\5\27\1\0\11\27\5\0\1\171\1\0\2\26"+
    "\2\0\3\26\1\27\1\26\3\27\1\0\2\26\10\27"+
    "\3\0\1\26\1\172\1\173\4\0\3\27\2\26\3\0"+
    "\4\26\4\27\1\u0106\1\0\11\27\5\0\1\171\1\0"+
    "\2\26\2\0\3\26\1\27\1\26\3\27\1\0\2\26"+
    "\10\27\3\0\1\26\1\172\1\173\4\0\1\27\1\u0107"+
    "\1\27\2\26\3\0\4\26\5\27\1\0\11\27\5\0"+
    "\1\171\1\0\2\26\2\0\3\26\1\27\1\26\3\27"+
    "\1\0\2\26\10\27\3\0\1\26\1\172\1\173\4\0"+
    "\3\27\2\26\3\0\4\26\5\27\1\0\7\27\1\u0108"+
    "\1\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\3\27\2\26\3\0\4\26\1\27\1\u0109"+
    "\3\27\1\0\11\27\5\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\1\27\1\u010a\1\27\2\26"+
    "\3\0\4\26\5\27\1\0\11\27\5\0\1\171\1\0"+
    "\2\26\2\0\3\26\1\27\1\26\3\27\1\0\2\26"+
    "\10\27\3\0\1\26\1\172\1\173\4\0\1\27\1\u010b"+
    "\1\27\2\26\3\0\4\26\5\27\1\0\11\27\5\0"+
    "\1\171\1\0\2\26\2\0\3\26\1\27\1\26\3\27"+
    "\1\0\2\26\10\27\3\0\1\26\1\172\1\173\4\0"+
    "\1\27\1\u010c\1\27\2\26\3\0\4\26\5\27\1\0"+
    "\11\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\3\27\2\26\3\0\4\26\4\27\1\u010d"+
    "\1\0\11\27\5\0\1\171\1\0\2\26\2\0\3\26"+
    "\1\27\1\26\3\27\1\0\2\26\10\27\3\0\1\26"+
    "\1\172\1\173\4\0\3\27\2\26\3\0\4\26\1\u010e"+
    "\4\27\1\0\11\27\5\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\1\u010f\2\27\2\26\3\0"+
    "\4\26\5\27\1\0\11\27\2\0\1\127\2\0\1\u0110"+
    "\1\0\2\127\2\0\10\127\1\0\12\127\2\0\6\127"+
    "\2\0\7\127\1\0\11\127\1\0\14\127\1\371\1\0"+
    "\1\305\1\0\2\127\2\0\10\127\1\0\12\127\2\0"+
    "\6\127\2\0\7\127\1\0\11\127\1\0\13\127\1\131"+
    "\1\u0111\1\u0112\1\307\77\131\1\127\2\0\1\u0113\1\0"+
    "\2\131\2\0\10\131\1\0\12\131\2\0\1\127\1\131"+
    "\1\127\1\131\2\127\2\0\5\131\2\127\1\0\11\131"+
    "\1\0\11\131\3\127\1\374\1\0\1\310\1\0\2\131"+
    "\2\0\10\131\1\0\12\131\2\0\1\127\1\131\1\127"+
    "\1\131\2\127\2\0\5\131\2\127\1\0\11\131\1\0"+
    "\11\131\3\127\2\0\1\310\1\0\2\131\2\0\10\131"+
    "\1\0\12\131\2\0\1\127\1\131\1\127\1\131\2\127"+
    "\2\0\5\131\2\127\1\0\10\131\1\u0114\1\0\11\131"+
    "\2\127\1\137\1\21\1\0\1\315\1\141\2\137\2\0"+
    "\23\137\1\0\1\137\1\0\5\137\1\21\1\0\7\137"+
    "\1\0\11\137\1\0\13\137\1\144\1\150\1\0\1\323"+
    "\1\147\2\144\2\0\23\144\1\0\1\144\1\0\5\144"+
    "\1\150\1\0\7\144\1\0\11\144\1\0\13\144\1\0"+
    "\1\150\1\0\1\324\1\150\37\0\1\150\41\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\3\27"+
    "\2\26\3\0\4\26\4\27\1\u0115\1\0\11\27\5\0"+
    "\1\171\1\0\2\26\2\0\3\26\1\27\1\26\3\27"+
    "\1\0\2\26\10\27\3\0\1\26\1\172\1\173\4\0"+
    "\2\27\1\u0116\2\26\3\0\4\26\5\27\1\0\11\27"+
    "\5\0\1\171\1\0\2\26\2\0\3\26\1\27\1\26"+
    "\3\27\1\0\2\26\10\27\3\0\1\26\1\172\1\173"+
    "\4\0\1\u0117\2\27\2\26\3\0\4\26\5\27\1\0"+
    "\11\27\5\0\1\171\1\0\2\26\2\0\3\26\1\27"+
    "\1\26\3\27\1\0\2\26\10\27\3\0\1\26\1\172"+
    "\1\173\4\0\1\27\1\u0118\1\27\2\26\3\0\4\26"+
    "\5\27\1\0\11\27\2\0\1\127\1\0\1\127\1\305"+
    "\100\127\2\0\1\130\1\0\2\131\2\0\10\131\1\0"+
    "\12\131\2\0\1\127\1\131\1\127\1\131\2\127\2\0"+
    "\5\131\2\127\1\0\11\131\1\0\11\131\3\127\1\u0111"+
    "\1\0\1\373\1\0\2\131\2\0\10\131\1\0\12\131"+
    "\2\0\1\127\1\131\1\127\1\131\2\127\2\0\5\131"+
    "\2\127\1\0\11\131\1\0\11\131\2\127\1\131\1\26"+
    "\1\u0119\1\307\77\131\3\0\1\171\1\0\2\26\2\0"+
    "\3\26\1\27\1\26\3\27\1\0\2\26\10\27\3\0"+
    "\1\26\1\172\1\173\4\0\2\27\1\u011a\2\26\3\0"+
    "\4\26\5\27\1\0\11\27\5\0\1\171\1\0\2\26"+
    "\2\0\3\26\1\27\1\26\3\27\1\0\2\26\10\27"+
    "\3\0\1\26\1\172\1\173\4\0\3\27\2\26\3\0"+
    "\4\26\1\u011b\4\27\1\0\11\27\2\0\1\127\1\26"+
    "\1\0\1\310\1\0\2\131\2\0\10\131\1\0\12\131"+
    "\2\0\1\127\1\131\1\127\1\131\2\127\2\0\5\131"+
    "\2\127\1\0\11\131\1\0\11\131\2\127\3\0\1\171"+
    "\1\0\2\26\2\0\3\26\1\27\1\26\3\27\1\0"+
    "\2\26\10\27\3\0\1\26\1\172\1\173\4\0\3\27"+
    "\2\26\3\0\4\26\5\27\1\0\1\27\1\u011c\7\27"+
    "\5\0\1\171\1\0\2\26\2\0\3\26\1\27\1\26"+
    "\3\27\1\0\2\26\10\27\3\0\1\26\1\172\1\173"+
    "\4\0\3\27\2\26\3\0\4\26\1\27\1\u011d\3\27"+
    "\1\0\11\27\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\1\1\0\2\11\4\1\2\11\12\1\1\11"+
    "\1\1\1\11\1\1\3\11\22\1\1\11\23\1\1\11"+
    "\2\1\1\11\1\1\2\11\12\1\1\11\7\1\1\11"+
    "\3\1\1\11\2\1\1\11\4\1\1\11\2\1\1\0"+
    "\2\1\1\0\1\11\1\0\1\11\3\1\1\11\2\1"+
    "\2\11\2\1\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\6\1\5\11\1\1\2\11\3\1\1\11\6\1"+
    "\2\11\1\1\1\11\3\0\2\1\2\11\1\1\1\0"+
    "\10\11\1\1\1\11\1\1\2\11\1\1\2\11\7\1"+
    "\1\0\1\11\14\0\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\2\11\3\1\1\11\7\1\2\11\10\1\2\11"+
    "\1\1\1\0\6\1\1\11\2\1\1\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _BashLexerGen() { this(null); }
      private static final int DOUBLE_PARENTHESES = 2;
      private static final int PARENTHESES = 1;

      private String heredocMarker;
      private boolean heredocWithWhiteSpaceIgnore;
      private IntStack stateStack = new IntStack(20);
      private IntStack parenStack = new IntStack(20);

      private void pushState(int state) {
        int currentState = yystate();
        assert currentState != YYINITIAL || stateStack.empty() : "Can't push initial state into the not empty stack";
        stateStack.push(currentState);
        yybegin(state);
      }
      private void popState() {
        assert !stateStack.empty() : "States stack is empty";
        yybegin(stateStack.pop());
      }

      private void pushParentheses(int parentheses) {
        parenStack.push(parentheses);
      }
      private void popParentheses() {
        assert !parenStack.empty() : "Parentheses stack is empty";
        parenStack.pop();
      }
      private boolean shouldCloseDoubleParen() {
        return !parenStack.empty() && parenStack.peek() == DOUBLE_PARENTHESES;
      }
      private boolean shouldCloseSingleParen() {
        return !parenStack.empty() && parenStack.peek() == PARENTHESES;
      }

      protected void onReset() {
        stateStack.clear();
        parenStack.clear();
        heredocWithWhiteSpaceIgnore = false;
        heredocMarker = null;
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BashLexerGen(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return HEREDOC_LINE;
            } 
            // fall through
          case 118: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 119: break;
          case 3: 
            { return LINEFEED;
            } 
            // fall through
          case 120: break;
          case 4: 
            { return WHITESPACE;
            } 
            // fall through
          case 121: break;
          case 5: 
            { if (yystate() == STRING_EXPRESSION) { yypushback(yylength() - 1); return WORD; } return COMMENT;
            } 
            // fall through
          case 122: break;
          case 6: 
            { return BANG;
            } 
            // fall through
          case 123: break;
          case 7: 
            { pushState(STRING_EXPRESSION); return QUOTE;
            } 
            // fall through
          case 124: break;
          case 8: 
            { return WORD;
            } 
            // fall through
          case 125: break;
          case 9: 
            { return INT;
            } 
            // fall through
          case 126: break;
          case 10: 
            { return DOLLAR;
            } 
            // fall through
          case 127: break;
          case 11: 
            { pushParentheses(PARENTHESES); return LEFT_PAREN;
            } 
            // fall through
          case 128: break;
          case 12: 
            { if (yystate() == COMMAND_SUBSTITUTION) popState(); else pushState(COMMAND_SUBSTITUTION);
                                  return BACKQUOTE;
            } 
            // fall through
          case 129: break;
          case 13: 
            { return AMP;
            } 
            // fall through
          case 130: break;
          case 14: 
            { return ASSIGN;
            } 
            // fall through
          case 131: break;
          case 15: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 132: break;
          case 16: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 133: break;
          case 17: 
            { return SEMI;
            } 
            // fall through
          case 134: break;
          case 18: 
            { return GT;
            } 
            // fall through
          case 135: break;
          case 19: 
            { return LT;
            } 
            // fall through
          case 136: break;
          case 20: 
            { return PIPE;
            } 
            // fall through
          case 137: break;
          case 21: 
            { if (shouldCloseSingleParen()) popParentheses();
                                    if (yystate() == COMMAND_SUBSTITUTION) popState(); return RIGHT_PAREN;
            } 
            // fall through
          case 138: break;
          case 22: 
            { if (yystate() != STRING_EXPRESSION) pushState(CONDITIONAL_EXPRESSION); return LEFT_SQUARE;
            } 
            // fall through
          case 139: break;
          case 23: 
            { switch (yystate()) {
                                      case OLD_ARITHMETIC_EXPRESSION: popState(); return ARITH_SQUARE_RIGHT;
                                      case CONDITIONAL_EXPRESSION: popState(); return RIGHT_SQUARE;
                                      default: return RIGHT_SQUARE; }
            } 
            // fall through
          case 140: break;
          case 24: 
            { return COMMA;
            } 
            // fall through
          case 141: break;
          case 25: 
            { return MULT;
            } 
            // fall through
          case 142: break;
          case 26: 
            { return MINUS;
            } 
            // fall through
          case 143: break;
          case 27: 
            { return PLUS;
            } 
            // fall through
          case 144: break;
          case 28: 
            { return DIV;
            } 
            // fall through
          case 145: break;
          case 29: 
            { return MOD;
            } 
            // fall through
          case 146: break;
          case 30: 
            { return XOR;
            } 
            // fall through
          case 147: break;
          case 31: 
            { return BITWISE_NEGATION;
            } 
            // fall through
          case 148: break;
          case 32: 
            { return QMARK;
            } 
            // fall through
          case 149: break;
          case 33: 
            { return COLON;
            } 
            // fall through
          case 150: break;
          case 34: 
            { popState(); return LINEFEED;
            } 
            // fall through
          case 151: break;
          case 35: 
            { return QUOTE;
            } 
            // fall through
          case 152: break;
          case 36: 
            { popState(); return SEMI;
            } 
            // fall through
          case 153: break;
          case 37: 
            { popState(); return RIGHT_PAREN;
            } 
            // fall through
          case 154: break;
          case 38: 
            { popState(); return QUOTE;
            } 
            // fall through
          case 155: break;
          case 39: 
            { if ((yycharat(yylength()-1) == '\'' || yycharat(yylength()-1) == '"') && yylength() > 2)
                                      heredocMarker = yytext().subSequence(1, yylength()-1).toString();
                                    else heredocMarker = yytext().toString();
                                    heredocMarker = heredocMarker.replaceAll("(\\\\)(.)", "$2");
                                    yybegin(HERE_DOC_PIPELINE);
                                    return HEREDOC_MARKER_START;
            } 
            // fall through
          case 156: break;
          case 40: 
            { if (yytext().toString().equals(heredocMarker))
                                    { heredocMarker = null; heredocWithWhiteSpaceIgnore = false; popState(); return HEREDOC_MARKER_END; }
                                    else { yypushback(yylength()); yybegin(HERE_DOC_BODY); }
            } 
            // fall through
          case 157: break;
          case 41: 
            { yypushback(yylength()); yybegin(HERE_DOC_BODY);
            } 
            // fall through
          case 158: break;
          case 42: 
            { if (!heredocWithWhiteSpaceIgnore) yybegin(HERE_DOC_BODY); return HEREDOC_LINE;
            } 
            // fall through
          case 159: break;
          case 43: 
            { yybegin(HERE_DOC_END_MARKER); return LINEFEED;
            } 
            // fall through
          case 160: break;
          case 44: 
            { yybegin(HERE_DOC_END_MARKER); return HEREDOC_LINE;
            } 
            // fall through
          case 161: break;
          case 45: 
            { popState(); return RIGHT_CURLY;
            } 
            // fall through
          case 162: break;
          case 46: 
            { return SHEBANG;
            } 
            // fall through
          case 163: break;
          case 47: 
            { return RAW_STRING;
            } 
            // fall through
          case 164: break;
          case 48: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return WORD;
            } 
            // fall through
          case 165: break;
          case 49: 
            { return VAR;
            } 
            // fall through
          case 166: break;
          case 50: 
            { pushState(COMMAND_SUBSTITUTION); yypushback(1); return DOLLAR;
            } 
            // fall through
          case 167: break;
          case 51: 
            { pushState(PARAMETER_EXPANSION); yypushback(1); return DOLLAR;
            } 
            // fall through
          case 168: break;
          case 52: 
            { pushState(OLD_ARITHMETIC_EXPRESSION); return ARITH_SQUARE_LEFT;
            } 
            // fall through
          case 169: break;
          case 53: 
            { return OCTAL;
            } 
            // fall through
          case 170: break;
          case 54: 
            { pushState(ARITHMETIC_EXPRESSION); pushParentheses(DOUBLE_PARENTHESES); return LEFT_DOUBLE_PAREN;
            } 
            // fall through
          case 171: break;
          case 55: 
            { return FILEDESCRIPTOR;
            } 
            // fall through
          case 172: break;
          case 56: 
            { return AND_AND;
            } 
            // fall through
          case 173: break;
          case 57: 
            { return REDIRECT_AMP_GREATER;
            } 
            // fall through
          case 174: break;
          case 58: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 175: break;
          case 59: 
            { return REDIRECT_GREATER_AMP;
            } 
            // fall through
          case 176: break;
          case 60: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 177: break;
          case 61: 
            { return REDIRECT_GREATER_BAR;
            } 
            // fall through
          case 178: break;
          case 62: 
            { return REDIRECT_LESS_AMP;
            } 
            // fall through
          case 179: break;
          case 63: 
            { return REDIRECT_LESS_GREATER;
            } 
            // fall through
          case 180: break;
          case 64: 
            { if (yystate() != HERE_DOC_PIPELINE && yystate() != STRING_EXPRESSION)
                                    { pushState(HERE_DOC_START_MARKER); return HEREDOC_MARKER_TAG; }
                                    else return SHIFT_LEFT;
            } 
            // fall through
          case 181: break;
          case 65: 
            { return PIPE_AMP;
            } 
            // fall through
          case 182: break;
          case 66: 
            { return OR_OR;
            } 
            // fall through
          case 183: break;
          case 67: 
            { pushState(IF_CONDITION); return IF;
            } 
            // fall through
          case 184: break;
          case 68: 
            { if (shouldCloseDoubleParen()) { popState(); popParentheses(); return RIGHT_DOUBLE_PAREN; }
                                    else if (shouldCloseSingleParen()) {
                                      if (yystate() == COMMAND_SUBSTITUTION) popState(); yypushback(1); popParentheses(); return RIGHT_PAREN;
                                    } else return RIGHT_DOUBLE_PAREN;
            } 
            // fall through
          case 185: break;
          case 69: 
            { return DO;
            } 
            // fall through
          case 186: break;
          case 70: 
            { if (yystate() == IF_CONDITION) popState(); return FI;
            } 
            // fall through
          case 187: break;
          case 71: 
            { if (yystate() != STRING_EXPRESSION) pushState(CONDITIONAL_EXPRESSION); return LEFT_DOUBLE_BRACKET;
            } 
            // fall through
          case 188: break;
          case 72: 
            { if (yystate() == CONDITIONAL_EXPRESSION) popState(); return RIGHT_DOUBLE_BRACKET;
            } 
            // fall through
          case 189: break;
          case 73: 
            { return NE;
            } 
            // fall through
          case 190: break;
          case 74: 
            { return EXPONENT;
            } 
            // fall through
          case 191: break;
          case 75: 
            { return MULT_ASSIGN;
            } 
            // fall through
          case 192: break;
          case 76: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 193: break;
          case 77: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 194: break;
          case 78: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 195: break;
          case 79: 
            { return EQ;
            } 
            // fall through
          case 196: break;
          case 80: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 197: break;
          case 81: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 198: break;
          case 82: 
            { return MOD_ASSIGN;
            } 
            // fall through
          case 199: break;
          case 83: 
            { return GE;
            } 
            // fall through
          case 200: break;
          case 84: 
            { return LE;
            } 
            // fall through
          case 201: break;
          case 85: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 202: break;
          case 86: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 203: break;
          case 87: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 204: break;
          case 88: 
            { return REGEXP;
            } 
            // fall through
          case 205: break;
          case 89: 
            { pushState(CASE_PATTERN);    return CASE_END;
            } 
            // fall through
          case 206: break;
          case 90: 
            { if (yystate() == CASE_CONDITION) pushState(CASE_PATTERN); return WORD;
            } 
            // fall through
          case 207: break;
          case 91: 
            { if (contains(yytext(), '"')) { yypushback(yylength() - 1); return WORD; }  else return RAW_STRING;
            } 
            // fall through
          case 208: break;
          case 92: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return PARAMETER_EXPANSION_BODY;
            } 
            // fall through
          case 209: break;
          case 93: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return WORD;
            } 
            // fall through
          case 210: break;
          case 94: 
            { yypushback(2); return DOLLAR;
            } 
            // fall through
          case 211: break;
          case 95: 
            { return HEX;
            } 
            // fall through
          case 212: break;
          case 96: 
            { return REDIRECT_AMP_GREATER_GREATER;
            } 
            // fall through
          case 213: break;
          case 97: 
            { pushState(LET_EXPRESSION); return LET;
            } 
            // fall through
          case 214: break;
          case 98: 
            { if (yystate() != HERE_DOC_PIPELINE && yystate() != STRING_EXPRESSION)
                                    { pushState(HERE_DOC_START_MARKER); heredocWithWhiteSpaceIgnore = true; return HEREDOC_MARKER_TAG; }
                                    else return SHIFT_LEFT;
            } 
            // fall through
          case 215: break;
          case 99: 
            { return REDIRECT_HERE_STRING;
            } 
            // fall through
          case 216: break;
          case 100: 
            { pushState(OTHER_CONDITIONS); return FOR;
            } 
            // fall through
          case 217: break;
          case 101: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 218: break;
          case 102: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 219: break;
          case 103: 
            { return LET;
            } 
            // fall through
          case 220: break;
          case 104: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return PARAMETER_EXPANSION_BODY;
            } 
            // fall through
          case 221: break;
          case 105: 
            { return ELIF;
            } 
            // fall through
          case 222: break;
          case 106: 
            { return ELSE;
            } 
            // fall through
          case 223: break;
          case 107: 
            { if (yystate() == CASE_CONDITION) popState(); return ESAC;
            } 
            // fall through
          case 224: break;
          case 108: 
            { return TIME;
            } 
            // fall through
          case 225: break;
          case 109: 
            { return TRAP;
            } 
            // fall through
          case 226: break;
          case 110: 
            { return THEN;
            } 
            // fall through
          case 227: break;
          case 111: 
            { pushState(CASE_CONDITION); return CASE;
            } 
            // fall through
          case 228: break;
          case 112: 
            { if (yystate() == OTHER_CONDITIONS) popState(); return DONE;
            } 
            // fall through
          case 229: break;
          case 113: 
            { popState(); yypushback(yylength());
            } 
            // fall through
          case 230: break;
          case 114: 
            { pushState(OTHER_CONDITIONS); return UNTIL;
            } 
            // fall through
          case 231: break;
          case 115: 
            { pushState(OTHER_CONDITIONS); return WHILE;
            } 
            // fall through
          case 232: break;
          case 116: 
            { pushState(OTHER_CONDITIONS); return SELECT;
            } 
            // fall through
          case 233: break;
          case 117: 
            { return FUNCTION;
            } 
            // fall through
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
