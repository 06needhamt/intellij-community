/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.bash.lexer;

import com.intellij.psi.tree.IElementType;
import static com.intellij.bash.lexer.BashTokenTypes.*;
import com.intellij.util.containers.Stack;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>bash.flex</tt>
 */
public class _BashLexerGen implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESSIONS = 2;
  public static final int PARAMETER_EXPANSION = 4;
  public static final int CASE_CLAUSE = 6;
  public static final int CASE_PATTERN = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14304 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\141\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\142\1\24"+
    "\45\12\1\143\1\12\1\24\1\27\4\12\1\27\1\144\1\145\1\15\1\12\1\15\1\12\1\15"+
    "\1\145\1\70\3\12\1\146\1\1\1\147\1\114\2\1\1\114\5\12\1\26\1\150\1\12\1\151"+
    "\4\12\1\37\1\12\1\152\2\1\1\64\1\12\1\153\1\154\2\12\1\155\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\154\2\1\2\114\1\156\5\1\1\107\2\12\1\146\1\157\1\114"+
    "\2\1\1\160\1\12\1\161\1\41\2\12\1\37\1\1\2\12\1\146\1\1\1\162\1\41\1\12\1"+
    "\153\1\45\5\1\1\163\1\164\14\12\4\1\21\12\1\142\2\12\1\142\1\165\1\12\1\153"+
    "\3\12\1\166\1\167\1\170\1\124\1\167\7\1\1\171\1\1\1\124\6\1\1\172\1\173\1"+
    "\174\1\175\1\176\3\1\1\177\147\1\2\12\1\152\2\12\1\152\10\12\1\200\1\201\2"+
    "\12\1\133\3\12\1\202\1\1\1\12\1\112\4\203\4\1\1\126\35\1\1\204\2\1\1\205\1"+
    "\24\4\12\1\206\1\24\4\12\1\134\1\107\1\12\1\153\1\24\4\12\1\152\1\1\1\12\1"+
    "\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1\2\12\1\153"+
    "\20\12\1\124\1\12\1\207\1\1\2\12\1\152\1\126\1\12\1\153\4\12\1\37\2\1\1\210"+
    "\1\211\5\12\1\212\1\12\1\152\1\26\3\1\1\210\1\213\1\12\1\30\1\1\3\12\1\146"+
    "\1\211\2\12\1\146\1\1\1\114\1\1\1\214\1\41\1\12\1\37\1\12\1\112\1\1\1\12\1"+
    "\124\1\47\2\12\1\30\1\126\1\114\1\215\1\216\2\12\1\45\1\1\1\217\1\114\1\12"+
    "\1\220\3\12\1\221\1\222\1\223\1\27\1\65\1\224\1\225\1\203\2\12\1\134\1\37"+
    "\7\12\1\30\1\114\72\12\1\146\1\12\1\226\2\12\1\155\20\1\26\12\1\153\6\12\1"+
    "\76\2\1\1\112\1\227\1\55\1\230\1\231\6\12\1\15\1\1\1\160\25\12\1\153\1\1\4"+
    "\12\1\211\2\12\1\26\2\1\1\155\7\1\1\215\7\12\1\124\1\1\1\114\1\24\1\27\1\24"+
    "\1\27\1\232\4\12\1\152\1\233\1\234\2\1\1\235\1\12\1\141\1\236\2\153\2\1\7"+
    "\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\237\2\12\1\37\1\12"+
    "\1\153\2\12\1\240\3\1\11\12\1\153\1\114\2\12\1\240\1\12\1\155\2\12\1\26\3"+
    "\12\1\146\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\241\2\12\1\242\1\12\1\37"+
    "\1\12\1\112\1\12\1\152\4\1\1\12\1\243\1\12\1\37\1\12\1\76\4\1\3\12\1\244\4"+
    "\1\1\70\1\245\1\12\1\146\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1\12\1\154\1"+
    "\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12"+
    "\1\30\60\1\1\160\2\12\1\26\2\1\1\64\1\1\1\160\2\12\2\1\1\12\1\45\1\114\1\160"+
    "\1\12\1\112\1\64\1\1\2\12\1\246\1\160\2\12\1\30\1\247\1\250\2\1\1\12\1\21"+
    "\1\155\5\1\1\251\1\252\1\45\2\12\1\152\1\1\1\114\1\72\1\54\1\55\1\67\1\1\1"+
    "\253\1\15\11\1\3\12\1\154\1\254\1\114\2\1\3\12\1\1\1\255\1\114\12\1\2\12\1"+
    "\152\2\1\1\256\2\1\3\12\1\1\1\257\1\114\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1"+
    "\76\1\1\1\114\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1\12\1\152\1"+
    "\1\1\70\1\114\1\1\1\211\1\12\67\1\71\12\1\76\16\1\14\12\1\146\53\1\2\12\1"+
    "\152\75\1\44\12\1\112\33\1\43\12\1\45\1\12\1\152\1\114\6\1\1\12\1\153\1\1"+
    "\3\12\1\1\1\146\1\114\1\160\1\260\1\12\67\1\4\12\1\154\1\70\3\1\1\160\4\1"+
    "\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124\1\45\1"+
    "\76\66\1\5\12\1\215\3\12\1\145\1\261\1\262\1\263\3\12\1\264\1\265\1\12\1\266"+
    "\1\267\1\35\24\12\1\270\1\12\1\35\1\134\1\12\1\134\1\12\1\215\1\12\1\215\1"+
    "\152\1\12\1\152\1\12\1\55\1\12\1\55\1\12\1\271\3\272\14\12\1\154\3\1\4\12"+
    "\1\146\1\114\112\1\1\263\1\12\1\273\1\274\1\275\1\276\1\277\1\300\1\301\1"+
    "\155\1\302\1\155\24\1\55\12\1\112\2\1\103\12\1\154\15\12\1\153\150\12\1\15"+
    "\25\1\41\12\1\153\36\1");

  /* The ZZ_CMAP_A table has 3120 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\1\0\1\4\1\2\22\0\1\70\1\6\1\7\1\5\1\20\1\41\1\16\1\10\1\30\1"+
    "\42\1\23\1\11\1\17\1\21\1\14\1\40\1\24\7\27\2\15\1\37\1\50\1\73\1\32\1\72"+
    "\1\36\1\22\6\26\24\13\1\67\1\3\1\71\1\35\1\13\1\31\1\46\1\26\1\47\1\53\1\44"+
    "\1\56\1\13\1\62\1\51\2\13\1\55\1\65\1\52\1\54\1\64\1\13\1\57\1\45\1\61\1\60"+
    "\1\13\1\63\1\25\2\13\1\43\1\66\1\33\1\34\13\0\1\13\12\0\1\13\4\0\1\13\5\0"+
    "\27\13\1\12\12\13\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13\1\0\5\13\1\0\2\13"+
    "\2\0\4\13\1\0\1\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0\4\13\1\0\23\13\1\0\13\13"+
    "\10\0\6\13\1\0\26\13\2\0\1\13\6\0\10\13\10\0\13\13\5\0\3\13\15\0\12\12\4\0"+
    "\6\13\1\0\1\13\17\0\2\13\7\0\2\13\12\12\3\13\2\0\2\13\1\0\16\13\15\0\11\13"+
    "\13\0\1\13\16\0\12\12\6\13\4\0\2\13\4\0\1\13\5\0\6\13\4\0\1\13\11\0\1\13\3"+
    "\0\1\13\7\0\11\13\7\0\5\13\1\0\10\13\6\0\26\13\3\0\1\13\2\0\1\13\7\0\12\13"+
    "\4\0\12\12\1\13\4\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3"+
    "\0\1\13\20\0\1\13\15\0\2\13\1\0\1\13\5\0\6\13\4\0\2\13\1\0\2\13\1\0\2\13\1"+
    "\0\2\13\17\0\4\13\1\0\1\13\7\0\12\12\2\0\3\13\20\0\11\13\1\0\2\13\1\0\2\13"+
    "\1\0\5\13\3\0\1\13\2\0\1\13\30\0\1\13\13\0\10\13\2\0\1\13\3\0\1\13\1\0\6\13"+
    "\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13"+
    "\13\0\10\13\1\0\2\13\10\0\3\13\5\0\1\13\4\0\10\13\1\0\6\13\1\0\5\13\3\0\1"+
    "\13\3\0\2\13\15\0\13\13\2\0\1\13\6\0\3\13\10\0\1\13\12\0\6\13\5\0\22\13\3"+
    "\0\10\13\1\0\11\13\1\0\1\13\2\0\7\13\11\0\1\13\1\0\2\13\14\0\12\12\7\0\2\13"+
    "\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1"+
    "\0\1\13\2\0\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0\1\13\11\0\12\12"+
    "\2\0\14\13\1\0\24\13\13\0\5\13\22\0\7\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0\3"+
    "\13\4\0\15\13\14\0\1\13\1\0\6\13\1\0\1\13\5\0\1\13\2\0\13\13\1\0\15\13\1\0"+
    "\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\1\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4"+
    "\13\2\0\17\13\1\0\16\13\2\0\6\13\2\0\15\13\2\0\1\13\1\0\10\13\7\0\15\13\1"+
    "\0\6\13\23\0\1\13\4\0\1\13\3\0\5\13\2\0\22\13\1\0\1\13\5\0\17\13\1\0\16\13"+
    "\2\0\5\13\13\0\14\13\13\0\1\13\15\0\7\13\7\0\16\13\15\0\2\13\12\12\3\0\3\13"+
    "\11\0\4\13\1\0\4\13\3\0\2\13\11\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\6\13"+
    "\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13\5\0\1\13\15\0\1\13"+
    "\2\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\4\0\2\13\13\0\5\13\6\0\4\13"+
    "\3\0\2\13\14\0\10\13\7\0\10\13\1\0\7\13\6\0\2\13\12\0\5\13\5\0\2\13\3\0\7"+
    "\13\6\0\3\13\12\12\2\13\13\0\11\13\2\0\27\13\2\0\7\13\1\0\3\13\1\0\4\13\1"+
    "\0\4\13\2\0\6\13\3\0\1\13\1\0\1\13\2\0\5\13\1\0\12\13\12\12\5\13\1\0\3\13"+
    "\1\0\10\13\4\0\7\13\3\0\1\13\3\0\2\13\1\0\1\13\3\0\2\13\2\0\5\13\2\0\1\13"+
    "\1\0\1\13\30\0\3\13\3\0\6\13\2\0\6\13\2\0\6\13\11\0\7\13\4\0\5\13\3\0\5\13"+
    "\5\0\1\13\1\0\10\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0\12\13\6\0\12\13"+
    "\2\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13\3\0\14\13\1\0\16\13\1\0\2\13\1\0\2\13"+
    "\1\0\10\13\6\0\4\13\4\0\16\13\2\0\1\13\1\0\14\13\1\0\2\13\3\0\1\13\2\0\4\13"+
    "\1\0\2\13\12\0\10\13\6\0\6\13\1\0\3\13\1\0\12\13\3\0\1\13\12\0\4\13\13\0\12"+
    "\12\1\13\1\0\1\13\3\0\7\13\1\0\1\13\1\0\4\13\1\0\17\13\1\0\2\13\14\0\3\13"+
    "\7\0\4\13\11\0\2\13\1\0\1\13\20\0\4\13\10\0\1\13\13\0\10\13\5\0\3\13\2\0\1"+
    "\13\2\0\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0\21\13\1\0\4\13\2\0\10"+
    "\13\1\0\7\13\1\0\14\13\1\0\4\13\1\0\5\13\1\0\1\13\3\0\14\13\2\0\13\13\1\0"+
    "\10\13\2\0\22\12\1\0\2\13\1\0\1\13\2\0\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1"+
    "\0\1\13\6\0\1\13\4\0\1\13\1\0\1\13\1\0\1\13\1\0\3\13\1\0\2\13\1\0\1\13\2\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7"+
    "\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0\12\13\1\0\5\13\1\0\3\13\1\0\5\13\1\0\5"+
    "\13");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\4\7\1\10\1\11\1\12\1\13\1\10\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\3\7\1\22\7\7"+
    "\1\23\1\24\1\3\1\25\1\26\1\27\1\1\1\30"+
    "\2\7\1\10\1\12\1\31\1\32\1\10\1\14\1\16"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\20\2\41"+
    "\1\42\1\7\1\22\6\7\1\43\4\7\1\0\1\4"+
    "\1\44\1\45\1\0\1\46\1\0\1\47\1\0\1\7"+
    "\1\50\1\0\1\51\1\52\2\51\1\53\2\54\1\55"+
    "\1\56\1\7\1\57\4\7\1\60\1\61\1\7\1\62"+
    "\7\7\1\63\1\64\1\0\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\7\1\77"+
    "\1\0\1\100\1\101\1\56\1\7\1\102\1\103\2\0"+
    "\2\104\1\7\2\105\1\106\10\7\1\3\2\44\1\7"+
    "\1\107\1\110\1\111\6\7\1\112\1\113\6\7\1\114"+
    "\1\115\1\116\1\111\1\7\1\0\12\7\1\117\1\120"+
    "\1\121\1\7\1\122\1\123\2\7\1\124\1\125\1\126"+
    "\1\7\1\127\3\7\1\130\2\7\1\131\1\132\2\7"+
    "\1\133\2\7\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u012c\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0384\0\u0438\0\u0474\0\u04b0"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u04ec\0\u0528\0\u0564"+
    "\0\u012c\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u012c\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\u0924\0\u099c\0\u09d8\0\u0a14\0\u012c"+
    "\0\u0a50\0\u0924\0\u0924\0\u0924\0\u0924\0\u0924\0\u0924\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u012c\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u012c\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u012c\0\u0294\0\u012c\0\u0ec4\0\u012c"+
    "\0\u01a4\0\u0f00\0\u012c\0\u0870\0\u0f3c\0\u0924\0\u012c\0\u0924"+
    "\0\u0f78\0\u012c\0\u0fb4\0\u012c\0\u0ff0\0\u102c\0\u012c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u0348\0\u1158\0\u1194\0\u0348\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u012c\0\u012c"+
    "\0\u1374\0\u012c\0\u13b0\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u13ec\0\u1428\0\u012c\0\u1464\0\u012c\0\u0924"+
    "\0\u14a0\0\u14dc\0\u012c\0\u012c\0\u0ac8\0\u0b04\0\u012c\0\u0ac8"+
    "\0\u1518\0\u012c\0\u1554\0\u0348\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u012c\0\u17ac\0\u17e8"+
    "\0\u012c\0\u012c\0\u102c\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u0348\0\u0348\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u012c\0\u012c\0\u012c\0\u14dc\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u0348\0\u0348\0\u0348\0\u1dc4\0\u0348\0\u0348\0\u1e00"+
    "\0\u1e3c\0\u0348\0\u0348\0\u0348\0\u1e78\0\u0348\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u0ca8\0\u1f68\0\u1fa4\0\u0348\0\u0348\0\u1fe0\0\u201c"+
    "\0\u0348\0\u2058\0\u2094\0\u0348";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\20\2\22\1\27\2\21\1\23\1\30\1\31"+
    "\1\32\1\33\6\22\1\34\1\35\1\36\1\37\1\21"+
    "\1\40\1\41\1\42\1\21\1\43\1\21\1\44\1\45"+
    "\1\21\1\46\1\47\1\21\1\50\2\21\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\6\1\7\1\10\1\57"+
    "\1\12\1\13\1\14\1\15\1\16\1\60\1\6\1\61"+
    "\1\62\1\63\1\24\1\64\1\26\1\65\1\62\1\66"+
    "\1\67\2\61\1\63\1\70\1\31\1\71\1\33\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\35\4\61"+
    "\1\41\15\61\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\3\101\1\102\27\101\1\103\7\101\1\35\30\101\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\20\2\22\1\27\2\21\1\23\1\30\1\31\1\32"+
    "\1\33\6\22\1\34\1\35\1\104\1\37\1\21\1\40"+
    "\1\105\1\106\1\21\1\43\1\21\1\44\1\45\1\21"+
    "\1\46\1\47\1\21\1\50\2\21\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\107\1\7\1\10\1\110\1\12"+
    "\1\13\1\107\1\15\1\16\2\111\3\112\1\113\1\112"+
    "\1\26\1\111\6\112\1\30\3\107\6\112\1\114\1\107"+
    "\1\115\3\112\1\107\15\112\1\51\1\116\1\53\1\107"+
    "\1\117\1\107\75\0\1\7\72\0\2\22\1\120\71\22"+
    "\3\0\1\121\1\12\63\0\1\12\3\0\1\122\2\0"+
    "\3\122\1\123\65\122\32\0\1\124\41\0\10\125\1\126"+
    "\63\125\3\0\1\127\1\0\2\20\2\0\5\20\1\0"+
    "\1\20\1\0\7\20\2\0\1\130\1\0\6\20\2\0"+
    "\4\20\1\0\15\20\11\0\1\127\1\0\2\20\2\0"+
    "\5\20\1\0\1\20\1\0\7\20\4\0\6\20\2\0"+
    "\4\20\1\0\15\20\11\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\4\21\1\0\15\21\11\0\1\131\1\0\2\22\2\0"+
    "\2\20\3\22\1\62\1\22\1\0\1\20\6\22\4\0"+
    "\6\22\2\0\4\22\1\0\15\22\11\0\1\131\1\0"+
    "\2\22\2\0\2\20\2\22\1\23\1\62\1\22\1\0"+
    "\1\20\2\22\1\23\2\22\1\23\4\0\6\22\2\0"+
    "\4\22\1\0\15\22\11\0\1\134\1\0\2\62\4\0"+
    "\2\62\1\135\1\136\1\62\1\0\1\137\2\62\1\140"+
    "\2\62\1\135\4\0\6\62\2\0\4\62\1\0\15\62"+
    "\4\0\1\141\6\0\2\142\4\0\1\143\1\0\1\142"+
    "\2\0\5\142\2\143\1\142\6\0\1\142\4\0\1\144"+
    "\4\143\1\0\15\143\11\0\1\131\1\0\2\22\2\0"+
    "\2\20\3\22\1\62\1\22\1\0\1\20\2\22\1\145"+
    "\1\146\1\22\1\145\4\0\6\22\2\0\4\22\1\0"+
    "\15\22\36\0\1\147\46\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\1\21\1\150\2\21\1\0\4\21\1\151\10\21\11\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\1\152\3\21\1\0\15\21"+
    "\11\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\2\21\1\153\1\21"+
    "\1\0\15\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\4\21"+
    "\1\0\5\21\1\154\7\21\11\0\1\131\1\0\2\22"+
    "\2\0\1\132\1\20\1\21\1\22\1\21\1\62\1\22"+
    "\1\0\1\20\2\22\4\21\2\0\1\133\1\0\6\22"+
    "\2\0\4\21\1\0\3\21\1\155\11\21\11\0\1\131"+
    "\1\0\2\22\2\0\1\132\1\20\1\21\1\22\1\21"+
    "\1\62\1\22\1\0\1\20\2\22\4\21\2\0\1\133"+
    "\1\0\6\22\2\0\1\156\3\21\1\0\15\21\11\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\4\21\1\0\1\157\2\21"+
    "\1\160\3\21\1\161\5\21\11\0\1\131\1\0\2\22"+
    "\2\0\1\132\1\20\1\21\1\22\1\21\1\62\1\22"+
    "\1\0\1\20\2\22\4\21\2\0\1\133\1\0\6\22"+
    "\2\0\4\21\1\0\1\21\1\162\13\21\11\0\1\131"+
    "\1\0\2\22\2\0\1\132\1\20\1\21\1\22\1\21"+
    "\1\62\1\22\1\0\1\20\2\22\4\21\2\0\1\133"+
    "\1\0\6\22\2\0\4\21\1\0\1\163\5\21\1\164"+
    "\2\21\1\165\3\21\11\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\4\21\1\0\11\21\1\166\3\21\24\0\1\167\47\0"+
    "\1\170\74\0\1\171\1\172\6\0\1\121\1\12\63\0"+
    "\1\12\1\173\20\0\1\174\13\0\1\175\33\0\1\176"+
    "\3\0\1\177\17\0\1\200\13\0\1\201\37\0\1\202"+
    "\1\203\2\62\1\204\71\62\11\0\1\205\20\0\1\130"+
    "\44\0\1\134\1\0\2\62\2\0\1\206\1\0\1\61"+
    "\1\62\1\61\2\62\2\0\2\62\4\61\2\0\1\133"+
    "\1\0\6\62\2\0\4\61\1\0\15\61\11\0\1\134"+
    "\1\0\2\62\4\0\5\62\2\0\6\62\4\0\6\62"+
    "\2\0\4\62\1\0\15\62\11\0\1\134\1\0\2\62"+
    "\4\0\2\62\1\63\2\62\2\0\2\62\1\63\2\62"+
    "\1\63\4\0\6\62\2\0\4\62\1\0\15\62\27\0"+
    "\1\207\55\0\1\134\1\0\2\62\4\0\5\62\2\0"+
    "\1\62\1\210\4\62\4\0\6\62\2\0\4\62\1\0"+
    "\15\62\11\0\1\134\1\0\2\62\4\0\5\62\2\0"+
    "\2\62\1\211\1\212\1\62\1\211\4\0\6\62\2\0"+
    "\4\62\1\0\15\62\40\0\1\213\103\0\1\214\31\0"+
    "\3\215\1\216\27\215\1\217\7\215\1\0\33\215\1\216"+
    "\27\215\1\220\7\215\1\0\30\215\3\0\1\131\1\0"+
    "\2\22\2\0\1\132\1\20\1\21\1\22\1\21\1\62"+
    "\1\22\1\0\1\20\2\22\4\21\2\0\1\133\1\0"+
    "\6\22\2\0\1\21\1\221\2\21\1\0\4\21\1\151"+
    "\10\21\24\0\1\222\31\0\1\223\26\0\1\131\1\0"+
    "\2\22\2\0\1\132\1\20\1\21\1\22\1\21\1\62"+
    "\1\22\1\0\1\20\2\22\4\21\2\0\1\133\1\0"+
    "\6\22\2\0\4\21\1\0\1\21\1\224\3\21\1\154"+
    "\7\21\6\0\1\107\2\0\1\225\1\0\2\107\2\0"+
    "\7\107\1\0\7\107\2\0\10\107\1\0\5\107\1\0"+
    "\15\107\1\0\1\107\1\0\3\107\1\112\1\22\1\226"+
    "\1\227\70\112\1\107\2\0\1\230\1\0\2\111\2\0"+
    "\5\111\1\107\1\111\1\0\7\111\2\0\2\107\6\111"+
    "\1\0\1\107\4\111\1\0\15\111\1\0\1\107\1\0"+
    "\4\107\2\0\1\231\1\0\2\112\2\0\2\111\3\112"+
    "\1\113\1\112\1\0\1\111\6\112\2\0\2\107\6\112"+
    "\1\0\1\107\4\112\1\0\15\112\1\0\1\107\1\0"+
    "\4\107\2\0\1\232\1\0\2\113\2\0\2\107\5\113"+
    "\1\0\1\107\6\113\2\0\2\107\6\113\1\0\1\107"+
    "\4\113\1\0\15\113\1\0\1\107\1\0\4\107\2\0"+
    "\1\231\1\0\2\112\2\0\2\111\3\112\1\113\1\112"+
    "\1\0\1\111\6\112\2\0\2\107\6\112\1\0\1\107"+
    "\1\112\1\233\2\112\1\0\15\112\1\0\1\107\1\0"+
    "\4\107\2\0\1\225\1\0\2\107\2\0\7\107\1\0"+
    "\7\107\2\0\10\107\1\0\5\107\1\0\15\107\1\0"+
    "\1\234\1\172\4\107\2\0\1\225\1\0\2\107\2\0"+
    "\7\107\1\0\7\107\2\0\10\107\1\0\5\107\1\0"+
    "\15\107\1\176\1\107\1\0\3\107\1\0\1\22\1\0"+
    "\1\131\1\0\2\22\2\0\2\20\3\22\1\62\1\22"+
    "\1\0\1\20\6\22\4\0\6\22\2\0\4\22\1\0"+
    "\15\22\7\0\1\12\1\235\71\0\1\122\2\0\71\122"+
    "\1\123\1\236\1\237\71\123\2\20\1\240\71\20\3\0"+
    "\1\127\1\0\2\20\2\0\5\20\1\0\1\20\1\0"+
    "\7\20\2\0\1\241\1\0\6\20\2\0\4\20\1\0"+
    "\15\20\11\0\1\134\1\0\2\62\4\0\2\62\1\135"+
    "\2\62\2\0\2\62\1\135\2\62\1\135\4\0\6\62"+
    "\2\0\4\62\1\0\15\62\100\0\1\242\14\0\1\143"+
    "\1\0\1\143\6\0\4\143\14\0\4\143\1\0\15\143"+
    "\11\0\1\131\1\0\2\22\2\0\2\20\3\22\1\62"+
    "\1\22\1\0\1\20\2\22\1\145\2\22\1\145\4\0"+
    "\6\22\2\0\4\22\1\0\15\22\11\0\1\131\1\0"+
    "\2\22\2\0\2\20\2\22\1\243\1\62\1\22\1\0"+
    "\1\20\2\22\1\243\1\22\2\243\4\0\6\22\2\0"+
    "\1\243\1\22\2\243\1\0\2\22\1\243\2\22\1\243"+
    "\7\22\11\0\1\131\1\0\2\22\2\0\1\132\1\20"+
    "\1\21\1\22\1\21\1\62\1\22\1\0\1\20\2\22"+
    "\4\21\2\0\1\133\1\0\6\22\2\0\2\21\1\244"+
    "\1\21\1\0\15\21\11\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\1\21\1\245\2\21\1\0\1\246\14\21\11\0\1\131"+
    "\1\0\2\22\2\0\1\132\1\20\1\21\1\22\1\21"+
    "\1\62\1\22\1\0\1\20\2\22\4\21\2\0\1\133"+
    "\1\0\6\22\2\0\4\21\1\0\4\21\1\247\10\21"+
    "\11\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\1\21\1\250\2\21"+
    "\1\0\15\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\4\21"+
    "\1\0\1\21\1\251\13\21\11\0\1\131\1\0\2\22"+
    "\2\0\1\132\1\20\1\21\1\22\1\21\1\62\1\22"+
    "\1\0\1\20\2\22\4\21\2\0\1\133\1\0\6\22"+
    "\2\0\4\21\1\0\10\21\1\252\4\21\11\0\1\131"+
    "\1\0\2\22\2\0\1\132\1\20\1\21\1\22\1\21"+
    "\1\62\1\22\1\0\1\20\2\22\4\21\2\0\1\133"+
    "\1\0\6\22\2\0\4\21\1\0\6\21\1\253\6\21"+
    "\11\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\4\21\1\0\1\21"+
    "\1\254\13\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\4\21"+
    "\1\0\10\21\1\255\4\21\11\0\1\131\1\0\2\22"+
    "\2\0\1\132\1\20\1\21\1\22\1\21\1\62\1\22"+
    "\1\0\1\20\2\22\4\21\2\0\1\133\1\0\6\22"+
    "\2\0\4\21\1\0\14\21\1\256\11\0\1\131\1\0"+
    "\2\22\2\0\1\132\1\20\1\21\1\22\1\21\1\62"+
    "\1\22\1\0\1\20\2\22\4\21\2\0\1\133\1\0"+
    "\6\22\2\0\2\21\1\257\1\21\1\0\15\21\11\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\1\260\3\21\1\0\15\21"+
    "\11\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\4\21\1\0\1\261"+
    "\14\21\76\0\1\262\74\0\1\263\75\0\1\264\1\0"+
    "\1\62\1\0\1\134\1\0\2\62\4\0\5\62\2\0"+
    "\6\62\4\0\6\62\2\0\4\62\1\0\15\62\40\0"+
    "\1\241\44\0\1\134\1\0\2\62\4\0\5\62\2\0"+
    "\2\62\1\211\2\62\1\211\4\0\6\62\2\0\4\62"+
    "\1\0\15\62\11\0\1\134\1\0\2\62\4\0\2\62"+
    "\1\265\2\62\2\0\2\62\1\265\1\62\2\265\4\0"+
    "\6\62\2\0\1\265\1\62\2\265\1\0\2\62\1\265"+
    "\2\62\1\265\7\62\11\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\2\21\1\266\1\21\1\0\15\21\24\0\1\222\55\0"+
    "\1\107\1\267\1\270\1\225\71\107\1\22\1\0\1\231"+
    "\1\0\2\112\2\0\2\111\3\112\1\113\1\112\1\0"+
    "\1\111\6\112\2\0\2\107\6\112\1\0\1\107\4\112"+
    "\1\0\15\112\1\0\1\107\1\0\4\107\1\267\1\270"+
    "\1\231\1\107\2\112\2\107\2\111\3\112\1\113\1\112"+
    "\1\107\1\111\6\112\4\107\6\112\2\107\4\112\1\107"+
    "\15\112\6\107\1\111\1\271\1\272\1\273\70\111\1\112"+
    "\1\274\1\275\1\227\70\112\1\113\1\276\1\277\1\300"+
    "\70\113\1\107\2\0\1\231\1\0\2\112\2\0\2\111"+
    "\3\112\1\113\1\112\1\0\1\111\6\112\2\0\2\107"+
    "\6\112\1\0\1\107\2\112\1\301\1\112\1\0\15\112"+
    "\1\0\1\107\1\0\4\107\2\0\1\225\1\0\2\107"+
    "\2\0\7\107\1\0\7\107\2\0\10\107\1\0\5\107"+
    "\1\0\15\107\1\0\1\107\1\262\3\107\1\0\1\12"+
    "\1\0\1\121\1\12\63\0\1\12\4\0\1\236\73\0"+
    "\1\20\1\0\1\127\1\0\2\20\2\0\5\20\1\0"+
    "\1\20\1\0\7\20\4\0\6\20\2\0\4\20\1\0"+
    "\15\20\11\0\1\131\1\0\2\22\2\0\1\132\1\20"+
    "\1\21\1\22\1\21\1\62\1\22\1\0\1\20\2\22"+
    "\4\21\2\0\1\133\1\0\6\22\2\0\3\21\1\302"+
    "\1\0\15\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\1\303"+
    "\3\21\1\0\15\21\11\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\4\21\1\0\5\21\1\304\7\21\11\0\1\131\1\0"+
    "\2\22\2\0\1\132\1\20\1\21\1\22\1\21\1\62"+
    "\1\22\1\0\1\20\2\22\4\21\2\0\1\133\1\0"+
    "\6\22\2\0\1\305\3\21\1\0\15\21\11\0\1\131"+
    "\1\0\2\22\2\0\1\132\1\20\1\21\1\22\1\21"+
    "\1\62\1\22\1\0\1\20\2\22\4\21\2\0\1\133"+
    "\1\0\6\22\2\0\1\306\3\21\1\0\15\21\11\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\1\307\3\21\1\0\15\21"+
    "\11\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\3\21\1\310\1\0"+
    "\15\21\11\0\1\131\1\0\2\22\2\0\1\132\1\20"+
    "\1\21\1\22\1\21\1\62\1\22\1\0\1\20\2\22"+
    "\4\21\2\0\1\133\1\0\6\22\2\0\4\21\1\0"+
    "\1\311\14\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\1\312"+
    "\3\21\1\0\15\21\11\0\1\131\1\0\2\22\2\0"+
    "\1\132\1\20\1\21\1\22\1\21\1\62\1\22\1\0"+
    "\1\20\2\22\4\21\2\0\1\133\1\0\6\22\2\0"+
    "\4\21\1\0\13\21\1\313\1\21\11\0\1\131\1\0"+
    "\2\22\2\0\1\132\1\20\1\21\1\22\1\21\1\62"+
    "\1\22\1\0\1\20\2\22\4\21\2\0\1\133\1\0"+
    "\6\22\2\0\4\21\1\0\1\21\1\314\13\21\11\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\4\21\1\0\4\21\1\315"+
    "\10\21\11\0\1\131\1\0\2\22\2\0\1\132\1\20"+
    "\1\21\1\22\1\21\1\62\1\22\1\0\1\20\2\22"+
    "\4\21\2\0\1\133\1\0\6\22\2\0\3\21\1\316"+
    "\1\0\15\21\6\0\1\107\2\0\1\317\1\0\2\107"+
    "\2\0\7\107\1\0\7\107\2\0\10\107\1\0\5\107"+
    "\1\0\15\107\1\0\1\107\1\0\4\107\1\267\1\0"+
    "\1\225\1\0\2\107\2\0\7\107\1\0\7\107\2\0"+
    "\10\107\1\0\5\107\1\0\15\107\1\0\1\107\1\0"+
    "\4\107\2\0\1\320\1\0\2\111\2\0\5\111\1\107"+
    "\1\111\1\0\7\111\2\0\2\107\6\111\1\0\1\107"+
    "\4\111\1\0\15\111\1\0\1\107\1\0\4\107\1\271"+
    "\1\0\1\230\1\0\2\111\2\0\5\111\1\107\1\111"+
    "\1\0\7\111\2\0\2\107\6\111\1\0\1\107\4\111"+
    "\1\0\15\111\1\0\1\107\1\0\4\107\1\267\1\270"+
    "\1\230\1\107\2\111\2\107\5\111\1\107\1\111\1\107"+
    "\7\111\4\107\6\111\2\107\4\111\1\107\15\111\7\107"+
    "\2\0\1\110\1\0\2\112\2\0\2\111\3\112\1\113"+
    "\1\112\1\0\1\111\6\112\2\0\2\107\6\112\1\0"+
    "\1\107\4\112\1\0\15\112\1\0\1\107\1\0\4\107"+
    "\1\274\1\0\1\231\1\0\2\112\2\0\2\111\3\112"+
    "\1\113\1\112\1\0\1\111\6\112\2\0\2\107\6\112"+
    "\1\0\1\107\4\112\1\0\15\112\1\0\1\107\1\0"+
    "\4\107\2\0\1\321\1\0\2\113\2\0\2\107\5\113"+
    "\1\0\1\107\6\113\2\0\2\107\6\113\1\0\1\107"+
    "\4\113\1\0\15\113\1\0\1\107\1\0\4\107\1\276"+
    "\1\0\1\232\1\0\2\113\2\0\2\107\5\113\1\0"+
    "\1\107\6\113\2\0\2\107\6\113\1\0\1\107\4\113"+
    "\1\0\15\113\1\0\1\107\1\0\4\107\1\267\1\270"+
    "\1\232\1\107\2\113\4\107\5\113\2\107\6\113\4\107"+
    "\6\113\2\107\4\113\1\107\15\113\7\107\2\0\1\231"+
    "\1\0\2\112\2\0\2\111\3\112\1\113\1\112\1\0"+
    "\1\111\6\112\2\0\2\107\6\112\1\0\1\107\3\112"+
    "\1\322\1\0\15\112\1\0\1\107\1\0\3\107\3\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\3\21\1\323\1\0\15\21"+
    "\11\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\4\21\1\0\10\21"+
    "\1\324\4\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\4\21"+
    "\1\0\4\21\1\325\10\21\11\0\1\131\1\0\2\22"+
    "\2\0\1\132\1\20\1\21\1\22\1\21\1\62\1\22"+
    "\1\0\1\20\2\22\4\21\2\0\1\133\1\0\6\22"+
    "\2\0\1\326\3\21\1\0\15\21\6\0\1\107\1\0"+
    "\1\107\1\225\70\107\1\111\1\20\1\327\1\273\70\111"+
    "\1\113\1\62\1\330\1\300\70\113\3\0\1\131\1\0"+
    "\2\22\2\0\1\132\1\20\1\21\1\22\1\21\1\62"+
    "\1\22\1\0\1\20\2\22\4\21\2\0\1\133\1\0"+
    "\6\22\2\0\4\21\1\0\10\21\1\331\4\21\11\0"+
    "\1\131\1\0\2\22\2\0\1\132\1\20\1\21\1\22"+
    "\1\21\1\62\1\22\1\0\1\20\2\22\4\21\2\0"+
    "\1\133\1\0\6\22\2\0\4\21\1\0\1\332\14\21"+
    "\6\0\1\107\1\20\1\0\1\230\1\0\2\111\2\0"+
    "\5\111\1\107\1\111\1\0\7\111\2\0\2\107\6\111"+
    "\1\0\1\107\4\111\1\0\15\111\1\0\1\107\1\0"+
    "\4\107\1\62\1\0\1\232\1\0\2\113\2\0\2\107"+
    "\5\113\1\0\1\107\6\113\2\0\2\107\6\113\1\0"+
    "\1\107\4\113\1\0\15\113\1\0\1\107\1\0\3\107"+
    "\3\0\1\131\1\0\2\22\2\0\1\132\1\20\1\21"+
    "\1\22\1\21\1\62\1\22\1\0\1\20\2\22\4\21"+
    "\2\0\1\133\1\0\6\22\2\0\4\21\1\0\3\21"+
    "\1\333\11\21\11\0\1\131\1\0\2\22\2\0\1\132"+
    "\1\20\1\21\1\22\1\21\1\62\1\22\1\0\1\20"+
    "\2\22\4\21\2\0\1\133\1\0\6\22\2\0\4\21"+
    "\1\0\1\21\1\334\13\21\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\5\1\1\11\13\1\5\11\3\1\1\11"+
    "\12\1\1\11\13\1\1\11\12\1\1\11\10\1\1\11"+
    "\4\1\1\0\2\1\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\1\1\11\1\0\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\17\1\2\11\1\0\1\11"+
    "\1\1\7\11\2\1\1\11\1\0\1\11\3\1\2\11"+
    "\2\0\1\11\2\1\1\11\13\1\1\11\2\1\2\11"+
    "\17\1\3\11\2\1\1\0\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _BashLexerGen() { this(null); }
  private void pushState(int state) { myStack.push(yystate()); yybegin(state);}
  private void popState() { yybegin(myStack.pop());}
  private void yy_switch_state(int state) { popState(); pushState(state); }
  private Stack<Integer> myStack = new Stack<>();
  private boolean inString;

  protected void onReset() {
    myStack.clear();
  }

  long yychar = 0;

    // return the complete buffer
    protected CharSequence getBuffer() {
        return zzBuffer;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BashLexerGen(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 93: break;
          case 2: 
            { return LINEFEED;
            } 
            // fall through
          case 94: break;
          case 3: 
            { return WHITESPACE;
            } 
            // fall through
          case 95: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 96: break;
          case 5: 
            { return BANG;
            } 
            // fall through
          case 97: break;
          case 6: 
            { inString = !inString; return QUOTE;
            } 
            // fall through
          case 98: break;
          case 7: 
            { return WORD;
            } 
            // fall through
          case 99: break;
          case 8: 
            { return INT;
            } 
            // fall through
          case 100: break;
          case 9: 
            { return AMP;
            } 
            // fall through
          case 101: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 102: break;
          case 11: 
            { return DOLLAR;
            } 
            // fall through
          case 103: break;
          case 12: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 104: break;
          case 13: 
            { return BACKQUOTE;
            } 
            // fall through
          case 105: break;
          case 14: 
            { return EQ;
            } 
            // fall through
          case 106: break;
          case 15: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 107: break;
          case 16: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 108: break;
          case 17: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 109: break;
          case 18: 
            { return SEMI;
            } 
            // fall through
          case 110: break;
          case 19: 
            { return PIPE;
            } 
            // fall through
          case 111: break;
          case 20: 
            { return LEFT_SQUARE;
            } 
            // fall through
          case 112: break;
          case 21: 
            { return RIGHT_SQUARE;
            } 
            // fall through
          case 113: break;
          case 22: 
            { return GT;
            } 
            // fall through
          case 114: break;
          case 23: 
            { return LT;
            } 
            // fall through
          case 115: break;
          case 24: 
            { return ARITH_PLUS;
            } 
            // fall through
          case 116: break;
          case 25: 
            { return ARITH_MINUS;
            } 
            // fall through
          case 117: break;
          case 26: 
            { return MULT;
            } 
            // fall through
          case 118: break;
          case 27: 
            { return ARITH_BITWISE_NEGATE;
            } 
            // fall through
          case 119: break;
          case 28: 
            { return ARITH_BITWISE_XOR;
            } 
            // fall through
          case 120: break;
          case 29: 
            { return ARITH_QMARK;
            } 
            // fall through
          case 121: break;
          case 30: 
            { return ARITH_COLON;
            } 
            // fall through
          case 122: break;
          case 31: 
            { return DIV;
            } 
            // fall through
          case 123: break;
          case 32: 
            { return MOD;
            } 
            // fall through
          case 124: break;
          case 33: 
            { popState();
            } 
            // fall through
          case 125: break;
          case 34: 
            { popState(); return RIGHT_CURLY;
            } 
            // fall through
          case 126: break;
          case 35: 
            { popState(); return RIGHT_PAREN;
            } 
            // fall through
          case 127: break;
          case 36: 
            { return SHEBANG;
            } 
            // fall through
          case 128: break;
          case 37: 
            { return ARITH_NE;
            } 
            // fall through
          case 129: break;
          case 38: 
            { if (inString) yypushback(yylength() - 1); else return RAW_STRING;
            } 
            // fall through
          case 130: break;
          case 39: 
            { return ADD_EQ;
            } 
            // fall through
          case 131: break;
          case 40: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return WORD;
            } 
            // fall through
          case 132: break;
          case 41: 
            { return FILEDESCRIPTOR;
            } 
            // fall through
          case 133: break;
          case 42: 
            { return AND_AND;
            } 
            // fall through
          case 134: break;
          case 43: 
            { return REDIRECT_AMP_GREATER;
            } 
            // fall through
          case 135: break;
          case 44: 
            { return VAR;
            } 
            // fall through
          case 136: break;
          case 45: 
            { pushState(PARAMETER_EXPANSION); yypushback(1); return DOLLAR;
            } 
            // fall through
          case 137: break;
          case 46: 
            { return OCTAL;
            } 
            // fall through
          case 138: break;
          case 47: 
            { yybegin(EXPRESSIONS); return LEFT_DOUBLE_PAREN;
            } 
            // fall through
          case 139: break;
          case 48: 
            { return IF;
            } 
            // fall through
          case 140: break;
          case 49: 
            { return DO;
            } 
            // fall through
          case 141: break;
          case 50: 
            { return FI;
            } 
            // fall through
          case 142: break;
          case 51: 
            { return PIPE_AMP;
            } 
            // fall through
          case 143: break;
          case 52: 
            { return OR_OR;
            } 
            // fall through
          case 144: break;
          case 53: 
            { return EXPR_CONDITIONAL_LEFT;
            } 
            // fall through
          case 145: break;
          case 54: 
            { return EXPR_CONDITIONAL_RIGHT;
            } 
            // fall through
          case 146: break;
          case 55: 
            { return REDIRECT_GREATER_AMP;
            } 
            // fall through
          case 147: break;
          case 56: 
            { return GE;
            } 
            // fall through
          case 148: break;
          case 57: 
            { return REDIRECT_GREATER_BAR;
            } 
            // fall through
          case 149: break;
          case 58: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 150: break;
          case 59: 
            { return REDIRECT_LESS_AMP;
            } 
            // fall through
          case 151: break;
          case 60: 
            { return LE;
            } 
            // fall through
          case 152: break;
          case 61: 
            { return REDIRECT_LESS_GREATER;
            } 
            // fall through
          case 153: break;
          case 62: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 154: break;
          case 63: 
            { return ARITH_PLUS_PLUS;
            } 
            // fall through
          case 155: break;
          case 64: 
            { return ARITH_MINUS_MINUS;
            } 
            // fall through
          case 156: break;
          case 65: 
            { return EXPONENT;
            } 
            // fall through
          case 157: break;
          case 66: 
            { return ARITH_EQ;
            } 
            // fall through
          case 158: break;
          case 67: 
            { yybegin(YYINITIAL); return RIGHT_DOUBLE_PAREN;
            } 
            // fall through
          case 159: break;
          case 68: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return PARAMETER_EXPANSION_BODY;
            } 
            // fall through
          case 160: break;
          case 69: 
            { pushState(CASE_PATTERN);    return CASE_END;
            } 
            // fall through
          case 161: break;
          case 70: 
            { pushState(CASE_PATTERN);    return WORD;
            } 
            // fall through
          case 162: break;
          case 71: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return WORD;
            } 
            // fall through
          case 163: break;
          case 72: 
            { return REDIRECT_AMP_GREATER_GREATER;
            } 
            // fall through
          case 164: break;
          case 73: 
            { return HEX;
            } 
            // fall through
          case 165: break;
          case 74: 
            { return LET;
            } 
            // fall through
          case 166: break;
          case 75: 
            { return FOR;
            } 
            // fall through
          case 167: break;
          case 76: 
            { return LEFT_DOUBLE_BRACKET;
            } 
            // fall through
          case 168: break;
          case 77: 
            { return RIGHT_DOUBLE_BRACKET;
            } 
            // fall through
          case 169: break;
          case 78: 
            { return REDIRECT_HERE_STRING;
            } 
            // fall through
          case 170: break;
          case 79: 
            { return ESAC;
            } 
            // fall through
          case 171: break;
          case 80: 
            { return ELSE;
            } 
            // fall through
          case 172: break;
          case 81: 
            { return ELIF;
            } 
            // fall through
          case 173: break;
          case 82: 
            { pushState(CASE_CLAUSE); return CASE;
            } 
            // fall through
          case 174: break;
          case 83: 
            { return DONE;
            } 
            // fall through
          case 175: break;
          case 84: 
            { return TIME;
            } 
            // fall through
          case 176: break;
          case 85: 
            { return TRAP;
            } 
            // fall through
          case 177: break;
          case 86: 
            { return THEN;
            } 
            // fall through
          case 178: break;
          case 87: 
            { popState();                 return ESAC;
            } 
            // fall through
          case 179: break;
          case 88: 
            { popState(); yypushback(yylength());
            } 
            // fall through
          case 180: break;
          case 89: 
            { return UNTIL;
            } 
            // fall through
          case 181: break;
          case 90: 
            { return WHILE;
            } 
            // fall through
          case 182: break;
          case 91: 
            { return SELECT;
            } 
            // fall through
          case 183: break;
          case 92: 
            { return FUNCTION;
            } 
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
