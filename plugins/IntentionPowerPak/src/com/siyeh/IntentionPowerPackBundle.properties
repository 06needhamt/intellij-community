plugin.IntentionPowerPack.description=Adds over 30 new intention actions for IDEA.
replace.fully.qualified.name.with.import.intention.name=Replace qualified name with import
replace.fully.qualified.name.with.import.intention.family.name=Replace Qualified Name With Import
replace.if.with.switch.intention.name=Replace if with switch
replace.if.with.switch.intention.family.name=Replace If With Switch
merge.parallel.ifs.intention.name=Merge 'if's
merge.parallel.ifs.intention.family.name=Merge Parallel Ifs
replace.conditional.with.if.intention.name=Replace ?: with if-else
replace.conditional.with.if.intention.family.name=Replace Conditional With If Else
merge.else.if.intention.name=Merge else-if
merge.else.if.intention.family.name=Merge Else If
change.to.end.of.line.comment.intention.name=Replace with end-of-line comment
change.to.end.of.line.comment.intention.family.name=Replace With End Of Line Comment
assert.to.if.intention.name=Replace assert with if statement
assert.to.if.intention.family.name=Replace Assert With If Statement
replace.equality.with.safe.equals.intention.name=Replace == with safe .equals()
replace.equality.with.safe.equals.intention.family.name=Replace Equality With Safe Equals
replace.for.each.loop.with.for.loop.intention.name=Replace for-each loop with old-style for loop
replace.for.each.loop.with.for.loop.intention.family.name=Replace For Each Loop
expand.boolean.intention.name=Expand boolean use to if-else
expand.boolean.intention.family.name=Expand Boolean
split.else.if.intention.name=Split else-if
split.else.if.intention.family.name=Split Else If
join.concatenated.string.literals.intention.name=Join concatenated String literals
join.concatenated.string.literals.intention.family.name=Join Concatenated String Literals
replace.switch.with.if.intention.name=Replace switch with if
replace.switch.with.if.intention.family.name=Replace Switch With If
simplify.variable.intention.name=Replace with Java-style array declaration
simplify.variable.intention.family.name=Replace With Java Style Array Declaration
constant.expression.intention.name=Compute constant value
constant.expression.intention.family.name=Compute Constant Value
create.assert.intention.name=Create JUnit assertion
create.assert.intention.family.name=Create JUnit assertion
simplify.if.else.intention.name=Simplify if-else
simplify.if.else.intention.family.name=Simplify If Else
merge.if.or.intention.name=Merge 'if's
merge.if.or.intention.family.name=Merge Equivalent Ifs To ORed Condition
remove.unnecessary.parentheses.intention.name=Remove unnecessary parentheses
remove.unnecessary.parentheses.intention.family.name=Remove Unnecessary Parentheses
merge.if.and.intention.name=Merge 'if's
merge.if.and.intention.family.name=Merge Nested Ifs To ANDed Condition
replace.concatenation.with.string.buffer.intention.name=Replace + with .append()
replace.concatenation.with.string.buffer.intention.family.name=Replace + with StringBuffer.append()
remove.conditional.intention.name=Simplify ?:
remove.conditional.intention.family.name=Remove Pointless Conditional
move.comment.to.separate.line.intention.name=Move comment to separate line
move.comment.to.separate.line.intention.family.name=Move Comment To Separate Line
convert.integer.to.hex.intention.name=Convert to hex
convert.integer.to.hex.intention.family.name=Convert To Hexadecimal
string.to.char.intention.name=Replace string literal with character
string.to.char.intention.family.name=Replace String With Char
convert.integer.to.decimal.intention.name=Convert to decimal
convert.integer.to.decimal.intention.family.name=Convert To Decimal
create.enum.switch.branches.intention.name=Create 'switch' branches
create.enum.switch.branches.intention.family.name=Create Enum Switch Branches
change.to.c.style.comment.intention.name=Replace with C-style comment
change.to.c.style.comment.intention.family.name=Replace With C-Style Comment
convert.integer.to.octal.intention.name=Convert to octal
convert.integer.to.octal.intention.family.name=Convert To Octal
split.declaration.and.initialization.intention.name=Split into declaration and initialization
split.declaration.and.initialization.intention.family.name=Split Declaration And Initialization
char.to.string.intention.name=Replace character literal with string
char.to.string.intention.family.name=Replace Char With String
replace.if.with.conditional.intention.name=Replace if-else with ?:
replace.if.with.conditional.intention.family.name=Replace If Else With Conditional
replace.equality.with.equals.intention.name=Replace == with .equals()
replace.equality.with.equals.intention.family.name=Replace Equality With Equals
make.append.chain.into.append.sequence.intention.name=Make .append() chain into .append() sequence
make.append.chain.into.append.sequence.intention.family.name=Make Append Chain Into Append Sequence
detail.exceptions.intention.name=Detail exceptions
detail.exceptions.intention.family.name=Detail Exceptions
flip.conditional.intention.name=Flip ?:
flip.conditional.intention.family.name=Flip Conditional
replace.equals.with.equality.intention.name=Replace .equals() with ==
replace.equals.with.equality.intention.family.name=Replace Equals With Equality
replace.shift.with.multiply.intention.family.name=Replace Shift with Multiply
demorgans.intention.family.name=DeMorgan Law
flip.comparison.intention.family.name=Flip Comparison
flip.conjunction.intention.family.name=Flip Conjunction Operands
negate.comparison.intention.family.name=Negate Comparison
remove.boolean.equality.intention.family.name=Remove Boolean Equality
remove.braces.intention.family.name=Remove Braces
add.braces.intention.family.name=Add Braces
flip.commutative.method.call.intention.family.name=Flip Commutative Method Call
constant.subexpression.intention.family.name=Compute Constant Value For Subexpression
extract.increment.intention.family.name=Extract Increment
flip.assert.literal.intention.family.name=Flip Assert Literal
replace.assert.equals.with.assert.literal.intention.family.name=Replace assertEquals with assertTrue, assertFalse, or assertNull
replace.assert.literal.with.assert.equals.intention.family.name=Replace assertTrue, assertFalse, or assertNull with assertEquals
replace.multiply.with.shift.intention.family.name=Replace Multiply with Shift
replace.with.operator.assignment.intention.family.name=Replace Assignment With Operator Assignment
add.clarifying.parentheses.intention.name=Add Clarifying Parentheses
add.clarifying.parentheses.intention.family.name=Add Clarifying Parentheses
convert.interface.to.class.intention.name=Convert to Class
convert.interface.to.class.intention.family.name=Convert Interface to Class
replace.on.demand.import.intention.name=Replace With Single Class Imports
replace.on.demand.import.intention.family.name=Replace On Demand Import With Single Class Imports
swap.method.call.arguments.intention.family.name=Swap Method Call Arguments
make.method.varargs.intention.name=Convert to Variable Argument Method
make.method.varargs.intention.family.name=Convert Method to Variable Argument Method
convert.vararg.parameter.to.array.intention.name=Convert Variable Argument Parameter to Array
convert.vararg.parameter.to.array.intention.family.name=Convert Variable Argument Parameter to Array Parameter

#hand made
demorgans.intention.name1=Replace '\\&\\&' with '||'
demorgans.intention.name2=Replace '||' with '\\&\\&'
flip.smth.intention.name=Flip ''{0}''
flip.comparison.intention.name=Flip ''{0}'' to ''{1}''
negate.comparison.intention.name=Negate ''{0}''
negate.comparison.intention.name1=Negate ''{0}'' to ''{1}''
remove.boolean.equality.intention.name=Simplify ''{0}''
add.braces.intention.name=Add Braces to ''{0}'' statement
remove.braces.intention.name=Remove braces from ''{0}'' statement
flip.commutative.method.call.intention.name=Flip ''.{0}()''
flip.commutative.method.call.intention.name1=Flip ''.{0}()'' (may change semantics)
constant.subexpression.intention.name=Compute constant value of ''{0}''
status.bar.escape.highlighting.message=Press Escape to remove the highlighting
extract.increment.intention.name=Extract ''{0}''
flip.assert.literal.intention.name=Replace ''{0}()'' with ''{1}()''
replace.assert.equals.with.assert.literal.intention.name=Replace ''assertEquals()'' with ''{0}()''
replace.assert.literal.with.assert.equals.intention.name=Replace ''{0}()'' with ''assertEquals({1}, ...)''
replace.assert.literal.with.assert.equals.intention.name1=Replace ''{0}()'' with ''assertEquals(..., {1}, ...)''
replace.assignment.with.operator.assignment.intention.name=Replace ''='' with ''{0}=''
replace.some.operator.with.other.intention.name=Replace ''{0}'' with ''{1}''
swap.method.call.arguments.intention.name=Swap ''{0}'' and ''{1}''

#categories
intention.category.numbers=Numbers
intention.category.boolean=Boolean
intention.category.conditional.operator=Conditional Operator
intention.category.shift.operation=Shift Operation
intention.category.junit=JUnit
intention.category.declaration=Declaration
intention.category.imports=Imports
intention.category.comments=Comments
intention.category.control.flow=Control Flow
intention.category.other=Other
