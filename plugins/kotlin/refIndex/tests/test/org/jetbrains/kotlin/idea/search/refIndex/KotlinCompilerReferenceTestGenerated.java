// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

package org.jetbrains.kotlin.idea.search.refIndex;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.test.TestRoot;
import org.junit.runner.RunWith;

/*
 * This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("refIndex/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/compilerIndex")
public abstract class KotlinCompilerReferenceTestGenerated extends AbstractKotlinCompilerReferenceTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/compilerIndex/classOrObject")
    public static class ClassOrObject extends AbstractKotlinCompilerReferenceTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("class")
        public void testClass() throws Exception {
            runTest("testData/compilerIndex/classOrObject/class/");
        }

        @TestMetadata("innerClass")
        public void testInnerClass() throws Exception {
            runTest("testData/compilerIndex/classOrObject/innerClass/");
        }

        @TestMetadata("innerClassWithPackage")
        public void testInnerClassWithPackage() throws Exception {
            runTest("testData/compilerIndex/classOrObject/innerClassWithPackage/");
        }

        @TestMetadata("javaInnerClass")
        public void testJavaInnerClass() throws Exception {
            runTest("testData/compilerIndex/classOrObject/javaInnerClass/");
        }

        @TestMetadata("javaNestedClass")
        public void testJavaNestedClass() throws Exception {
            runTest("testData/compilerIndex/classOrObject/javaNestedClass/");
        }

        @TestMetadata("nestedClass")
        public void testNestedClass() throws Exception {
            runTest("testData/compilerIndex/classOrObject/nestedClass/");
        }

        @TestMetadata("nestedObject")
        public void testNestedObject() throws Exception {
            runTest("testData/compilerIndex/classOrObject/nestedObject/");
        }

        @TestMetadata("object")
        public void testObject() throws Exception {
            runTest("testData/compilerIndex/classOrObject/object/");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/compilerIndex/functions")
    public abstract static class Functions extends AbstractKotlinCompilerReferenceTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/compilerIndex/functions/constructors")
        public static class Constructors extends AbstractKotlinCompilerReferenceTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("javaConstructor")
            public void testJavaConstructor() throws Exception {
                runTest("testData/compilerIndex/functions/constructors/javaConstructor/");
            }

            @TestMetadata("nestedPrimaryConstructor")
            public void testNestedPrimaryConstructor() throws Exception {
                runTest("testData/compilerIndex/functions/constructors/nestedPrimaryConstructor/");
            }

            @TestMetadata("primaryConstructor")
            public void testPrimaryConstructor() throws Exception {
                runTest("testData/compilerIndex/functions/constructors/primaryConstructor/");
            }

            @TestMetadata("secondaryConstructor")
            public void testSecondaryConstructor() throws Exception {
                runTest("testData/compilerIndex/functions/constructors/secondaryConstructor/");
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/compilerIndex/functions/topLevel")
        public static class TopLevel extends AbstractKotlinCompilerReferenceTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("extension")
            public void testExtension() throws Exception {
                runTest("testData/compilerIndex/functions/topLevel/extension/");
            }

            @TestMetadata("extensionWithCustomFileName")
            public void testExtensionWithCustomFileName() throws Exception {
                runTest("testData/compilerIndex/functions/topLevel/extensionWithCustomFileName/");
            }

            @TestMetadata("extensionWithJvmOverloadsAndJvmName")
            public void testExtensionWithJvmOverloadsAndJvmName() throws Exception {
                runTest("testData/compilerIndex/functions/topLevel/extensionWithJvmOverloadsAndJvmName/");
            }

            @TestMetadata("function")
            public void testFunction() throws Exception {
                runTest("testData/compilerIndex/functions/topLevel/function/");
            }

            @TestMetadata("functionWithJvmName")
            public void testFunctionWithJvmName() throws Exception {
                runTest("testData/compilerIndex/functions/topLevel/functionWithJvmName/");
            }

            @TestMetadata("functionWithJvmOverloads")
            public void testFunctionWithJvmOverloads() throws Exception {
                runTest("testData/compilerIndex/functions/topLevel/functionWithJvmOverloads/");
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("testData/compilerIndex/properties")
    public abstract static class Properties extends AbstractKotlinCompilerReferenceTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("testData/compilerIndex/properties/topLevel")
        public static class TopLevel extends AbstractKotlinCompilerReferenceTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
            }

            @TestMetadata("constant")
            public void testConstant() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/constant/");
            }

            @TestMetadata("constantJava")
            public void testConstantJava() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/constantJava/");
            }

            @TestMetadata("constantJavaWithCustomFileName")
            public void testConstantJavaWithCustomFileName() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/constantJavaWithCustomFileName/");
            }

            @TestMetadata("constantWithCustomFileName")
            public void testConstantWithCustomFileName() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/constantWithCustomFileName/");
            }

            @TestMetadata("extension")
            public void testExtension() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/extension/");
            }

            @TestMetadata("extensionVariable")
            public void testExtensionVariable() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/extensionVariable/");
            }

            @TestMetadata("extensionVariableWithJvmNameOnProperty")
            public void testExtensionVariableWithJvmNameOnProperty() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/extensionVariableWithJvmNameOnProperty/");
            }

            @TestMetadata("isVariableWithCustomFileName")
            public void testIsVariableWithCustomFileName() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/isVariableWithCustomFileName/");
            }

            @TestMetadata("property")
            public void testProperty() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/property/");
            }

            @TestMetadata("propertyWithBackingField")
            public void testPropertyWithBackingField() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/propertyWithBackingField/");
            }

            @TestMetadata("propertyWithCustomGetterAndSetter")
            public void testPropertyWithCustomGetterAndSetter() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/propertyWithCustomGetterAndSetter/");
            }

            @TestMetadata("variable")
            public void testVariable() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/variable/");
            }

            @TestMetadata("variableWithCustomFileName")
            public void testVariableWithCustomFileName() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/variableWithCustomFileName/");
            }

            @TestMetadata("variableWithCustomGetterAndSetterAndJvmName")
            public void testVariableWithCustomGetterAndSetterAndJvmName() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/variableWithCustomGetterAndSetterAndJvmName/");
            }

            @TestMetadata("variableWithCustomGetterAndSetterAndMixedJvmName")
            public void testVariableWithCustomGetterAndSetterAndMixedJvmName() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/variableWithCustomGetterAndSetterAndMixedJvmName/");
            }

            @TestMetadata("variableWithJvmNameOnProperty")
            public void testVariableWithJvmNameOnProperty() throws Exception {
                runTest("testData/compilerIndex/properties/topLevel/variableWithJvmNameOnProperty/");
            }
        }
    }
}
