/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.generators.frontend;

import com.intellij.openapi.util.io.FileUtil;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.jet.di.GeneratorsFileUtil;
import org.jetbrains.jet.lexer.JetKeywordToken;
import org.jetbrains.jet.lexer.JetTokens;
import org.jetbrains.jet.utils.Printer;

import java.io.File;
import java.io.IOException;

public class GenerateKeywordStrings {
    public static final File DEST_FILE = new File("compiler/frontend/src/org/jetbrains/jet/renderer/KeywordStringsGenerated.java");

    @NotNull
    public static String generate() throws IOException {
        StringBuilder sb = new StringBuilder();
        Printer p = new Printer(sb);

        p.println(FileUtil.loadFile(new File("injector-generator/copyright.txt")));
        p.println("package org.jetbrains.jet.renderer;");
        p.println();
        p.println("import java.util.Arrays;");
        p.println("import java.util.Set;");
        p.println("import java.util.HashSet;");
        p.println();
        p.println("/** This class is generated by {@link \"org.jetbrains.jet.generators.frontend.GenerateKeywordStrings\"}. DO NOT MODIFY MANUALLY */");
        p.println("public class KeywordStringsGenerated {");
        p.pushIndent();
        p.println("private KeywordStringsGenerated() {}");
        p.println();
        p.println("public static final Set<String> KEYWORDS = new HashSet<String>(Arrays.asList(");
        p.pushIndent();

        IElementType[] types = JetTokens.KEYWORDS.getTypes();
        for (int i = 0, length = types.length; i < length; i++) {
            assert types[i] instanceof JetKeywordToken : "Not a keyword in JetTokens.KEYWORDS: " + types[i];
            JetKeywordToken keyword = (JetKeywordToken) types[i];
            assert !keyword.isSoft() : "Soft keyword in JetTokens.KEYWORDS: " + keyword.getValue();
            p.println("\"" + keyword.getValue() + "\""+ (i + 1 < length ? "," : ""));
        }

        p.popIndent();
        p.println("));");
        p.popIndent();
        p.println("}");

        return sb.toString();
    }

    public static void main(String[] args) throws IOException {
        GeneratorsFileUtil.writeFileIfContentChanged(DEST_FILE, generate());
    }
}
