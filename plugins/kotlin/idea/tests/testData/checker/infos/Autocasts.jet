class A() {
  fun foo() {}
}

class B() : A() {
  fun bar() {}
}

fun f9() {
  val a : A?
  a?.foo()
  a?.<error>bar</error>()
  if (a is B) {
    <info descr="Automatically cast to B">a</info>.bar()
    a.foo()
  }
  a?.foo()
  a?.<error>bar</error>()
  if (!(a is B)) {
    a?.<error>bar</error>()
    a?.foo()
  }
  if (!(a is B) || <info descr="Automatically cast to B">a</info>.bar() == ()) {
      a?.<error>bar</error>()
  }
  if (!(a is B)) {
    return;
  }
  <info descr="Automatically cast to B">a</info>.bar()
  a.foo()
}

fun f10() {
  val a : A?
  if (!(a is B)) {
    return;
  }
  if (!(a is B)) {
    return;
  }
}

class C() : A() {
  fun bar() {

  }
}

fun f10(a : A?) {
  if (a is B) {
    if (a is C) {
      <info descr="Automatically cast to C">a</info>.bar();
    }
  }
}

fun f11(a : A?) {
  when (a) {
    is B => <info descr="Automatically cast to B">a</info>.bar()
    is A => a.foo()
    is Any => a.foo()
    is Any? => a.<error>bar</error>()
    else => a?.foo()
  }
}

fun f12(a : A?) {
  when (a) {
    is B => <info descr="Automatically cast to B">a</info>.bar()
    is A => a.foo()
    is Any => a.foo();
    is Any? => a.<error>bar</error>()
    is val c : <error>B</error> => c.foo()
    is val c is C => <info descr="Automatically cast to C">c</info>.bar()
    is val c is C => <info descr="Automatically cast to C">a</info>.bar()
    else => a?.foo()
  }
}
