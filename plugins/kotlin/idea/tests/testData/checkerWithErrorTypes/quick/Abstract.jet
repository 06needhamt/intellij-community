namespace abstract

class MyClass() {
    //properties
    val <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>a<!>: Int
    val a1: Int = 1
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> val a2: Int
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> val a3: Int = 1

    var <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>b<!>: Int                private set
    var b1: Int = 0;                         private set
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> var b2: Int      private set
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> var b3: Int = 0; private set

    var <!MUST_BE_INITIALIZED!>c<!>: Int                set(v: Int) { $c = v }
    var c1: Int = 0;                         set(v: Int) { $c1 = v }
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> var c2: Int      set(v: Int) { $c2 = v }
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> var c3: Int = 0; set(v: Int) { $c3 = v }

    val e: Int                               get() = a
    val e1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;          get() = a
    <!ABSTRACT_PROPERTY_IN_NN_ABSTRACT_CLASS!>abstract<!> val e2: Int      get() = a
    <!ABSTRACT_PROPERTY_IN_NON_ABSTRACT_CLASS!>abstract<!> val e3: Int = 0; get() = a

    //methods
    fun <!NON_ABSTRACT_FUNCTION_WITH_NO_BODY!>f<!>()
    fun g() {}
    <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> fun h()
    <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS, ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun j() {}

    //property accessors
    var i: Int                       <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> get  <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set
    var i1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> get  <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set

    var j: Int                       get() = i;    <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set
    var j1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  get() = i;    <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set

    var <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>k<!>: Int        <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set
    var k1: Int = 0;                 <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set

    var l: Int                       <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> get  <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set
    var l1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> get  <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> set

    var n: Int                       <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS!>abstract<!> get <!ABSTRACT_FUNCTION_IN_NON_ABSTRACT_CLASS, ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> set(v: Int) {}
}

abstract class MyAbstractClass() {
    //properties
    val <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>a<!>: Int
    val a1: Int = 1
    abstract val a2: Int
    abstract val a3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>1<!>

    var <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>b<!>: Int                private set
    var b1: Int = 0;                         private set
    abstract var b2: Int      private set
    abstract var b3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; private set

    var <!MUST_BE_INITIALIZED!>c<!>: Int                set(v: Int) { $c = v }
    var c1: Int = 0;                         set(v: Int) { $c1 = v }
    abstract var c2: Int                     <!ABSTRACT_PROPERTY_WITH_SETTER!>set(v: Int) { $c2 = v }<!>
    abstract var c3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; <!ABSTRACT_PROPERTY_WITH_SETTER!>set(v: Int) { $c3 = v }<!>

    val e: Int                               get() = a
    val e1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;          get() = a
    abstract val e2: Int                     <!ABSTRACT_PROPERTY_WITH_GETTER!>get() = a<!>
    abstract val e3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; <!ABSTRACT_PROPERTY_WITH_GETTER!>get() = a<!>

    //methods
    fun <!NON_ABSTRACT_FUNCTION_WITH_NO_BODY!>f<!>()
    fun g() {}
    abstract fun h()
    <!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun j() {}

    //property accessors
    var i: Int                       abstract get  abstract set
    var i1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  abstract get  abstract set

    var j: Int                       get() = i;    abstract set
    var j1: Int                      get() = i;    abstract set

    var <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>k<!>: Int        abstract set
    var k1: Int = 0;                 abstract set

    var l: Int                       abstract get  abstract set
    var l1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  abstract get  abstract set

    var n: Int                       abstract get <!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> set(v: Int) {}
}

trait MyTrait {
    //properties
    val a: Int
    val a1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>1<!>
    <!REDUNDANT_ABSTRACT!>abstract<!> val a2: Int
    <!REDUNDANT_ABSTRACT!>abstract<!> val a3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>1<!>

    var b: Int                                                  private set
    var b1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;                             private set
    <!REDUNDANT_ABSTRACT!>abstract<!> var b2: Int                     private set
    <!REDUNDANT_ABSTRACT!>abstract<!> var b3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; private set

    var <!BACKING_FIELD_IN_TRAIT!>c<!>: Int                                   set(v: Int) { $c = v }
    var <!BACKING_FIELD_IN_TRAIT!>c1<!>: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;              set(v: Int) { $c1 = v }
    <!REDUNDANT_ABSTRACT!>abstract<!> var c2: Int                     <!ABSTRACT_PROPERTY_WITH_SETTER!>set(v: Int) { $c2 = v }<!>
    <!REDUNDANT_ABSTRACT!>abstract<!> var c3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; <!ABSTRACT_PROPERTY_WITH_SETTER!>set(v: Int) { $c3 = v }<!>

    val e: Int                                                  get() = a
    val e1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;                             get() = a
    <!REDUNDANT_ABSTRACT!>abstract<!> val e2: Int                     <!ABSTRACT_PROPERTY_WITH_GETTER!>get() = a<!>
    <!REDUNDANT_ABSTRACT!>abstract<!> val e3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; <!ABSTRACT_PROPERTY_WITH_GETTER!>get() = a<!>

    //methods
    fun f()
    fun g() {}
    <!REDUNDANT_ABSTRACT!>abstract<!> fun h()
    <!REDUNDANT_ABSTRACT, ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun j() {}

    //property accessors
    var i: Int                       abstract get  abstract set
    var i1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;  abstract get  abstract set

    var j: Int                       get() = i;    abstract set
    var j1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;  get() = i;    abstract set

    var k: Int                       abstract set
    var k1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;  abstract set

    var l: Int                       abstract get  abstract set
    var l1: Int = <!PROPERTY_INITIALIZER_IN_TRAIT!>0<!>;  abstract get  abstract set

    var n: Int                       abstract get <!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> set(v: Int) {}
}

enum class MyEnum() {
    //properties
    val <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>a<!>: Int
    val a1: Int = 1
    abstract val a2: Int
    abstract val a3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>1<!>

    var <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>b<!>: Int                private set
    var b1: Int = 0;                         private set
    abstract var b2: Int      private set
    abstract var b3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; private set

    var <!MUST_BE_INITIALIZED!>c<!>: Int                set(v: Int) { $c = v }
    var c1: Int = 0;                         set(v: Int) { $c1 = v }
    abstract var c2: Int                     <!ABSTRACT_PROPERTY_WITH_SETTER!>set(v: Int) { $c2 = v }<!>
    abstract var c3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; <!ABSTRACT_PROPERTY_WITH_SETTER!>set(v: Int) { $c3 = v }<!>

    val e: Int                               get() = a
    val e1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;          get() = a
    abstract val e2: Int                     <!ABSTRACT_PROPERTY_WITH_GETTER!>get() = a<!>
    abstract val e3: Int = <!ABSTRACT_PROPERTY_WITH_INITIALIZER!>0<!>; <!ABSTRACT_PROPERTY_WITH_GETTER!>get() = a<!>

    //methods
    fun <!NON_ABSTRACT_FUNCTION_WITH_NO_BODY!>f<!>()
    fun g() {}
    abstract fun h()
    <!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun j() {}

    //property accessors
    var i: Int                       abstract get  abstract set
    var i1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  abstract get  abstract set

    var j: Int                       get() = i;    abstract set
    var j1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  get() = i;    abstract set

    var <!MUST_BE_INITIALIZED_OR_BE_ABSTRACT!>k<!>: Int        abstract set
    var k1: Int = 0;                 abstract set

    var l: Int                       abstract get  abstract set
    var l1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;   abstract get  abstract set

    var n: Int                       abstract get <!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> set(v: Int) {}
}

abstract enum class MyAbstractEnum() {}

namespace MyNamespace {
    //properties
    val <!MUST_BE_INITIALIZED!>a<!>: Int
    val a1: Int = 1
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> val a2: Int
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> val a3: Int = 1

    var <!MUST_BE_INITIALIZED!>b<!>: Int                private set
    var b1: Int = 0;                         private set
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> var b2: Int      private set
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> var b3: Int = 0; private set

    var <!MUST_BE_INITIALIZED!>c<!>: Int                set(v: Int) { $c = v }
    var c1: Int = 0;                         set(v: Int) { $c1 = v }
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> var c2: Int      set(v: Int) { $c2 = v }
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> var c3: Int = 0; set(v: Int) { $c3 = v }

    val e: Int                               get() = a
    val e1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;          get() = a
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> val e2: Int      get() = a
    <!ABSTRACT_PROPERTY_NOT_IN_CLASS!>abstract<!> val e3: Int = 0; get() = a

    //methods
    fun <!NON_MEMBER_FUNCTION_NO_BODY!>f<!>()
    fun g() {}
    <!NON_MEMBER_ABSTRACT_FUNCTION!>abstract<!> fun h()
    <!NON_MEMBER_ABSTRACT_FUNCTION!>abstract<!> fun j() {}

    //property accessors
    var i: Int                       <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> get  <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set
    var i1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> get  <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set

    var j: Int                       get() = i;    <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set
    var j1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  get() = i;    <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set

    var <!MUST_BE_INITIALIZED!>k<!>: Int        <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set
    var k1: Int = 0;                 <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set

    var l: Int                       <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> get  <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set
    var l1: Int = <!PROPERTY_INITIALIZER_NO_BACKING_FIELD!>0<!>;  <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> get  <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set

    var n: Int                       <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> get <!NON_MEMBER_ABSTRACT_ACCESSOR!>abstract<!> set(v: Int) {}
}

//creating an instance
abstract class B1(
    val i: Int,
    val s: String
) {
}

class B2() : B1(1, "r") {}

abstract class B3(i: Int) {
    this(): this(1)
}

fun foo(a: B3) {
    val a = <!CREATING_AN_INSTANCE_OF_ABSTRACT_CLASS!>B3()<!>
    val b = <!CREATING_AN_INSTANCE_OF_ABSTRACT_CLASS!>B1(2, "s")<!>
}