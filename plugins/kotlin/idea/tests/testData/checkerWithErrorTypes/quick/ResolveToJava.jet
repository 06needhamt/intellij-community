import <!UNRESOLVED_REFERENCE!>java<!>.*
import <!UNRESOLVED_REFERENCE!>util<!>.*
import <!UNRESOLVED_REFERENCE!>utils<!>.*

import <!UNRESOLVED_REFERENCE!>java<!>.io.PrintStream
import <!UNRESOLVED_REFERENCE!>java<!>.lang.Comparable as Com

val l : <!UNRESOLVED_REFERENCE!>List<!><in Int> = <!UNRESOLVED_REFERENCE!>ArrayList<!><Int>()

fun test(l : <!UNRESOLVED_REFERENCE!>java<!>.util.List<Int>) {
  val x : <!UNRESOLVED_REFERENCE!>java<!>.List
  val y : <!UNRESOLVED_REFERENCE!>java<!>.util.List<Int>
  val b : <!UNRESOLVED_REFERENCE!>java<!>.lang.Object
  val a : <!UNRESOLVED_REFERENCE!>util<!>.List<Int>
  val z : <!UNRESOLVED_REFERENCE!>java<!>.utils.List<Int>

  val f : <!UNRESOLVED_REFERENCE!>java<!>.io.File? = null

  <!UNRESOLVED_REFERENCE!>Collections<!>.emptyList
  <!UNRESOLVED_REFERENCE!>Collections<!>.emptyList<Int>
  <!UNRESOLVED_REFERENCE!>Collections<!>.emptyList<Int>()
  <!UNRESOLVED_REFERENCE!>Collections<!>.emptyList()

  <!UNRESOLVED_REFERENCE!>Collections<!>.singleton<Int>(1) : <!UNRESOLVED_REFERENCE!>Set<!><Int>?
  <!UNRESOLVED_REFERENCE!>Collections<!>.singleton<Int>(1.0)

  <!UNRESOLVED_REFERENCE!>List<!><Int>


  val o = "sdf" <!USELESS_CAST!>as<!> <!UNRESOLVED_REFERENCE!>Object<!>

  try {
    // ...
  }
  catch(e: <!UNRESOLVED_REFERENCE!>Exception<!>) {
    <!UNRESOLVED_REFERENCE!>System<!>.out<!UNNECESSARY_SAFE_CALL!>?.<!>println(e.getMessage())
  }

  <!UNRESOLVED_REFERENCE!>PrintStream<!>("sdf")

  val c : Com<Int>? = null

  c : <!UNRESOLVED_REFERENCE!>java<!>.lang.Comparable<Int>?

//  Collections.sort<Integer>(ArrayList<Integer>())
  xxx.<!UNRESOLVED_REFERENCE!>Class<!>()
}


namespace xxx {
  import <!UNRESOLVED_REFERENCE!>java<!>.lang.Class;
}