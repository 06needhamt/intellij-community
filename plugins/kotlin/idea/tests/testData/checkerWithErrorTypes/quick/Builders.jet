import <!UNRESOLVED_REFERENCE!>java<!>.util.*

namespace html {

  abstract class Factory<T> {
    abstract fun create() : T
  }

  abstract class Element

  class TextElement(val text : String) : Element

  abstract class Tag(val name : String) : Element {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    protected fun initTag<T : Element>(init : fun T.() : Unit) : T
      where class object T : Factory<T>{
      val tag = T.create()
      tag.init()
      children.add(tag)
      return tag
    }
  }

  abstract class TagWithText(name : String) : Tag(name) {
    fun String.plus() {
      children.add(<!OVERLOAD_RESOLUTION_AMBIGUITY!>TextElement(this)<!>)
    }
  }

  class HTML() : TagWithText("html") {
    class object : Factory<HTML> {
      override fun create() = <!OVERLOAD_RESOLUTION_AMBIGUITY!>HTML()<!>
    }

    fun head(init : fun Head.() : Unit) = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<Head>(init)<!>

    fun body(init : fun Body.() : Unit) = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<Body>(init)<!>
  }

  class Head() : TagWithText("head") {
    class object : Factory<Head> {
      override fun create() = <!OVERLOAD_RESOLUTION_AMBIGUITY!>Head()<!>
    }

    fun title(init : fun Title.() : Unit) = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<Title>(init)<!>
  }

  class Title() : TagWithText("title")

  abstract class BodyTag(name : String) : TagWithText(name) {
  }

  class Body() : BodyTag("body") {
    class object : Factory<Body> {
      override fun create() = <!OVERLOAD_RESOLUTION_AMBIGUITY!>Body()<!>
    }

    fun b(init : fun B.() : Unit) = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<B>(init)<!>
    fun p(init : fun P.() : Unit) = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<P>(init)<!>
    fun h1(init : fun H1.() : Unit) = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<H1>(init)<!>
    fun a(href : String, init : fun A.() : Unit) {
      val a = <!OVERLOAD_RESOLUTION_AMBIGUITY!>initTag<A>(init)<!>
      a.href = href
    }
  }

  class B() : BodyTag("b")
  class P() : BodyTag("p")
  class H1() : BodyTag("h1")
  class A() : BodyTag("a") {
    var href : String
      get() = attributes["href"]
      set(value) { attributes["href"] = value }
  }

  fun Map<String, String>.set(key : String, value : String) = this.put(key, value)

  fun html(init : fun HTML.() : Unit) : HTML {
    val html = <!OVERLOAD_RESOLUTION_AMBIGUITY!>HTML()<!>
    html.init()
    return html
  }

}

namespace foo {

import html.*

fun result(args : Array<String>) =
  <!OVERLOAD_RESOLUTION_AMBIGUITY!>html {
    <!OVERLOAD_RESOLUTION_AMBIGUITY!>head {
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>title {<!NO_VALUE_FOR_PARAMETER!>+<!>"XML encoding with Groovy"}<!>
    }<!>
    <!OVERLOAD_RESOLUTION_AMBIGUITY!>body {
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>h1 {<!NO_VALUE_FOR_PARAMETER!>+<!>"XML encoding with Groovy"}<!>
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>p {<!NO_VALUE_FOR_PARAMETER!>+<!>"this format can be used as an alternative markup to XML"}<!>

      // an element with attributes and text content
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>a(href = "http://groovy.codehaus.org") {<!NO_VALUE_FOR_PARAMETER!>+<!>"Groovy"}<!>

      // mixed content
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>p {
        <!NO_VALUE_FOR_PARAMETER!>+<!>"This is some"
        <!OVERLOAD_RESOLUTION_AMBIGUITY!>b {<!NO_VALUE_FOR_PARAMETER!>+<!>"mixed"}<!>
        <!NO_VALUE_FOR_PARAMETER!>+<!>"text. For more see the"
        <!OVERLOAD_RESOLUTION_AMBIGUITY!>a(href = "http://groovy.codehaus.org") {<!NO_VALUE_FOR_PARAMETER!>+<!>"Groovy"}<!>
        <!NO_VALUE_FOR_PARAMETER!>+<!>"project"
      }<!>
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>p {<!NO_VALUE_FOR_PARAMETER!>+<!>"some text"}<!>

      // content generated by
      <!OVERLOAD_RESOLUTION_AMBIGUITY!>p {
        for (arg in args)
          <!NO_VALUE_FOR_PARAMETER!>+<!>arg
      }<!>
    }<!>
  }<!>
}