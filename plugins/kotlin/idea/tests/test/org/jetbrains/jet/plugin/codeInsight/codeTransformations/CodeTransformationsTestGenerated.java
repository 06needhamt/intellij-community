/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.codeInsight.codeTransformations;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.codeInsight.codeTransformations.AbstractCodeTransformationTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({CodeTransformationsTestGenerated.Folding.class, CodeTransformationsTestGenerated.Unfolding.class})
public class CodeTransformationsTestGenerated extends AbstractCodeTransformationTest {
    @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/folding")
    @InnerTestClasses({Folding.Assignment.class, Folding.AsymmetricReturn.class, Folding.Return.class})
    public static class Folding extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInFolding() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/folding"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/folding/assignment")
        public static class Assignment extends AbstractCodeTransformationTest {
            public void testAllFilesPresentInAssignment() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/folding/assignment"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("innerIfTransformed.kt")
            public void testInnerIfTransformed() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/innerIfTransformed.kt");
            }
            
            @TestMetadata("innerWhenTransformed.kt")
            public void testInnerWhenTransformed() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/innerWhenTransformed.kt");
            }
            
            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIf.kt");
            }
            
            @TestMetadata("simpleIfWithAugmentedAssignment.kt")
            public void testSimpleIfWithAugmentedAssignment() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithAugmentedAssignment.kt");
            }
            
            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithBlocks.kt");
            }
            
            @TestMetadata("simpleIfWithShadowedVar.kt")
            public void testSimpleIfWithShadowedVar() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithShadowedVar.kt");
            }
            
            @TestMetadata("simpleIfWithUnmatchedAssignmentOps.kt")
            public void testSimpleIfWithUnmatchedAssignmentOps() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithUnmatchedAssignmentOps.kt");
            }
            
            @TestMetadata("simpleIfWithUnmatchedAssignments.kt")
            public void testSimpleIfWithUnmatchedAssignments() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithUnmatchedAssignments.kt");
            }
            
            @TestMetadata("simpleIfWithoutElse.kt")
            public void testSimpleIfWithoutElse() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithoutElse.kt");
            }
            
            @TestMetadata("simpleIfWithoutTerminatingAssignment.kt")
            public void testSimpleIfWithoutTerminatingAssignment() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleIfWithoutTerminatingAssignment.kt");
            }
            
            @TestMetadata("simpleWhen.kt")
            public void testSimpleWhen() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleWhen.kt");
            }
            
            @TestMetadata("simpleWhenWithBlocks.kt")
            public void testSimpleWhenWithBlocks() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleWhenWithBlocks.kt");
            }
            
            @TestMetadata("simpleWhenWithShadowedVar.kt")
            public void testSimpleWhenWithShadowedVar() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleWhenWithShadowedVar.kt");
            }
            
            @TestMetadata("simpleWhenWithUnmatchedAssignments.kt")
            public void testSimpleWhenWithUnmatchedAssignments() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleWhenWithUnmatchedAssignments.kt");
            }
            
            @TestMetadata("simpleWhenWithoutTerminatingAssignment.kt")
            public void testSimpleWhenWithoutTerminatingAssignment() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/assignment/simpleWhenWithoutTerminatingAssignment.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/folding/asymmetricReturn")
        public static class AsymmetricReturn extends AbstractCodeTransformationTest {
            public void testAllFilesPresentInAsymmetricReturn() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/folding/asymmetricReturn"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/asymmetricReturn/simpleIf.kt");
            }
            
            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/asymmetricReturn/simpleIfWithBlocks.kt");
            }
            
            @TestMetadata("simpleIfWithComments.kt")
            public void testSimpleIfWithComments() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/asymmetricReturn/simpleIfWithComments.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/folding/return")
        public static class Return extends AbstractCodeTransformationTest {
            public void testAllFilesPresentInReturn() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/folding/return"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("innerIfTransformed.kt")
            public void testInnerIfTransformed() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/return/innerIfTransformed.kt");
            }
            
            @TestMetadata("innerWhenTransformed.kt")
            public void testInnerWhenTransformed() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/return/innerWhenTransformed.kt");
            }
            
            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/return/simpleIf.kt");
            }
            
            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/return/simpleIfWithBlocks.kt");
            }
            
            @TestMetadata("simpleWhen.kt")
            public void testSimpleWhen() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/return/simpleWhen.kt");
            }
            
            @TestMetadata("simpleWhenWithBlocks.kt")
            public void testSimpleWhenWithBlocks() throws Exception {
                doTestBranchedFolding("idea/testData/codeInsight/codeTransformations/branched/folding/return/simpleWhenWithBlocks.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Folding");
            suite.addTestSuite(Folding.class);
            suite.addTestSuite(Assignment.class);
            suite.addTestSuite(AsymmetricReturn.class);
            suite.addTestSuite(Return.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/unfolding")
    @InnerTestClasses({Unfolding.Assignment.class, Unfolding.Return.class})
    public static class Unfolding extends AbstractCodeTransformationTest {
        public void testAllFilesPresentInUnfolding() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/unfolding"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment")
        public static class Assignment extends AbstractCodeTransformationTest {
            public void testAllFilesPresentInAssignment() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("innerIfTransformed.kt")
            public void testInnerIfTransformed() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment/innerIfTransformed.kt");
            }
            
            @TestMetadata("nestedIfs.kt")
            public void testNestedIfs() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment/nestedIfs.kt");
            }
            
            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment/simpleIf.kt");
            }
            
            @TestMetadata("simpleIfWithAugmentedAssignment.kt")
            public void testSimpleIfWithAugmentedAssignment() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment/simpleIfWithAugmentedAssignment.kt");
            }
            
            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment/simpleIfWithBlocks.kt");
            }
            
            @TestMetadata("simpleIfWithoutAssignment.kt")
            public void testSimpleIfWithoutAssignment() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/assignment/simpleIfWithoutAssignment.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/codeInsight/codeTransformations/branched/unfolding/return")
        public static class Return extends AbstractCodeTransformationTest {
            public void testAllFilesPresentInReturn() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("idea/testData/codeInsight/codeTransformations/branched/unfolding/return"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("innerIfTransformed.kt")
            public void testInnerIfTransformed() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/return/innerIfTransformed.kt");
            }
            
            @TestMetadata("simpleIf.kt")
            public void testSimpleIf() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/return/simpleIf.kt");
            }
            
            @TestMetadata("simpleIfWithBlocks.kt")
            public void testSimpleIfWithBlocks() throws Exception {
                doTestBranchedUnfolding("idea/testData/codeInsight/codeTransformations/branched/unfolding/return/simpleIfWithBlocks.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Unfolding");
            suite.addTestSuite(Unfolding.class);
            suite.addTestSuite(Assignment.class);
            suite.addTestSuite(Return.class);
            return suite;
        }
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("CodeTransformationsTestGenerated");
        suite.addTest(Folding.innerSuite());
        suite.addTest(Unfolding.innerSuite());
        return suite;
    }
}
