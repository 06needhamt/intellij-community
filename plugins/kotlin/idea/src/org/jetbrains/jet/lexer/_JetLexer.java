/* The following code was generated by JFlex 1.4.3 on 12/15/10 2:07 PM */

/* It's an automatically generated code. Do not modify it. */
package org.jetbrains.jet.lexer;

import com.intellij.lexer.*;
import com.intellij.psi.*;
import com.intellij.psi.tree.IElementType;

import org.jetbrains.jet.lexer.JetTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/15/10 2:07 PM from the specification file
 * <tt>/home/user/work/jet/idea/src/org/jetbrains/jet/lexer/Jet.flex</tt>
 */
class _JetLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\10\1\0\1\3\1\0\16\5\4\0\1\3\1\62"+
    "\1\23\1\0\1\4\1\63\1\67\1\21\1\57\1\60\1\7\1\61"+
    "\1\74\1\17\1\15\1\6\1\11\11\1\1\72\1\73\1\64\1\66"+
    "\1\65\1\71\1\0\1\2\1\13\1\2\1\14\1\16\1\14\5\4"+
    "\1\4\3\4\1\20\7\4\1\12\2\4\1\53\1\22\1\54\1\0"+
    "\1\4\1\0\1\25\1\50\1\32\1\44\1\27\1\42\1\4\1\36"+
    "\1\37\1\52\1\51\1\35\1\26\1\24\1\45\1\31\1\4\1\41"+
    "\1\30\1\33\1\43\1\40\1\47\1\46\1\34\1\4\1\55\1\70"+
    "\1\56\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0"+
    "\162\4\4\0\14\4\16\0\5\4\11\0\1\4\21\0\130\5\5\0"+
    "\23\5\12\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0"+
    "\24\4\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4\1\0"+
    "\4\5\3\0\105\4\1\0\46\4\2\0\2\4\6\0\20\4\41\0"+
    "\46\4\2\0\1\4\7\0\47\4\11\0\21\5\1\0\27\5\1\0"+
    "\3\5\1\0\1\5\1\0\2\5\1\0\1\5\13\0\33\4\5\0"+
    "\3\4\15\0\4\5\14\0\6\5\13\0\32\4\5\0\13\4\16\5"+
    "\7\0\12\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0"+
    "\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4"+
    "\17\0\1\5\1\4\1\5\36\4\33\5\2\0\3\4\60\0\46\4"+
    "\13\5\1\4\u014f\0\3\5\66\4\2\0\1\5\1\4\20\5\2\0"+
    "\1\4\4\5\3\0\12\4\2\5\2\0\12\5\21\0\3\5\1\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0"+
    "\4\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\11\0"+
    "\1\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4\15\0"+
    "\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0"+
    "\2\5\2\0\3\5\13\0\4\4\1\0\1\4\7\0\14\5\3\4"+
    "\14\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5"+
    "\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0"+
    "\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\6\5\3\0"+
    "\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\4\0"+
    "\12\5\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4"+
    "\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4"+
    "\3\0\3\4\3\0\10\4\1\0\3\4\4\0\5\5\3\0\3\5"+
    "\1\0\4\5\11\0\1\5\17\0\11\5\11\0\1\4\7\0\3\5"+
    "\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4"+
    "\4\0\7\5\1\0\3\5\1\0\4\5\7\0\2\5\11\0\2\4"+
    "\4\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5"+
    "\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4\4\0\12\5"+
    "\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\20\4"+
    "\4\0\6\5\2\0\3\5\1\0\4\5\11\0\1\5\10\0\2\4"+
    "\4\0\12\5\22\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4"+
    "\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5"+
    "\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0"+
    "\10\4\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4"+
    "\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4"+
    "\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5\2\4"+
    "\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5"+
    "\2\0\12\5\2\0\2\4\42\0\1\4\27\0\2\5\6\0\12\5"+
    "\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4\1\0"+
    "\42\4\6\0\24\5\1\0\2\5\4\4\4\0\10\5\1\0\44\5"+
    "\11\0\1\5\71\0\42\4\1\0\5\4\1\0\2\4\1\0\7\5"+
    "\3\0\4\5\6\0\12\5\6\0\6\4\4\5\106\0\46\4\12\0"+
    "\51\4\7\0\132\4\5\0\104\4\5\0\122\4\6\0\7\4\1\0"+
    "\77\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\47\4\1\0\1\4\1\0\4\4\2\0\37\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\7\4\1\0\27\4\1\0\37\4\1\0\1\4\1\0"+
    "\4\4\2\0\7\4\1\0\47\4\1\0\23\4\16\0\11\5\56\0"+
    "\125\4\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4\3\0"+
    "\3\4\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0"+
    "\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4"+
    "\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5"+
    "\2\0\12\5\6\0\130\4\10\0\51\4\1\5\126\0\35\4\3\0"+
    "\14\5\4\0\14\5\12\0\12\5\36\4\2\0\5\4\u038b\0\154\4"+
    "\224\0\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4"+
    "\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4"+
    "\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4"+
    "\1\0\7\4\17\0\4\5\32\0\5\5\20\0\2\4\23\0\1\4"+
    "\13\0\4\5\6\0\6\5\1\0\1\4\15\0\1\4\40\0\22\4"+
    "\36\0\15\5\4\0\1\5\3\0\6\5\27\0\1\4\4\0\1\4"+
    "\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4"+
    "\5\0\5\4\26\0\44\4\u0e81\0\3\4\31\0\11\4\6\5\1\0"+
    "\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0"+
    "\137\4\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0"+
    "\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0"+
    "\73\4\225\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0"+
    "\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0"+
    "\20\5\20\0\4\5\17\0\2\4\30\0\3\4\31\0\1\4\6\0"+
    "\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5\7\0"+
    "\32\4\4\0\1\4\1\0\32\4\12\0\132\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0"+
    "\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\16\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\1\1\27\1\30\1\31\1\32\3\33\1\34"+
    "\1\35\1\36\1\37\1\0\2\2\1\40\1\41\1\42"+
    "\1\43\1\44\2\11\3\12\3\3\1\45\10\3\1\46"+
    "\1\47\1\50\6\3\1\51\4\3\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\33\1\35\1\65\2\0\1\12\1\66\1\3\1\67"+
    "\13\3\1\70\1\71\1\3\1\72\1\3\1\73\1\74"+
    "\1\3\1\75\3\3\1\76\1\0\2\65\1\0\1\33"+
    "\2\0\1\3\1\77\1\3\1\100\3\3\1\101\1\102"+
    "\1\3\1\103\7\3\1\35\1\0\1\33\1\0\1\3"+
    "\1\104\1\3\1\105\2\3\1\106\1\107\1\3\1\110"+
    "\2\3\1\111\1\112\1\66\3\3\1\113\1\114\1\3"+
    "\1\115\6\3\1\116\1\3\1\117\1\120\1\3\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u081a\0\75\0\75\0\75\0\75\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\75\0\75\0\u094b\0\u0988\0\u09c5\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\267\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\267\0\u0d95\0\267\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\267\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u1034\0\75\0\75\0\75\0\75\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\75\0\u11a2\0\u11df\0\267\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\267\0\267\0\u14bb\0\267\0\u14f8\0\267\0\267"+
    "\0\u1535\0\267\0\u1572\0\u15af\0\u15ec\0\75\0\u1629\0\u1666"+
    "\0\75\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\267\0\u17d4"+
    "\0\267\0\u1811\0\u184e\0\u188b\0\u18c8\0\267\0\u1905\0\267"+
    "\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\75"+
    "\0\u1aed\0\u1128\0\u1b2a\0\u1b67\0\267\0\u1ba4\0\267\0\u1be1"+
    "\0\u1c1e\0\267\0\267\0\u1c5b\0\267\0\u1c98\0\u1cd5\0\267"+
    "\0\267\0\75\0\u1d12\0\u1d4f\0\u1d8c\0\267\0\267\0\u1dc9"+
    "\0\267\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\267"+
    "\0\u1f74\0\267\0\267\0\u1fb1\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\2\1\6\1\7"+
    "\1\5\1\10\3\4\1\11\1\4\1\12\1\4\1\13"+
    "\1\2\1\14\1\15\1\16\1\17\1\20\2\4\1\21"+
    "\1\22\3\4\1\23\1\24\1\25\1\26\1\4\1\27"+
    "\1\30\1\4\1\31\1\32\2\4\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\76\0"+
    "\1\3\7\0\1\3\2\0\1\55\1\56\1\57\10\0"+
    "\1\57\12\0\1\55\1\0\1\55\31\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\27\4\25\0\1\5\4\0\1\5\72\0\1\60\1\61"+
    "\56\0\1\62\74\0\1\63\7\0\1\64\7\0\1\64"+
    "\1\65\1\66\1\55\1\56\1\57\10\0\1\57\12\0"+
    "\1\55\1\0\1\55\1\0\1\65\1\0\1\66\25\0"+
    "\1\56\5\0\1\67\1\0\1\56\3\0\1\70\53\0"+
    "\1\71\22\0\1\72\46\0\1\73\6\0\10\13\1\0"+
    "\10\13\1\74\1\75\52\13\10\76\1\0\11\76\1\77"+
    "\1\100\51\76\1\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\4\1\101\1\4"+
    "\1\102\13\4\1\103\7\4\23\0\2\4\1\0\2\4"+
    "\3\0\4\4\1\0\1\4\1\0\1\4\3\0\4\4"+
    "\1\104\22\4\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\4\1\105\25\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\11\4\1\106\10\4\1\107\4\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\11\4\1\110\7\4\1\111\5\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\10\4\1\112\1\4\1\113\2\4"+
    "\1\114\11\4\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\115\3\4\1\116"+
    "\11\4\1\117\10\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\1\4\1\120"+
    "\25\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\121\23\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\1\4\1\122\15\4\1\123\1\4\1\124"+
    "\5\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\125\15\4\1\126"+
    "\5\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\17\4\1\127\4\4\1\130"+
    "\2\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\12\4\1\131\14\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\15\4\1\132\11\4\103\0\1\133\4\0"+
    "\1\134\74\0\1\135\74\0\1\136\74\0\1\137\74\0"+
    "\1\140\74\0\1\141\75\0\1\142\75\0\1\143\21\0"+
    "\1\144\54\0\1\145\3\0\1\56\7\0\1\56\2\0"+
    "\1\55\1\0\1\57\10\0\1\57\12\0\1\55\1\0"+
    "\1\55\31\0\1\146\7\0\1\146\2\0\1\55\2\0"+
    "\1\146\22\0\1\55\1\0\1\55\14\0\1\146\13\0"+
    "\10\60\1\0\64\60\7\147\1\150\65\147\1\0\1\64"+
    "\7\0\1\64\2\0\1\55\1\56\1\57\10\0\1\57"+
    "\12\0\1\55\1\0\1\55\30\0\1\151\2\65\5\151"+
    "\1\0\1\65\1\151\2\65\1\151\1\65\1\151\1\152"+
    "\4\151\1\65\1\151\1\65\1\151\1\152\1\65\7\151"+
    "\1\65\1\151\1\65\3\151\1\65\24\151\1\0\1\66"+
    "\7\0\1\66\63\0\10\13\1\0\64\13\10\76\1\0"+
    "\11\76\1\77\1\153\61\76\1\0\64\76\23\0\1\154"+
    "\52\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\2\4\1\155\24\4\23\0\2\4"+
    "\1\0\2\4\3\0\4\4\1\0\1\4\1\0\1\4"+
    "\3\0\23\4\1\156\3\4\23\0\2\4\1\0\2\4"+
    "\3\0\4\4\1\0\1\4\1\0\1\4\3\0\11\4"+
    "\1\157\15\4\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\7\4\1\160\17\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\4\4\1\161\22\4\23\0\2\4"+
    "\1\0\2\4\3\0\4\4\1\0\1\4\1\0\1\4"+
    "\3\0\7\4\1\162\17\4\23\0\2\4\1\0\2\4"+
    "\3\0\4\4\1\0\1\4\1\0\1\4\3\0\1\4"+
    "\1\163\25\4\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\1\164\26\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\165\21\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\13\4\1\166\1\4\1\167\11\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\17\4\1\170\7\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\1\171\26\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\11\4\1\172\3\4\1\173\11\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\7\4\1\174\6\4\1\175\10\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\11\4\1\176\15\4\23\0\2\4"+
    "\1\0\2\4\3\0\4\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\177\26\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\15\4\1\200"+
    "\11\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\6\4\1\201\20\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\7\4\1\202\17\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\26\4\1\203\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\13\4\1\204\13\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\1\205\23\4\110\0\1\206"+
    "\7\0\1\146\7\0\1\146\2\0\1\55\25\0\1\55"+
    "\1\0\1\55\30\0\7\147\1\207\65\147\6\210\1\211"+
    "\1\150\65\210\1\0\2\151\6\0\1\151\1\0\2\151"+
    "\1\0\1\151\1\0\1\212\4\0\1\151\1\0\1\151"+
    "\1\0\1\212\1\151\7\0\1\151\1\0\1\151\3\0"+
    "\1\151\25\0\1\213\1\151\6\0\1\213\1\0\2\151"+
    "\1\0\1\151\1\214\1\212\4\0\1\151\1\0\1\151"+
    "\1\0\1\212\1\151\7\0\1\151\1\0\1\151\3\0"+
    "\1\151\10\0\1\214\13\0\23\154\1\215\51\154\1\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\216\23\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\11\4\1\217\15\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\6\4\1\220"+
    "\20\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\221\23\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\222\23\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\4\4\1\223\22\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\7\4\1\224"+
    "\17\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\225\23\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\4\4\1\226\22\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\21\4\1\227\5\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\3\4\1\230"+
    "\23\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\21\4\1\231\5\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\17\4\1\232\7\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\4\4\1\233\22\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\21\4\1\234"+
    "\5\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\235\23\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\11\4\1\236\15\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\4\1\237\25\4\22\0\6\147\1\240\1\207\65\147"+
    "\7\210\1\241\65\210\1\0\1\146\7\0\1\146\5\0"+
    "\1\214\41\0\1\214\14\0\1\213\1\151\6\0\1\213"+
    "\1\0\1\151\1\242\1\0\1\151\1\0\1\212\4\0"+
    "\1\151\1\0\1\151\1\0\1\212\1\151\7\0\1\242"+
    "\1\0\1\242\3\0\1\151\25\0\1\146\7\0\1\146"+
    "\63\0\23\154\1\243\51\154\1\0\2\4\1\0\2\4"+
    "\3\0\4\4\1\0\1\4\1\0\1\4\3\0\4\4"+
    "\1\244\22\4\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\12\4\1\245\14\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\1\246\26\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\4\4\1\247\22\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\13\4\1\250"+
    "\13\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\21\4\1\251\5\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\23\4\1\252\3\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\7\4\1\253\17\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\15\4\1\254"+
    "\11\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\1\255\23\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\2\4\1\256\24\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\6\4\1\257\20\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\3\4\1\260"+
    "\23\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\25\4\1\261\1\4\22\0"+
    "\6\210\1\211\1\241\65\210\23\154\1\262\51\154\1\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\5\4\1\263\21\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\4\4\1\264\22\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\1\265\26\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\16\4\1\266\10\4\23\0\2\4"+
    "\1\0\2\4\3\0\4\4\1\0\1\4\1\0\1\4"+
    "\3\0\1\267\26\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\5\4\1\270"+
    "\21\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\7\4\1\271\17\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\1\4\1\272\25\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\13\4\1\273\13\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\17\4\1\274"+
    "\7\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\21\4\1\275\5\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\6\4\1\276\20\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\21\4\1\277\5\4\23\0\2\4\1\0\2\4\3\0"+
    "\4\4\1\0\1\4\1\0\1\4\3\0\3\4\1\300"+
    "\23\4\23\0\2\4\1\0\2\4\3\0\4\4\1\0"+
    "\1\4\1\0\1\4\3\0\4\4\1\301\22\4\23\0"+
    "\2\4\1\0\2\4\3\0\4\4\1\0\1\4\1\0"+
    "\1\4\3\0\3\4\1\302\23\4\23\0\2\4\1\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\0\1\4\3\0"+
    "\1\303\26\4\23\0\2\4\1\0\2\4\3\0\4\4"+
    "\1\0\1\4\1\0\1\4\3\0\3\4\1\304\23\4"+
    "\23\0\2\4\1\0\2\4\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\3\0\15\4\1\305\11\4\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8174];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\6\11\11\1\4\11\4\1\2\11"+
    "\1\0\2\1\6\11\36\1\6\11\1\1\4\11\3\1"+
    "\2\0\1\11\32\1\1\11\1\0\1\1\1\11\1\0"+
    "\1\1\2\0\22\1\1\11\1\0\1\1\1\0\16\1"+
    "\1\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _JetLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JetLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1784) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return JetTokens.IDENTIFIER;
          }
        case 82: break;
        case 60: 
          { return JetTokens.FOR_KEYWORD ;
          }
        case 83: break;
        case 61: 
          { return JetTokens.OUT_KEYWORD ;
          }
        case 84: break;
        case 76: 
          { return JetTokens.RETURN_KEYWORD ;
          }
        case 85: break;
        case 63: 
          { return JetTokens.NULL_KEYWORD ;
          }
        case 86: break;
        case 20: 
          { return JetTokens.LT        ;
          }
        case 87: break;
        case 41: 
          { return JetTokens.DO_KEYWORD ;
          }
        case 88: break;
        case 17: 
          { return JetTokens.PLUS      ;
          }
        case 89: break;
        case 54: 
          { return JetTokens.RAW_STRING_LITERAL;
          }
        case 90: break;
        case 43: 
          { return JetTokens.PLUSEQ    ;
          }
        case 91: break;
        case 26: 
          { return JetTokens.COMMA     ;
          }
        case 92: break;
        case 68: 
          { return JetTokens.MATCH_KEYWORD ;
          }
        case 93: break;
        case 21: 
          { return JetTokens.GT        ;
          }
        case 94: break;
        case 4: 
          { return JetTokens.WHITE_SPACE;
          }
        case 95: break;
        case 75: 
          { return JetTokens.TYPEOF_KEYWORD ;
          }
        case 96: break;
        case 16: 
          { return JetTokens.RPAR      ;
          }
        case 97: break;
        case 67: 
          { return JetTokens.TRUE_KEYWORD ;
          }
        case 98: break;
        case 49: 
          { return JetTokens.ANDAND    ;
          }
        case 99: break;
        case 53: 
          { return JetTokens.DOC_COMMENT;
          }
        case 100: break;
        case 27: 
          { return JetTokens.FLOAT_LITERAL;
          }
        case 101: break;
        case 28: 
          { return JetTokens.EOL_COMMENT;
          }
        case 102: break;
        case 24: 
          { return JetTokens.COLON     ;
          }
        case 103: break;
        case 46: 
          { return JetTokens.LTEQ      ;
          }
        case 104: break;
        case 11: 
          { return JetTokens.LBRACKET  ;
          }
        case 105: break;
        case 9: 
          { return JetTokens.CHARACTER_LITERAL;
          }
        case 106: break;
        case 57: 
          { return JetTokens.VAR_KEYWORD ;
          }
        case 107: break;
        case 47: 
          { return JetTokens.GTEQ      ;
          }
        case 108: break;
        case 2: 
          { return JetTokens.INTEGER_LITERAL;
          }
        case 109: break;
        case 14: 
          { return JetTokens.RBRACE    ;
          }
        case 110: break;
        case 69: 
          { return JetTokens.CLASS_KEYWORD ;
          }
        case 111: break;
        case 18: 
          { return JetTokens.EXCL      ;
          }
        case 112: break;
        case 44: 
          { return JetTokens.EXCLEQ    ;
          }
        case 113: break;
        case 36: 
          { return JetTokens.MINUSEQ   ;
          }
        case 114: break;
        case 70: 
          { return JetTokens.THROW_KEYWORD ;
          }
        case 115: break;
        case 73: 
          { return JetTokens.WHILE_KEYWORD ;
          }
        case 116: break;
        case 35: 
          { return JetTokens.MINUSMINUS;
          }
        case 117: break;
        case 78: 
          { return JetTokens.CONTINUE_KEYWORD ;
          }
        case 118: break;
        case 5: 
          { return JetTokens.DIV       ;
          }
        case 119: break;
        case 52: 
          { return JetTokens.ELVIS     ;
          }
        case 120: break;
        case 23: 
          { return JetTokens.QUEST     ;
          }
        case 121: break;
        case 50: 
          { return JetTokens.OROR      ;
          }
        case 122: break;
        case 19: 
          { return JetTokens.PERC      ;
          }
        case 123: break;
        case 45: 
          { return JetTokens.PERCEQ    ;
          }
        case 124: break;
        case 33: 
          { return JetTokens.RANGE     ;
          }
        case 125: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 126: break;
        case 51: 
          { return JetTokens.SAFE_ACCESS;
          }
        case 127: break;
        case 79: 
          { return JetTokens.NAMESPACE_KEYWORD ;
          }
        case 128: break;
        case 81: 
          { return JetTokens.DECOMPOSER_KEYWORD ;
          }
        case 129: break;
        case 6: 
          { return JetTokens.MUL       ;
          }
        case 130: break;
        case 12: 
          { return JetTokens.RBRACKET  ;
          }
        case 131: break;
        case 42: 
          { return JetTokens.PLUSPLUS  ;
          }
        case 132: break;
        case 66: 
          { return JetTokens.THIS_KEYWORD ;
          }
        case 133: break;
        case 7: 
          { return JetTokens.DOT       ;
          }
        case 134: break;
        case 25: 
          { return JetTokens.SEMICOLON ;
          }
        case 135: break;
        case 40: 
          { return JetTokens.IF_KEYWORD ;
          }
        case 136: break;
        case 22: 
          { return JetTokens.EQ        ;
          }
        case 137: break;
        case 15: 
          { return JetTokens.LPAR      ;
          }
        case 138: break;
        case 8: 
          { return JetTokens.MINUS     ;
          }
        case 139: break;
        case 72: 
          { return JetTokens.FALSE_KEYWORD ;
          }
        case 140: break;
        case 65: 
          { return JetTokens.TYPE_KEYWORD ;
          }
        case 141: break;
        case 58: 
          { return JetTokens.REF_KEYWORD ;
          }
        case 142: break;
        case 59: 
          { return JetTokens.FUN_KEYWORD ;
          }
        case 143: break;
        case 39: 
          { return JetTokens.IS_KEYWORD ;
          }
        case 144: break;
        case 30: 
          { return JetTokens.DIVEQ     ;
          }
        case 145: break;
        case 80: 
          { return JetTokens.EXTENSION_KEYWORD ;
          }
        case 146: break;
        case 37: 
          { return JetTokens.AS_KEYWORD ;
          }
        case 147: break;
        case 64: 
          { return JetTokens.ELSE_KEYWORD ;
          }
        case 148: break;
        case 38: 
          { return JetTokens.IN_KEYWORD ;
          }
        case 149: break;
        case 48: 
          { return JetTokens.EQEQ      ;
          }
        case 150: break;
        case 56: 
          { return JetTokens.VAL_KEYWORD ;
          }
        case 151: break;
        case 62: 
          { return JetTokens.EQEQEQ    ;
          }
        case 152: break;
        case 55: 
          { return JetTokens.NEW_KEYWORD ;
          }
        case 153: break;
        case 31: 
          { return JetTokens.MULTEQ    ;
          }
        case 154: break;
        case 10: 
          { return JetTokens.STRING_LITERAL;
          }
        case 155: break;
        case 13: 
          { return JetTokens.LBRACE    ;
          }
        case 156: break;
        case 71: 
          { return JetTokens.ISNOT_KEYWORD ;
          }
        case 157: break;
        case 77: 
          { return JetTokens.OBJECT_KEYWORD ;
          }
        case 158: break;
        case 74: 
          { return JetTokens.BREAK_KEYWORD ;
          }
        case 159: break;
        case 29: 
          { return JetTokens.BLOCK_COMMENT;
          }
        case 160: break;
        case 34: 
          { return JetTokens.FILTER    ;
          }
        case 161: break;
        case 32: 
          { return JetTokens.MAP       ;
          }
        case 162: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
