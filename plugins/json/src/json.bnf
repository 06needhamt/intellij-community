{
  parserClass='com.jetbrains.json.JsonParser'
  parserUtilClass="com.jetbrains.json.JsonParserUtil"
  psiPackage='com.jetbrains.json.psi'
  psiImplPackage='com.jetbrains.json.psi.impl'

  elementTypeHolderClass='com.jetbrains.json.JsonElementTypes'
  elementTypeClass='com.jetbrains.json.JsonElementType'
  psiClassPrefix="Json"

  psiImplUtilClass='com.jetbrains.json.psi.JsonPsiImplUtils'
  tokenTypeClass='com.jetbrains.json.JsonTokenType'

    tokens = [
        L_CURLY='{'
        R_CURLY='}'
        L_BRAKET='['
        R_BRAKET=']'
        
        COMMA=','
        COLON=':'
//        COMMENT='regexp:"//.*|/\*.*?\*/"'
        // else /\*(?:[^*]|\*[^/])*\*/
        STRING='regexp:"([^\\"]|\\([\\"/bfnrt]|u[a-fA-F0-9]{4}))*"'
        NUMBER='regexp:-?\d+(\.\d+([eE][+-]?\d+)?)?'
        TRUE='true'
        FALSE='false'
        NULL='null'
    ]

    extends("object|array|literal")=property_value
    extends("string_literal|number_literal|boolean_literal|null_literal")=literal
}

json ::= object | array

object ::= L_CURLY (property (COMMA property)*)? R_CURLY {
  pin=1
//  recoverUntil=comma
  methods=[
    findProperty
  ]
}
//private comma ::= ','
//private closing_brace ::= !('}')

property ::= property_name COLON property_value {
  pin=1
  methods=[
    getName
    getValue
    delete
  ]
}

array ::= L_BRAKET (property_value (COMMA property_value)*)? R_BRAKET {
  pin=1
//  recoverUntil=closing_bracket
}
//private closing_bracket ::= !(']')


property_name ::= string_literal
property_value ::= object | array | literal

string_literal ::= STRING
number_literal ::= NUMBER
boolean_literal ::= TRUE | FALSE
null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[isQuotedString]
  mixin="com.jetbrains.json.psi.impl.JsonLiteralMixin"
}