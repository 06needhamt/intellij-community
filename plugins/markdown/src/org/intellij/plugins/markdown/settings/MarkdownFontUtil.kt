// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.plugins.markdown.settings

import com.intellij.ide.DataManager
import com.intellij.lang.Language
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.project.Project
import com.intellij.psi.css.CssElementFactory
import com.intellij.psi.css.CssTerm

object MarkdownFontUtil {
  private const val startMetaTag = "/* Start of CSS rules auto-generated by IntelliJ */"
  private const val endMetaTeg = "/* End of CSS rules auto-generated by IntelliJ */"

  @JvmStatic
  fun getFontSizeFromCss(customCss: String): Int? {
    val fontSizeTerm = getNewFontValue(customCss, "font-size")
    if (fontSizeTerm != null) return fontSizeTerm.firstChild.firstChild.text.toInt() //CSS_TERM -> CSS_NUMBER_TERM -> CSS_NUMBER

    return null
  }

  fun updateCustomCss(fontSize: Int, customCss: String) {
    val stylesheetText = removeOldAutogeneratedCss(customCss) + getAutogeneratedCss(fontSize)

    MarkdownApplicationSettings.getInstance().markdownCssSettings = MarkdownCssSettings(
      false,
      "",
      true,
      stylesheetText,
      fontSize
    )
  }

  private fun getAutogeneratedCss(fontSize: Int) =
    """
      
      $startMetaTag
      div { 
        font-size: ${fontSize}px !important; 
      }
      $endMetaTeg
    """.trimIndent()

  private fun removeOldAutogeneratedCss(customCss: String): String {
    val startTagIdx = customCss.indexOf(startMetaTag)
    val endTagIdx = customCss.indexOf(endMetaTeg)

    if (startTagIdx != -1 && endTagIdx != -1) {
      val generatedCssEnd = endTagIdx + endMetaTeg.lastIndex

      return customCss.removeRange((startTagIdx..generatedCssEnd)).trim()
    }

    return customCss
  }

  private fun getNewFontValue(customCss: String, propName: String): CssTerm? {
    var project: Project? = null
    DataManager.getInstance().dataContextFromFocusAsync.onProcessed {
      project = CommonDataKeys.PROJECT.getData(it) as Project
    }

    val rulesets = CssElementFactory.getInstance(project!!).createStylesheet(customCss, Language.ANY).rulesets

    for (idx in rulesets.lastIndex downTo 0) {
      val ruleBlock = rulesets[idx].block

      if (ruleBlock != null) {
        val fontFamilyIdx = ruleBlock.declarations.indexOfLast { it.propertyName.toLowerCase() == propName }

        if (fontFamilyIdx != -1) {
          val termList = ruleBlock.declarations[fontFamilyIdx].value

          if (termList != null) return termList.firstChild as CssTerm //TODO: can it suddenly break down here? ðŸ¤”
        }
      }
    }

    return null
  }
}
