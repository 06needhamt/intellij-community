package org.jetbrains.idea.maven.project;

import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.util.io.FileUtil;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author Vladislav.Kaznacheev
 */
public class ImporterPreferencesForm {

  private JPanel panel;
  private JRadioButton myRegularModulesButton;
  private JRadioButton myTemporaryModulesButton;
  private JCheckBox myModuleDirCheckBox;
  private TextFieldWithBrowseButton myModuleDirControl;
  private JCheckBox myCreateGroupsCheckBox;
  private JCheckBox myLookForNestedCheckBox;
  private JCheckBox mySynchronizeOnStartCheckBox;
  private JCheckBox myGenerateSourcesCheckBox;
  private JCheckBox myDownloadSourcesCheckBox;
  private JCheckBox myDownloadJavadocCheckBox;

  public ImporterPreferencesForm() {

    ActionListener listener = new ActionListener() {
      public void actionPerformed(final ActionEvent e) {
        enableControls();
      }
    };
    myRegularModulesButton.addActionListener(listener);
    myTemporaryModulesButton.addActionListener(listener);
    myModuleDirCheckBox.addActionListener(listener);

    myModuleDirControl.addBrowseFolderListener(ProjectBundle.message("maven.import.title.module.dir"), "", null,
                                               new FileChooserDescriptor(false, true, false, false, false, false));
  }

  private void enableControls() {
    final boolean dedicated = myModuleDirCheckBox.isSelected();
    myModuleDirControl.setEnabled(dedicated);
    if (dedicated && StringUtil.isEmptyOrSpaces(myModuleDirControl.getText())) {
      myModuleDirControl.setText(FileUtil.toSystemDependentName(getDefaultModuleDir()));
    }
  }

  public String getDefaultModuleDir() {
    return "";
  }

  public JComponent createComponent() {
    return panel;
  }

  public void getData(final MavenImporterPreferences data) {
    data.setSynchronizeOnStart(mySynchronizeOnStartCheckBox.isSelected());
    data.setGenerateSources(myGenerateSourcesCheckBox.isSelected());
    data.setDownloadSources(myDownloadSourcesCheckBox.isSelected());
    data.setDownloadJavadoc(myDownloadJavadocCheckBox.isSelected());
    data.setAutoImportNew(myTemporaryModulesButton.isSelected());
    data.setDedicatedModuleDir(myModuleDirCheckBox.isSelected() ? myModuleDirControl.getText() : "");
    data.setCreateModuleGroups(myCreateGroupsCheckBox.isSelected());
    data.setLookForNested(myLookForNestedCheckBox.isSelected());
  }

  public void setData(final MavenImporterPreferences data) {
    mySynchronizeOnStartCheckBox.setSelected(data.isSynchronizeOnStart());
    myGenerateSourcesCheckBox.setSelected(data.isGenerateSources());
    myDownloadSourcesCheckBox.setSelected(data.isDownloadSources());
    myDownloadJavadocCheckBox.setSelected(data.isDownloadJavadoc());

    myTemporaryModulesButton.setSelected(data.isAutoImportNew());
    myRegularModulesButton.setSelected(!data.isAutoImportNew());

    myModuleDirCheckBox.setSelected(!StringUtil.isEmptyOrSpaces(data.getDedicatedModuleDir()));
    myModuleDirControl.setText(data.getDedicatedModuleDir());

    myCreateGroupsCheckBox.setSelected(data.isCreateModuleGroups());
    myLookForNestedCheckBox.setSelected(data.isLookForNested());

    enableControls();
  }

  public boolean isModified(MavenImporterPreferences preferences) {
    MavenImporterPreferences formData = new MavenImporterPreferences();
    getData(formData);
    return !formData.equals(preferences);
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel = new JPanel();
    panel.setLayout(new GridLayoutManager(3, 1, new Insets(4, 4, 4, 4), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(5, 2, new Insets(0, 4, 4, 4), -1, -1));
    panel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                                          GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                          GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    panel1.setBorder(BorderFactory.createTitledBorder("Import options"));
    myRegularModulesButton = new JRadioButton();
    myRegularModulesButton.setText("Create regular IntelliJ IDEA modules");
    myRegularModulesButton.setMnemonic('R');
    myRegularModulesButton.setDisplayedMnemonicIndex(7);
    panel1.add(myRegularModulesButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                           GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    myTemporaryModulesButton = new JRadioButton();
    myTemporaryModulesButton.setText("Create temporary modules (re-import on project opening and synchronization)");
    myTemporaryModulesButton.setMnemonic('C');
    myTemporaryModulesButton.setDisplayedMnemonicIndex(0);
    panel1.add(myTemporaryModulesButton, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1,
                                                             GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    myModuleDirControl = new TextFieldWithBrowseButton();
    panel1.add(myModuleDirControl, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                                       GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                                                       GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
                                                       null, null, 0, false));
    myModuleDirCheckBox = new JCheckBox();
    myModuleDirCheckBox.setText("Keep .iml files in");
    myModuleDirCheckBox.setMnemonic('I');
    myModuleDirCheckBox.setDisplayedMnemonicIndex(16);
    panel1.add(myModuleDirCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    myCreateGroupsCheckBox = new JCheckBox();
    myCreateGroupsCheckBox.setText("Create module groups for multi-module Maven projects");
    myCreateGroupsCheckBox.setMnemonic('M');
    myCreateGroupsCheckBox.setDisplayedMnemonicIndex(7);
    panel1.add(myCreateGroupsCheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                           GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    myLookForNestedCheckBox = new JCheckBox();
    myLookForNestedCheckBox.setText("Exhaustive search (look for Maven projects under other Maven projects)");
    myLookForNestedCheckBox.setMnemonic('X');
    myLookForNestedCheckBox.setDisplayedMnemonicIndex(1);
    panel1.add(myLookForNestedCheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(4, 1, new Insets(0, 4, 4, 4), -1, -1));
    panel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                                          GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                          GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    panel2.setBorder(BorderFactory.createTitledBorder("Synchronization"));
    mySynchronizeOnStartCheckBox = new JCheckBox();
    mySynchronizeOnStartCheckBox.setText("Synchronize all modules with Maven projects on project opening");
    mySynchronizeOnStartCheckBox.setMnemonic('Y');
    mySynchronizeOnStartCheckBox.setDisplayedMnemonicIndex(1);
    panel2.add(mySynchronizeOnStartCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                                 GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints
                                                                   .SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null,
                                                                                         0, false));
    myDownloadSourcesCheckBox = new JCheckBox();
    myDownloadSourcesCheckBox.setText("Download sources for Maven dependencies");
    myDownloadSourcesCheckBox.setMnemonic('S');
    myDownloadSourcesCheckBox.setDisplayedMnemonicIndex(9);
    panel2.add(myDownloadSourcesCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                              GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    myDownloadJavadocCheckBox = new JCheckBox();
    myDownloadJavadocCheckBox.setText("Download javadoc for Maven dependencies");
    myDownloadJavadocCheckBox.setMnemonic('J');
    myDownloadJavadocCheckBox.setDisplayedMnemonicIndex(9);
    panel2.add(myDownloadJavadocCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                              GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    myGenerateSourcesCheckBox = new JCheckBox();
    myGenerateSourcesCheckBox.setText("Generate sources");
    myGenerateSourcesCheckBox.setMnemonic('G');
    myGenerateSourcesCheckBox.setDisplayedMnemonicIndex(0);
    panel2.add(myGenerateSourcesCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                              GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    panel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                           GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    ButtonGroup buttonGroup;
    buttonGroup = new ButtonGroup();
    buttonGroup.add(myTemporaryModulesButton);
    buttonGroup.add(myRegularModulesButton);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel;
  }
}
