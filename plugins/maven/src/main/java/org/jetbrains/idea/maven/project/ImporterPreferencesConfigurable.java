package org.jetbrains.idea.maven.project;

import com.intellij.ide.util.ElementsChooser;
import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.List;

/**
 * @author Vladislav.Kaznacheev
 */
public class ImporterPreferencesConfigurable implements Configurable {
  private final MavenImporterPreferencesComponent myPreferencesComponent;
  private final MavenImporter myImporter;

  private final ElementsChooser<String> myChooser = new ElementsChooser<String>(true);
  private JPanel panel;
  private JScrollPane chooserScrollPane;
  private ImporterPreferencesForm preferencesForm;

  public ImporterPreferencesConfigurable(final MavenImporterPreferencesComponent preferencesComponent, final MavenImporter importer) {
    myPreferencesComponent = preferencesComponent;
    myImporter = importer;
    myChooser.setBorder(new EmptyBorder(0, 0, 0, 0));
    chooserScrollPane.setViewportView(myChooser);
    myChooser.setPreferredSize(new Dimension(300, 100));
  }

  private List<String> getOriginal() {
    return myImporter.getState().getRememberedFiles();
  }

  private List<String> getUnmarked() {
    List<String> unmarked = getOriginal();
    unmarked.removeAll(myChooser.getMarkedElements());
    return unmarked;
  }

  @Nls
  public String getDisplayName() {
    return ProjectBundle.message("maven.tab.import");
  }

  @Nullable
  public Icon getIcon() {
    return null;
  }

  @Nullable
  @NonNls
  public String getHelpTopic() {
    return null;
  }

  public JComponent createComponent() {
    return panel;
  }

  public boolean isModified() {
    return preferencesForm.isModified(myPreferencesComponent.getState()) || getUnmarked().size() != 0;
  }

  public void apply() throws ConfigurationException {
    preferencesForm.getData(myPreferencesComponent.getState());
    for (String path : getUnmarked()) {
      myImporter.getState().forget(path);
    }
  }

  public void reset() {
    preferencesForm.setData(myPreferencesComponent.getState());
    myChooser.setElements(getOriginal(), true);
  }

  public void disposeUIResources() {
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel = new JPanel();
    panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 1, new Insets(4, 4, 4, 4), -1, -1));
    panel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                          GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                          GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                                          false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 2, 2, 2), -1, -1));
    panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null,
                                           0, false));
    panel2.setBorder(BorderFactory.createTitledBorder("Maven projects to be automatically re-imported on synchronization"));
    chooserScrollPane = new JScrollPane();
    chooserScrollPane.setHorizontalScrollBarPolicy(31);
    panel2.add(chooserScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                                                      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                                                      new Dimension(-1, 60), null, null, 0, false));
    preferencesForm = new ImporterPreferencesForm();
    panel.add(preferencesForm.$$$getRootComponent$$$(),
              new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints
                .SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                                              false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel;
  }
}