/* The following code was generated by JFlex 1.4.3 on 11/17/15 5:36 PM */

package org.jetbrains.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.yaml.YAMLTokenTypes;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/17/15 5:36 PM from the specification file
 * <tt>/Users/valich/work/idea/plugins/yaml/src/org/jetbrains/yaml/lexer/yaml.flex</tt>
 */
public class _YAMLLexer implements FlexLexer, YAMLTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VALUE_OR_KEY = 6;
  public static final int VALUE_BRACE = 8;
  public static final int YYINITIAL = 0;
  public static final int BRACES = 2;
  public static final int VALUE = 4;
  public static final int INDENT_VALUE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\1\2\0\1\2\22\0\1\13\1\27\1\21\1\6"+
    "\1\25\1\17\1\26\1\22\2\25\1\26\1\33\1\4\1\12\1\32"+
    "\1\25\12\23\1\7\1\25\1\30\1\25\1\14\1\5\1\26\6\23"+
    "\24\24\1\31\1\20\1\11\1\0\1\25\1\3\6\23\24\24\1\15"+
    "\1\34\1\16\1\25\u05e1\0\12\23\206\0\12\23\306\0\12\23\u019c\0"+
    "\12\23\166\0\12\23\166\0\12\23\166\0\12\23\166\0\12\23\166\0"+
    "\12\23\166\0\12\23\166\0\12\23\166\0\12\23\340\0\12\23\166\0"+
    "\12\23\106\0\12\23\u0116\0\12\23\106\0\12\23\u0746\0\12\23\46\0"+
    "\12\23\u012c\0\12\23\200\0\12\23\246\0\12\23\6\0\12\23\266\0"+
    "\12\23\126\0\12\23\206\0\12\23\6\0\12\23\u89c6\0\12\23\u02a6\0"+
    "\12\23\46\0\12\23\306\0\12\23\166\0\12\23\u0196\0\12\23\u5316\0"+
    "\12\23\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\1\1\10\1\11\3\1\1\12\1\1"+
    "\1\13\1\4\2\1\1\10\3\1\1\13\1\14\1\4"+
    "\3\14\1\10\5\14\1\13\1\4\4\14\1\13\1\4"+
    "\3\14\1\15\1\16\1\17\12\0\1\20\1\0\2\21"+
    "\2\22\6\0\1\23\1\0\1\23\5\0\1\13\1\0"+
    "\1\20\6\0\1\24\2\0\1\25\1\13\3\0\2\26"+
    "\4\0\1\24\1\25\2\27\1\0\1\13\1\0\1\20"+
    "\1\0\1\13\17\0\1\30\1\13\1\31\3\0\1\32"+
    "\1\0\1\13\3\0\1\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\2\0\1\13\2\0\2\13\2\0\2\13"+
    "\1\0\1\13\1\0\1\13\2\0\3\13\1\0\3\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\u01b3\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u01b3\0\u0244"+
    "\0\u01b3\0\u01b3\0\u0261\0\u027e\0\u029b\0\u01b3\0\u02b8\0\u02d5"+
    "\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383\0\u03a0\0\u03bd"+
    "\0\u01b3\0\u03da\0\u03f7\0\u03da\0\u0414\0\u0431\0\u044e\0\u046b"+
    "\0\u0488\0\u029b\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u04df\0\u0383"+
    "\0\u03a0\0\u0519\0\u0536\0\u0553\0\u0536\0\u0366\0\u0570\0\u01b3"+
    "\0\u058d\0\u05aa\0\u01b3\0\u05c7\0\u05e4\0\u0601\0\u061e\0\u063b"+
    "\0\u0658\0\u0675\0\u0692\0\u06af\0\u0196\0\u01b3\0\u06cc\0\u01b3"+
    "\0\u06e9\0\u0706\0\u0261\0\u0723\0\u0740\0\u027e\0\u075d\0\u01b3"+
    "\0\u077a\0\u0797\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845"+
    "\0\u0862\0\u087f\0\u02d5\0\u089c\0\u08b9\0\u0383\0\u046b\0\u08d6"+
    "\0\u0740\0\u03a0\0\u0488\0\u08f3\0\u0910\0\u092d\0\u03da\0\u03bd"+
    "\0\u01b3\0\u094a\0\u0967\0\u0984\0\u09a1\0\u09be\0\u01b3\0\u09db"+
    "\0\u01b3\0\u09f8\0\u0a15\0\u0a32\0\u0a4f\0\u0a6c\0\u04c2\0\u0a89"+
    "\0\u0aa6\0\u0536\0\u0519\0\u0ac3\0\u0ae0\0\u0afd\0\u0ac3\0\u0b1a"+
    "\0\u0b37\0\u0b54\0\u0601\0\u0b71\0\u0b8e\0\u063b\0\u01b3\0\u01b3"+
    "\0\u0675\0\u01b3\0\u0bab\0\u0bc8\0\u0be5\0\u01b3\0\u0c02\0\u0c1f"+
    "\0\u0c3c\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd\0\u0cea\0\u0d07"+
    "\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5\0\u0dd2\0\u0def"+
    "\0\u0e0c\0\u0c1f\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\u0e9d\0\u0eba"+
    "\0\u0ed7\0\u0c93\0\u0ef4\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85"+
    "\0\u0d7b\0\u0fa2\0\u0fbf\0\u0fdc\0\u0ff9\0\u0e46\0\u1016\0\u1033"+
    "\0\u1050";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\26\1\21\1\31\1\32\1\21\1\17"+
    "\1\33\1\34\3\17\1\21\1\35\1\17\1\36\1\37"+
    "\1\17\1\21\1\40\1\20\2\21\1\22\1\41\1\24"+
    "\1\42\1\26\1\27\1\43\1\26\1\21\1\44\1\32"+
    "\1\45\1\40\1\46\1\47\3\40\1\21\1\35\1\40"+
    "\1\36\2\40\1\21\1\50\1\20\2\51\1\22\1\52"+
    "\1\24\1\53\1\26\1\27\1\54\1\26\1\55\1\56"+
    "\1\32\1\57\1\50\1\60\1\61\3\50\1\51\1\62"+
    "\1\50\1\36\2\50\1\63\1\64\1\20\2\51\1\22"+
    "\1\65\1\24\1\66\1\26\1\27\1\67\1\26\1\55"+
    "\1\56\1\32\1\57\1\64\1\70\1\71\3\64\1\51"+
    "\1\62\1\64\1\36\2\64\1\63\1\72\1\20\2\51"+
    "\1\22\1\73\1\24\1\74\1\26\1\27\1\75\1\26"+
    "\1\55\1\44\1\32\1\76\1\72\1\60\1\61\3\72"+
    "\1\51\1\62\1\72\1\36\2\72\1\63\1\77\1\100"+
    "\6\77\1\101\2\77\1\101\21\77\27\0\1\102\6\0"+
    "\1\103\6\0\1\104\2\0\1\104\21\0\1\105\4\0"+
    "\1\106\1\0\1\106\2\0\1\106\5\0\1\105\2\0"+
    "\3\105\2\0\1\105\1\0\2\105\2\0\2\103\1\0"+
    "\1\103\3\0\2\103\1\0\1\103\1\0\2\103\12\0"+
    "\1\103\3\0\1\107\4\0\1\110\1\0\1\110\2\0"+
    "\1\110\5\0\1\107\2\0\3\107\2\0\1\107\1\0"+
    "\2\107\2\0\2\103\5\0\1\103\2\0\1\103\35\0"+
    "\1\111\54\0\1\111\1\112\2\0\3\112\1\113\1\114"+
    "\1\115\2\112\1\115\21\112\35\0\1\115\2\0\5\115"+
    "\1\0\2\115\1\0\21\115\1\24\1\0\33\24\1\115"+
    "\1\116\1\0\5\115\1\117\2\115\1\117\21\115\10\0"+
    "\1\26\2\0\1\26\21\0\1\115\1\120\1\0\5\115"+
    "\1\121\1\115\1\122\1\121\21\115\1\123\1\0\16\123"+
    "\1\124\1\125\13\123\1\126\1\0\20\126\1\127\12\126"+
    "\1\0\1\130\3\0\3\131\1\132\1\0\1\133\1\132"+
    "\3\0\1\134\2\0\1\131\2\133\2\131\1\135\1\136"+
    "\1\0\2\131\1\0\1\112\2\0\3\112\1\113\1\114"+
    "\1\115\2\112\1\115\16\112\1\137\2\112\1\140\2\0"+
    "\1\140\1\141\1\140\1\141\1\142\1\143\1\141\1\140"+
    "\1\143\1\140\2\141\12\140\1\141\3\140\1\40\2\0"+
    "\1\40\1\0\3\40\2\0\1\40\1\0\1\40\2\0"+
    "\12\40\1\0\4\40\1\116\1\0\1\40\1\0\3\40"+
    "\1\117\1\0\1\40\1\117\1\40\2\0\12\40\1\0"+
    "\4\40\1\120\1\0\1\40\1\0\3\40\1\121\1\0"+
    "\1\40\1\121\1\40\2\0\12\40\1\0\3\40\15\0"+
    "\1\144\34\0\1\145\17\0\1\146\1\147\16\146\1\150"+
    "\1\151\13\146\1\152\1\153\20\152\1\154\12\152\1\155"+
    "\2\0\3\155\1\156\1\157\1\160\2\155\1\160\21\155"+
    "\1\50\2\0\5\50\1\0\2\50\1\0\22\50\1\116"+
    "\1\0\5\50\1\117\2\50\1\117\21\50\1\0\1\161"+
    "\6\0\1\162\1\0\1\163\1\162\17\0\1\163\16\0"+
    "\1\164\34\0\1\165\17\0\20\147\1\166\1\167\13\147"+
    "\22\153\1\170\12\153\1\0\1\171\6\0\1\172\1\0"+
    "\1\173\1\172\17\0\1\173\1\0\1\174\2\0\3\174"+
    "\1\175\1\176\1\177\2\174\1\177\21\174\1\64\2\0"+
    "\5\64\1\0\2\64\1\0\22\64\1\116\1\0\5\64"+
    "\1\117\2\64\1\117\21\64\1\200\2\0\1\200\1\201"+
    "\1\200\1\201\1\202\1\203\1\201\1\200\1\203\1\200"+
    "\2\201\12\200\1\201\3\200\1\72\2\0\1\72\1\0"+
    "\3\72\2\0\1\72\1\0\1\72\2\0\12\72\1\0"+
    "\4\72\1\116\1\0\1\72\1\0\3\72\1\117\1\0"+
    "\1\72\1\117\1\72\2\0\12\72\1\0\3\72\1\77"+
    "\1\0\33\77\1\0\1\100\6\0\1\101\2\0\1\101"+
    "\26\0\3\204\2\0\1\205\4\0\1\206\2\0\1\204"+
    "\2\205\2\204\1\207\1\210\1\0\2\204\11\0\1\104"+
    "\2\0\1\104\21\0\1\211\2\0\1\211\1\212\1\211"+
    "\1\212\1\213\1\105\1\212\1\211\1\105\1\211\2\212"+
    "\12\211\1\212\3\211\1\105\2\0\1\105\1\0\3\105"+
    "\2\0\1\105\1\0\1\105\2\0\12\105\1\0\3\105"+
    "\1\214\2\0\3\214\1\215\1\216\1\107\2\214\1\107"+
    "\21\214\1\107\2\0\5\107\1\0\2\107\1\0\21\107"+
    "\12\0\1\217\20\0\1\217\1\0\1\112\2\0\4\112"+
    "\1\114\1\115\2\112\1\115\21\112\6\0\1\115\26\0"+
    "\1\115\2\220\5\115\1\220\2\115\1\220\21\115\10\0"+
    "\1\117\2\0\1\117\31\0\1\121\2\0\1\121\21\0"+
    "\1\112\2\0\3\112\1\113\1\114\1\115\1\112\1\221"+
    "\1\115\21\112\1\123\1\0\33\123\7\0\1\222\34\0"+
    "\1\222\12\0\1\126\13\0\1\130\3\0\3\131\1\132"+
    "\1\0\1\131\1\132\3\0\1\134\2\0\5\131\3\0"+
    "\2\131\11\0\1\132\2\0\1\132\22\0\1\130\3\0"+
    "\3\131\1\132\1\0\1\133\1\132\3\0\1\134\2\0"+
    "\1\131\2\133\2\131\1\135\2\0\2\131\24\0\1\223"+
    "\16\0\3\131\2\0\1\131\4\0\1\134\2\0\5\131"+
    "\3\0\2\131\5\0\4\224\1\0\2\224\4\0\1\225"+
    "\2\0\6\224\1\0\3\224\1\0\1\112\2\0\4\112"+
    "\1\114\1\115\2\112\1\115\16\112\1\221\2\112\1\140"+
    "\2\0\1\140\1\141\2\140\1\142\1\143\1\141\1\140"+
    "\1\143\1\140\2\141\12\140\1\141\3\140\6\0\1\40"+
    "\26\0\1\40\2\226\1\40\1\226\3\40\2\226\1\40"+
    "\1\226\1\40\2\226\12\40\1\226\3\40\1\227\1\0"+
    "\4\227\1\0\2\227\3\0\1\227\2\0\12\227\1\0"+
    "\3\227\1\230\1\0\3\145\1\231\1\145\1\231\2\145"+
    "\1\231\3\145\1\232\1\145\1\230\2\145\3\230\2\145"+
    "\1\230\1\145\2\230\1\145\1\146\1\147\33\146\7\0"+
    "\1\222\12\0\1\152\12\0\1\155\2\0\4\155\1\157"+
    "\1\160\2\155\1\160\21\155\6\0\1\50\36\0\1\162"+
    "\2\0\1\162\22\0\1\161\6\0\1\162\2\0\1\162"+
    "\21\0\1\233\1\0\4\233\1\0\2\233\3\0\1\233"+
    "\2\0\12\233\1\0\3\233\1\234\1\0\3\165\1\235"+
    "\1\165\1\235\2\165\1\235\3\165\1\236\1\165\1\234"+
    "\2\165\3\234\2\165\1\234\1\165\2\234\1\165\35\147"+
    "\22\0\1\153\22\0\1\172\2\0\1\172\22\0\1\171"+
    "\6\0\1\172\2\0\1\172\21\0\1\174\2\0\4\174"+
    "\1\176\1\177\2\174\1\177\21\174\6\0\1\64\26\0"+
    "\1\64\2\220\5\64\1\220\2\64\1\220\21\64\1\200"+
    "\2\0\1\200\1\201\2\200\1\202\1\203\1\201\1\200"+
    "\1\203\1\200\2\201\12\200\1\201\3\200\6\0\1\72"+
    "\33\0\3\204\2\0\1\204\4\0\1\206\2\0\5\204"+
    "\3\0\2\204\6\0\3\204\2\0\1\205\4\0\1\206"+
    "\2\0\1\204\2\205\2\204\1\207\2\0\2\204\24\0"+
    "\1\237\15\0\4\240\1\0\2\240\4\0\1\241\2\0"+
    "\6\240\1\0\3\240\1\0\1\211\2\0\1\211\1\212"+
    "\2\211\1\213\1\105\1\212\1\211\1\105\1\211\2\212"+
    "\12\211\1\212\3\211\6\0\1\105\26\0\1\214\2\0"+
    "\4\214\1\216\1\107\2\214\1\107\21\214\6\0\1\107"+
    "\51\0\1\131\15\0\4\224\1\0\2\224\1\0\1\242"+
    "\2\0\1\225\2\0\6\224\1\0\3\224\24\0\1\243"+
    "\11\0\1\244\1\0\3\227\1\245\1\0\1\202\1\227"+
    "\1\0\1\245\1\227\2\0\1\246\1\227\1\244\2\227"+
    "\3\244\2\227\1\244\1\0\2\244\1\227\1\247\1\0"+
    "\1\145\1\247\1\250\1\251\1\250\1\231\1\252\1\250"+
    "\1\251\1\252\1\247\1\250\1\253\12\247\1\250\3\247"+
    "\1\230\1\0\1\145\1\230\1\145\1\251\1\230\1\251"+
    "\2\145\1\251\1\145\1\230\1\145\1\232\12\230\1\145"+
    "\3\230\1\72\4\0\1\202\1\0\1\202\2\0\1\202"+
    "\5\0\1\72\2\0\3\72\2\0\1\72\1\0\2\72"+
    "\1\0\1\254\1\0\3\233\1\255\1\0\1\157\1\233"+
    "\1\0\1\255\1\233\2\0\1\256\1\233\1\254\2\233"+
    "\3\254\2\233\1\254\1\0\2\254\1\233\1\257\1\0"+
    "\1\165\2\257\1\260\1\261\1\235\1\262\1\257\1\260"+
    "\1\262\2\257\1\263\16\257\1\234\1\0\1\165\2\234"+
    "\1\260\1\234\1\260\1\165\1\234\1\260\1\165\2\234"+
    "\1\264\16\234\1\50\4\0\1\157\1\0\1\157\2\0"+
    "\1\157\5\0\1\50\2\0\3\50\2\0\1\50\1\0"+
    "\2\50\24\0\1\204\15\0\4\240\1\0\2\240\1\0"+
    "\1\217\2\0\1\241\2\0\6\240\1\0\3\240\24\0"+
    "\1\265\12\0\1\130\6\0\1\132\2\0\1\132\44\0"+
    "\1\224\11\0\1\266\1\0\1\227\1\266\1\267\1\270"+
    "\1\201\1\202\1\271\1\201\1\270\1\271\1\200\1\201"+
    "\1\272\12\266\1\201\3\266\1\244\1\0\1\227\1\244"+
    "\1\227\1\270\1\72\1\273\1\227\1\0\1\270\1\227"+
    "\1\72\1\0\1\246\12\244\1\0\3\244\1\72\4\0"+
    "\1\202\1\0\1\202\2\0\1\202\3\0\1\232\1\0"+
    "\1\72\2\0\3\72\2\0\1\72\1\0\2\72\1\0"+
    "\1\247\1\0\1\145\1\247\1\250\1\251\1\247\1\231"+
    "\1\252\1\250\1\251\1\252\1\247\1\250\1\253\12\247"+
    "\1\250\3\247\1\230\1\0\3\145\1\231\1\230\1\231"+
    "\2\145\1\231\3\145\1\232\1\145\1\230\2\145\3\230"+
    "\2\145\1\230\1\145\2\230\1\145\1\247\1\0\1\145"+
    "\1\247\1\250\1\251\1\247\1\251\1\252\1\250\1\251"+
    "\1\252\1\247\1\250\1\253\12\247\1\250\3\247\1\72"+
    "\4\0\1\202\1\72\1\202\2\0\1\202\5\0\1\72"+
    "\2\0\3\72\2\0\1\72\1\0\2\72\1\0\1\274"+
    "\1\0\1\233\2\274\1\275\1\156\1\157\1\276\1\155"+
    "\1\275\1\276\2\155\1\277\12\274\1\155\3\274\1\254"+
    "\1\0\1\233\2\254\1\275\1\50\1\300\1\233\1\50"+
    "\1\275\1\233\2\50\1\301\12\254\1\50\3\254\1\50"+
    "\4\0\1\157\1\0\1\157\2\0\1\157\3\0\1\236"+
    "\1\0\1\50\2\0\3\50\2\0\1\50\1\0\2\50"+
    "\1\0\1\257\1\0\1\165\2\257\1\260\1\257\1\235"+
    "\1\262\1\257\1\260\1\262\2\257\1\263\17\257\1\0"+
    "\1\165\2\257\1\260\1\257\1\260\1\262\1\257\1\260"+
    "\1\262\2\257\1\263\16\257\1\234\1\0\3\165\1\235"+
    "\1\234\1\235\2\165\1\235\3\165\1\236\1\165\1\234"+
    "\2\165\3\234\2\165\1\234\1\165\2\234\1\165\1\155"+
    "\2\0\2\155\1\300\1\155\1\157\1\160\1\155\1\300"+
    "\1\160\22\155\2\0\2\155\1\300\1\156\1\157\1\160"+
    "\1\155\1\300\1\160\21\155\23\0\1\240\11\0\1\266"+
    "\1\0\1\227\1\266\1\267\1\270\1\200\1\202\1\271"+
    "\1\201\1\270\1\271\1\200\1\201\1\272\12\266\1\201"+
    "\3\266\1\244\1\0\3\227\1\245\1\72\1\202\1\227"+
    "\1\0\1\245\1\227\2\0\1\246\1\227\1\244\2\227"+
    "\3\244\2\227\1\244\1\0\2\244\1\227\1\266\1\0"+
    "\1\227\1\266\1\267\1\270\1\200\1\273\1\271\1\201"+
    "\1\270\1\271\1\200\1\201\1\272\12\266\1\201\3\266"+
    "\1\72\4\0\1\202\1\72\1\202\2\0\1\202\3\0"+
    "\1\232\1\0\1\72\2\0\3\72\2\0\1\72\1\0"+
    "\2\72\1\0\1\200\2\0\1\200\1\201\2\200\1\273"+
    "\1\203\1\201\1\200\1\203\1\200\2\201\12\200\1\201"+
    "\3\200\1\274\1\0\1\233\2\274\1\275\1\155\1\157"+
    "\1\276\1\155\1\275\1\276\2\155\1\277\12\274\1\155"+
    "\4\274\1\0\1\233\2\274\1\275\1\155\1\300\1\276"+
    "\1\155\1\275\1\276\2\155\1\277\12\274\1\155\3\274"+
    "\1\155\2\0\2\155\1\300\1\155\1\157\1\160\1\155"+
    "\1\300\1\160\2\155\1\263\17\155\2\0\4\155\1\300"+
    "\1\160\2\155\1\160\22\155\2\0\2\155\1\300\1\156"+
    "\1\157\1\160\1\155\1\300\1\160\2\155\1\263\16\155";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4205];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\1\3\11\4\1\1\11\1\1\2\11\3\1"+
    "\1\11\12\1\1\11\26\1\1\11\2\1\1\11\1\1"+
    "\4\0\1\1\2\0\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\6\0\1\11\1\0\1\1\5\0\1\1\1\0"+
    "\1\1\6\0\1\1\2\0\2\1\3\0\1\11\1\1"+
    "\4\0\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\3\0\2\1\5\0\1\1\2\0"+
    "\1\1\2\11\1\1\1\11\3\0\1\11\1\0\1\1"+
    "\3\0\1\1\7\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\2\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\2\0\3\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int currentLineIndent = 0;
  private int valueIndent = -1;
  private int braceCount = 0;
  private IElementType valueTokenType = null;
  private int previousState = YYINITIAL;

  public boolean isCleanState() {
    return yystate() == YYINITIAL
      && currentLineIndent == 0
      && braceCount == 0;
  }

  public void cleanMyState() {
    currentLineIndent = 0;
    braceCount = 0;
  }

  private char previousChar() {
    return getChar(-1);
  }

  private char getChar(final int offset) {
    final int loc = getTokenStart()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private char getCharAfter(final int offset) {
    final int loc = getTokenEnd()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private IElementType getWhitespaceTypeAndUpdateIndent() {
    if (isAfterEol()) {
      currentLineIndent = yylength();
      return INDENT;
    }
    else {
      return WHITESPACE;
    }
  }

  private boolean isAfterEol() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\n';
  }

  private boolean isAfterSpace() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\t' || prev == ' ';
  }

  private void yyBegin(int newState) {
    //System.out.println("yybegin(): " + newState);
    yybegin(newState);
  }

  private boolean startsWith(CharSequence haystack, CharSequence needle) {
    for (int i = Math.min(haystack.length(), needle.length()) - 1; i >= 0; i--) {
      if (haystack.charAt(i) != needle.charAt(i)) {
        return false;
      }
    }
    return true;
  }

  private IElementType tokenOrForbidden(IElementType tokenType) {
    if (!isAfterEol() || yylength() < 3) {
      return tokenType;
    }

    if (startsWith(yytext(), "---")) {
      braceCount = 0;
      yyBegin(YYINITIAL);
      yypushback(yylength() - 3);
      return DOCUMENT_MARKER;
    }
    if (startsWith(yytext(), "...")) {
      braceCount = 0;
      yyBegin(YYINITIAL);
      yypushback(yylength() - 3);
      return DOCUMENT_END;
    }
    return tokenType;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YAMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return getWhitespaceTypeAndUpdateIndent();
          }
        case 27: break;
        case 11: 
          { return tokenOrForbidden(TEXT);
          }
        case 28: break;
        case 26: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(VALUE_BRACE);
  return SCALAR_KEY;
          }
        case 29: break;
        case 19: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return TAG;
          }
        case 30: break;
        case 14: 
          { currentLineIndent = 0;
                                            return EOL;
          }
        case 31: break;
        case 25: 
          { return SCALAR_KEY;
          }
        case 32: break;
        case 13: 
          { if (isAfterEol()){
                                                yypushback(yylength());
                                                yyBegin(YYINITIAL);
                                                break;
                                            } else {
                                                return valueTokenType;
                                            }
          }
        case 33: break;
        case 4: 
          { return QUESTION;
          }
        case 34: break;
        case 1: 
          { yyBegin(VALUE);
  return TEXT;
          }
        case 35: break;
        case 16: 
          { if (zzMarkedPos == zzEndRead){
    return SCALAR_KEY;
  }
  yyBegin(VALUE);
  return tokenOrForbidden(TEXT);
          }
        case 36: break;
        case 8: 
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACE;
          }
        case 37: break;
        case 17: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return COLON;
          }
        case 38: break;
        case 20: 
          { return SCALAR_DSTRING;
          }
        case 39: break;
        case 15: 
          { IElementType type = getWhitespaceTypeAndUpdateIndent();
                                            if (currentLineIndent <= valueIndent) {
                                              yyBegin(YYINITIAL);
                                            }
                                            return type;
          }
        case 40: break;
        case 23: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 13;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(INDENT_VALUE);
                                    valueIndent = currentLineIndent;
                                    valueTokenType = SCALAR_LIST;
                                    yypushback(yylength());
                                    break;
          }
        case 41: break;
        case 10: 
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACKET;
          }
        case 42: break;
        case 5: 
          { // YAML spec: when a comment follows another syntax element,
                                  //  it must be separated from it by space characters.
                                  return (isAfterEol() || isAfterSpace()) ? COMMENT : TEXT;
          }
        case 43: break;
        case 7: 
          { if (braceCount == 0) {
                                      yyBegin(VALUE);
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACKET;
          }
        case 44: break;
        case 22: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 12;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(INDENT_VALUE);
                                    valueIndent = currentLineIndent;
                                    valueTokenType = SCALAR_TEXT;
                                    yypushback(yylength());
                                    break;
          }
        case 45: break;
        case 18: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yyBegin(VALUE_OR_KEY);
                                    return SEQUENCE_MARKER;
          }
        case 46: break;
        case 21: 
          { return SCALAR_STRING;
          }
        case 47: break;
        case 12: 
          { return TEXT;
          }
        case 48: break;
        case 24: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(VALUE);
  return SCALAR_KEY;
          }
        case 49: break;
        case 2: 
          { if (braceCount == 0) {
                                      yyBegin(YYINITIAL);
                                    }
                                    currentLineIndent = 0;
                                    return EOL;
          }
        case 50: break;
        case 3: 
          { if (braceCount > 0) {
                                      yyBegin(BRACES);
                                      return COMMA;
                                    }
                                    yyBegin(VALUE);
                                    return TEXT;
          }
        case 51: break;
        case 9: 
          { if (braceCount == 0) {
                                      yyBegin(VALUE);
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACE;
          }
        case 52: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
