/* The following code was generated by JFlex 1.4.3 on 2/3/15 11:20 AM */

package org.jetbrains.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.yaml.YAMLTokenTypes;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/3/15 11:20 AM from the specification file
 * <tt>/Users/user/work/idea/tools/lexer/../../plugins/yaml/src/org/jetbrains/yaml/lexer/yaml.flex</tt>
 */
public class _YAMLLexer implements FlexLexer, YAMLTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VALUE_OR_KEY = 6;
  public static final int YYINITIAL = 0;
  public static final int BRACES = 2;
  public static final int VALUE = 4;
  public static final int INDENT_VALUE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\25\0\1\5\1\0\1\16\1\3\1\0\1\14"+
    "\1\0\1\17\3\0\1\23\1\10\1\4\14\0\1\12\3\0\1\6"+
    "\1\21\33\0\1\20\1\15\1\7\35\0\1\13\1\22\1\11\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\1\1\3\1\5"+
    "\1\6\1\7\1\1\1\10\2\1\1\11\1\12\4\1"+
    "\1\5\1\7\1\1\1\10\1\1\1\13\1\14\1\12"+
    "\4\1\1\13\1\14\1\12\1\1\1\15\1\16\1\17"+
    "\6\0\1\20\1\3\2\21\1\0\2\22\3\0\1\23"+
    "\5\0\1\23\1\0\3\13\1\23\1\0\1\13\3\14"+
    "\1\23\1\14\1\24\1\0\2\24\2\25\1\22\1\0"+
    "\1\24\3\13\1\24\1\13\4\14\2\26\1\0\1\24"+
    "\1\0\1\24\1\25\4\13\1\24\1\13\5\14\1\26"+
    "\3\0\2\27\1\30\1\23\2\0\2\27\1\20\2\23"+
    "\1\0\2\27\1\23\1\0\1\13\2\27\1\20\1\23"+
    "\1\14\2\27\2\24\1\0\1\24\1\0\2\24\1\0"+
    "\3\13\3\14\1\13\1\24\3\13\4\14\1\23\5\24"+
    "\1\0\3\24\2\13\1\24\3\13\1\24\1\13\6\14"+
    "\1\13\1\23\1\13\1\24\2\13\1\23\1\13\1\24"+
    "\1\13\1\14\1\23\3\14\1\23\2\14\2\24\2\13"+
    "\1\24\1\13\3\14\2\13\1\23\1\24\1\13\1\23"+
    "\2\14\1\23\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\24\0\50\0\74\0\120\0\144\0\170\0\214"+
    "\0\240\0\264\0\310\0\334\0\360\0\u0104\0\264\0\264"+
    "\0\264\0\u0118\0\264\0\u012c\0\u0140\0\264\0\240\0\u0154"+
    "\0\u0168\0\u017c\0\u0190\0\u017c\0\u017c\0\u01a4\0\u01b8\0\u01cc"+
    "\0\u01e0\0\u01f4\0\u017c\0\u0208\0\u021c\0\u0230\0\u0244\0\u0258"+
    "\0\u026c\0\u021c\0\u0280\0\u0294\0\264\0\u02a8\0\u02bc\0\264"+
    "\0\u02d0\0\u02e4\0\240\0\u02f8\0\u030c\0\u0320\0\264\0\u0334"+
    "\0\u0348\0\264\0\u035c\0\u012c\0\u0370\0\u0384\0\u0398\0\u03ac"+
    "\0\u03c0\0\u0140\0\u03d4\0\u03e8\0\u03fc\0\u0410\0\u0154\0\u0424"+
    "\0\u0438\0\u044c\0\u0460\0\u03c0\0\u0168\0\u0474\0\u0488\0\u049c"+
    "\0\u04b0\0\u017c\0\u017c\0\u04c4\0\u04d8\0\264\0\u04ec\0\u0500"+
    "\0\u0514\0\u0528\0\u053c\0\u0550\0\u0564\0\u0578\0\u017c\0\u058c"+
    "\0\u05a0\0\u05b4\0\u05c8\0\264\0\u05dc\0\u05f0\0\u021c\0\u0604"+
    "\0\u0618\0\u062c\0\u0640\0\u0654\0\u0668\0\u067c\0\u0690\0\u06a4"+
    "\0\u06b8\0\u06cc\0\u06e0\0\u06f4\0\u0708\0\u071c\0\u0730\0\u0744"+
    "\0\264\0\264\0\u0758\0\264\0\u0370\0\u076c\0\u0780\0\u0370"+
    "\0\u0794\0\u0398\0\u030c\0\u03d4\0\u07a8\0\u03d4\0\u07bc\0\u0424"+
    "\0\u07d0\0\u0780\0\u0424\0\u07e4\0\u044c\0\u0474\0\u07f8\0\u0474"+
    "\0\u080c\0\u0820\0\u0834\0\u0848\0\u085c\0\u085c\0\u0870\0\u0884"+
    "\0\u0898\0\264\0\u08ac\0\u08c0\0\u08d4\0\u08e8\0\u08fc\0\u0910"+
    "\0\u0924\0\u0938\0\u094c\0\u0960\0\u0974\0\u0988\0\u099c\0\u09b0"+
    "\0\264\0\u09c4\0\u09d8\0\u09ec\0\u0a00\0\u0848\0\u0a14\0\u0a28"+
    "\0\u0a3c\0\u0a50\0\u0a64\0\u0a78\0\u0a8c\0\u09c4\0\u0aa0\0\u0ab4"+
    "\0\u0ac8\0\u09ec\0\u0adc\0\u0af0\0\u0b04\0\u0b18\0\u0b2c\0\u0b40"+
    "\0\u0b54\0\u0b54\0\u0b68\0\u0b7c\0\u0b90\0\u0ba4\0\u0ba4\0\u0bb8"+
    "\0\u0bcc\0\u0be0\0\u0bf4\0\u0bf4\0\u0c08\0\u0c1c\0\u0c30\0\u0c30"+
    "\0\u0c44\0\u0c58\0\u0c6c\0\u0c80\0\u0c94\0\u0ca8\0\u0cbc\0\u0c80"+
    "\0\u0cd0\0\u0ce4\0\u0cf8\0\u0d0c\0\u0d20\0\u0d20\0\u0d34\0\u0d48"+
    "\0\u09ec\0\u0d5c\0\u0d70\0\u0d70\0\u0d84";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\20\1\21\1\22\1\23\2\11\1\24\1\25\1\26"+
    "\1\27\3\11\1\12\1\13\1\14\1\15\1\16\1\11"+
    "\1\17\1\20\1\21\1\22\1\23\2\11\1\30\1\31"+
    "\1\26\1\27\2\11\1\32\1\12\1\16\1\14\1\32"+
    "\1\16\1\33\1\34\1\20\1\35\1\36\1\37\1\40"+
    "\1\32\1\41\1\42\1\26\1\43\1\44\1\32\1\45"+
    "\1\12\1\13\1\14\1\32\1\16\1\46\1\34\1\20"+
    "\1\35\1\22\1\37\1\47\1\45\1\50\1\51\1\26"+
    "\1\52\1\53\1\45\1\54\1\55\1\56\2\54\1\56"+
    "\16\54\1\57\1\0\1\57\3\0\1\57\3\0\1\57"+
    "\1\0\4\57\1\0\3\57\1\0\1\60\1\61\2\0"+
    "\1\61\40\0\1\62\1\0\1\63\1\0\1\64\2\63"+
    "\1\64\1\0\1\63\2\0\1\65\1\0\10\63\24\0"+
    "\1\63\1\0\1\66\2\63\1\66\1\0\1\63\2\0"+
    "\1\65\1\0\10\63\1\14\1\0\22\14\1\0\1\67"+
    "\1\70\1\0\1\71\1\70\20\0\1\16\2\0\1\16"+
    "\16\0\1\63\1\72\1\73\2\63\1\73\1\0\1\63"+
    "\2\0\1\65\1\0\10\63\1\74\1\75\1\76\2\74"+
    "\1\76\1\75\1\74\2\75\1\77\1\75\1\74\1\100"+
    "\1\101\5\74\1\102\1\103\1\104\2\102\1\104\1\103"+
    "\1\102\2\103\1\105\1\103\3\102\1\106\4\102\1\107"+
    "\1\110\1\111\2\107\1\111\1\110\1\107\2\110\1\112"+
    "\1\110\1\107\1\113\1\114\5\107\1\115\1\116\1\117"+
    "\2\115\1\117\1\116\1\115\2\116\1\120\1\116\3\115"+
    "\1\121\4\115\1\122\1\0\1\123\1\0\1\122\1\123"+
    "\1\122\4\0\1\124\1\125\7\122\1\0\1\126\1\127"+
    "\2\0\1\127\17\0\1\72\1\130\2\0\1\130\31\0"+
    "\1\131\10\0\1\122\1\0\1\123\1\0\1\122\1\123"+
    "\1\122\4\0\1\132\1\125\7\122\1\41\1\133\1\41"+
    "\1\133\3\41\4\133\1\134\1\135\1\136\1\137\5\41"+
    "\1\42\1\140\1\42\1\140\3\42\4\140\1\141\1\142"+
    "\2\42\1\143\4\42\1\0\1\144\1\145\1\0\1\146"+
    "\1\145\15\0\1\146\1\147\1\0\1\150\1\63\1\147"+
    "\1\150\1\122\1\63\2\0\1\65\1\124\1\151\7\147"+
    "\1\63\1\126\1\152\2\63\1\152\1\0\1\63\2\0"+
    "\1\65\1\0\10\63\1\147\1\0\1\150\1\63\1\147"+
    "\1\150\1\122\1\63\2\0\1\65\1\132\1\151\7\147"+
    "\1\50\1\110\1\153\1\107\1\50\1\153\1\154\1\107"+
    "\2\110\1\112\1\155\1\156\1\157\1\160\5\50\1\51"+
    "\1\116\1\161\1\115\1\51\1\161\1\162\1\115\2\116"+
    "\1\120\1\163\1\164\2\51\1\165\4\51\1\63\1\144"+
    "\1\166\1\63\1\167\1\166\1\0\1\63\2\0\1\65"+
    "\1\0\7\63\1\167\1\54\1\0\22\54\2\0\1\56"+
    "\2\0\1\56\16\0\1\57\1\0\1\170\2\57\1\170"+
    "\1\0\1\57\2\0\1\171\1\0\10\57\2\0\1\61"+
    "\2\0\1\61\22\0\1\171\16\0\1\171\1\63\1\0"+
    "\1\64\1\0\1\63\1\64\1\0\1\63\2\0\1\65"+
    "\1\0\10\63\1\0\1\172\1\173\2\0\1\173\16\0"+
    "\1\63\1\0\1\66\1\0\1\63\1\66\1\0\1\63"+
    "\2\0\1\65\1\0\10\63\2\0\1\70\2\0\1\70"+
    "\22\0\1\174\17\0\1\63\1\0\1\73\1\0\1\63"+
    "\1\73\1\0\1\63\2\0\1\65\1\0\10\63\12\75"+
    "\1\175\2\75\1\176\1\177\5\75\1\74\1\75\1\76"+
    "\1\75\1\74\1\76\1\75\1\74\2\75\1\77\1\75"+
    "\1\74\1\100\1\101\5\74\1\75\1\200\1\201\2\75"+
    "\1\201\4\75\1\175\2\75\1\176\1\177\5\75\1\74"+
    "\1\0\1\76\2\74\1\76\1\75\1\74\2\75\1\202"+
    "\1\75\10\74\1\63\1\0\1\64\2\63\1\64\1\0"+
    "\1\63\2\0\1\203\1\0\10\63\12\103\1\204\4\103"+
    "\1\205\4\103\1\102\1\103\1\104\1\103\1\102\1\104"+
    "\1\103\1\102\2\103\1\105\1\103\3\102\1\106\4\102"+
    "\1\103\1\206\1\207\2\103\1\207\4\103\1\204\4\103"+
    "\1\205\4\103\1\63\1\0\1\64\2\63\1\64\1\0"+
    "\1\63\2\0\1\203\1\0\3\63\1\102\4\63\12\110"+
    "\1\210\2\110\1\211\1\212\5\110\1\107\1\110\1\111"+
    "\1\110\1\107\1\111\1\110\1\107\2\110\1\112\1\110"+
    "\1\107\1\113\1\114\5\107\1\110\1\213\1\214\2\110"+
    "\1\214\4\110\1\210\2\110\1\211\1\212\5\110\1\107"+
    "\1\0\1\111\2\107\1\111\1\110\1\107\2\110\1\215"+
    "\1\110\10\107\12\116\1\216\4\116\1\217\4\116\1\115"+
    "\1\116\1\117\1\116\1\115\1\117\1\116\1\115\2\116"+
    "\1\120\1\116\3\115\1\121\4\115\1\116\1\220\1\221"+
    "\2\116\1\221\4\116\1\216\4\116\1\217\4\116\1\63"+
    "\1\0\1\64\2\63\1\64\1\0\1\63\2\0\1\203"+
    "\1\0\3\63\1\115\4\63\1\122\1\0\1\123\1\0"+
    "\1\122\1\123\1\122\4\0\1\222\1\125\10\122\1\0"+
    "\1\123\1\0\1\122\1\123\1\122\4\0\1\223\1\125"+
    "\7\122\2\0\1\127\2\0\1\127\20\0\1\130\2\0"+
    "\1\130\16\0\1\224\1\0\1\224\3\0\1\224\1\0"+
    "\1\224\1\0\1\224\1\0\4\224\1\0\3\224\1\225"+
    "\1\0\2\226\1\225\1\226\1\225\2\226\1\123\1\226"+
    "\1\227\1\230\7\225\15\133\1\231\1\232\5\133\1\41"+
    "\1\133\1\41\1\133\3\41\4\133\1\233\1\135\1\136"+
    "\1\137\6\41\1\133\1\41\1\133\3\41\4\133\1\234"+
    "\1\135\1\136\1\137\6\41\1\0\1\41\1\133\3\41"+
    "\4\133\1\134\1\135\7\41\17\140\1\235\4\140\1\42"+
    "\1\140\1\42\1\140\3\42\4\140\1\236\1\142\2\42"+
    "\1\143\5\42\1\140\1\42\1\140\3\42\4\140\1\237"+
    "\1\142\2\42\1\143\4\42\1\122\1\0\1\123\1\0"+
    "\1\122\1\123\1\122\4\0\1\124\1\125\2\122\1\42"+
    "\4\122\2\0\1\145\2\0\1\145\17\0\1\144\1\145"+
    "\2\0\1\145\16\0\1\147\1\0\1\150\1\0\1\147"+
    "\1\150\1\122\1\63\2\0\1\65\1\124\1\151\10\147"+
    "\1\0\1\150\1\63\1\147\1\150\1\122\1\63\2\0"+
    "\1\65\1\223\1\151\7\147\1\63\1\0\1\152\1\0"+
    "\1\63\1\152\1\0\1\63\2\0\1\65\1\0\10\63"+
    "\1\50\1\110\1\153\1\110\1\50\1\153\1\154\1\107"+
    "\2\110\1\112\1\155\1\156\1\157\1\160\5\50\1\154"+
    "\1\110\1\154\1\110\3\154\3\110\1\210\1\155\1\240"+
    "\1\241\1\242\6\154\1\110\1\154\1\110\3\154\3\110"+
    "\1\210\1\243\1\240\1\241\1\242\5\154\1\50\1\110"+
    "\1\153\1\107\1\50\1\153\1\154\1\107\2\110\1\112"+
    "\1\244\1\156\1\157\1\160\6\50\1\0\1\153\1\107"+
    "\1\50\1\153\1\154\1\107\2\110\1\215\1\155\1\156"+
    "\7\50\1\147\1\0\1\150\1\63\1\147\1\150\1\122"+
    "\1\63\2\0\1\203\1\124\1\151\7\147\1\51\1\116"+
    "\1\161\1\116\1\51\1\161\1\162\1\115\2\116\1\120"+
    "\1\163\1\164\2\51\1\165\4\51\1\162\1\116\1\162"+
    "\1\116\3\162\3\116\1\216\1\163\1\245\2\162\1\246"+
    "\5\162\1\116\1\162\1\116\3\162\3\116\1\216\1\247"+
    "\1\245\2\162\1\246\4\162\1\51\1\116\1\161\1\115"+
    "\1\51\1\161\1\162\1\115\2\116\1\120\1\250\1\164"+
    "\2\51\1\165\4\51\1\147\1\0\1\150\1\63\1\147"+
    "\1\150\1\122\1\63\2\0\1\203\1\124\1\151\2\147"+
    "\1\51\4\147\1\63\1\0\1\166\1\0\1\63\1\166"+
    "\1\0\1\63\2\0\1\65\1\0\11\63\1\144\1\166"+
    "\2\63\1\166\1\0\1\63\2\0\1\65\1\0\10\63"+
    "\1\57\1\0\1\170\1\0\1\57\1\170\1\0\1\57"+
    "\2\0\1\171\1\0\10\57\2\0\1\173\2\0\1\173"+
    "\16\0\1\75\1\0\22\75\12\0\1\251\11\0\2\75"+
    "\1\201\2\75\1\201\4\75\1\175\2\75\1\176\1\177"+
    "\5\75\12\0\1\251\4\0\1\103\4\0\2\103\1\207"+
    "\2\103\1\207\4\103\1\204\4\103\1\205\4\103\1\110"+
    "\1\0\24\110\1\214\2\110\1\214\4\110\1\210\2\110"+
    "\1\211\1\212\5\110\12\0\1\251\4\0\1\116\4\0"+
    "\2\116\1\221\2\116\1\221\4\116\1\216\4\116\1\217"+
    "\4\116\1\252\1\0\1\252\1\0\1\122\1\123\1\252"+
    "\1\0\1\252\1\0\1\252\1\222\1\253\3\252\1\122"+
    "\3\252\1\254\1\0\7\254\1\122\1\254\1\255\10\254"+
    "\1\256\1\0\1\224\1\0\1\256\1\224\1\122\1\0"+
    "\1\224\1\257\1\0\1\124\1\260\3\256\1\122\3\256"+
    "\1\225\1\0\2\226\1\225\1\226\1\225\2\226\1\123"+
    "\1\226\1\132\1\230\7\225\1\261\1\0\1\261\1\226"+
    "\1\225\1\226\1\261\1\226\1\261\1\123\1\261\1\227"+
    "\1\262\3\261\1\225\3\261\1\225\1\0\2\226\1\225"+
    "\1\226\1\225\2\226\1\123\1\226\1\223\1\230\7\225"+
    "\1\133\1\0\22\133\1\263\1\133\1\263\1\133\2\41"+
    "\1\263\1\133\1\263\1\133\1\263\1\233\1\264\1\265"+
    "\1\266\1\263\1\41\3\263\1\267\1\133\7\267\1\41"+
    "\1\267\1\270\1\267\1\271\1\272\5\267\17\0\1\140"+
    "\4\0\1\273\1\140\1\273\1\140\2\42\1\273\1\140"+
    "\1\273\1\140\1\273\1\236\1\274\2\273\1\275\1\42"+
    "\3\273\1\276\1\140\7\276\1\42\1\276\1\277\3\276"+
    "\1\300\4\276\1\154\1\110\1\154\1\110\3\154\3\110"+
    "\1\210\1\244\1\240\1\241\1\242\6\154\1\0\1\154"+
    "\1\110\3\154\4\110\1\155\1\240\7\154\1\122\1\0"+
    "\1\123\1\0\1\122\1\123\1\122\3\0\1\251\1\124"+
    "\1\125\7\122\1\301\1\110\1\301\1\110\2\154\1\301"+
    "\1\110\1\301\1\110\1\302\1\243\1\303\1\304\1\305"+
    "\1\301\1\154\3\301\1\306\1\110\7\306\1\154\1\307"+
    "\1\310\1\306\1\311\1\312\5\306\1\162\1\116\1\162"+
    "\1\116\3\162\3\116\1\216\1\250\1\245\2\162\1\246"+
    "\4\162\1\122\1\0\1\123\1\0\1\122\1\123\1\122"+
    "\3\0\1\251\1\124\1\125\2\122\1\162\4\122\1\313"+
    "\1\116\1\313\1\116\2\162\1\313\1\116\1\313\1\116"+
    "\1\314\1\247\1\315\2\313\1\316\1\162\3\313\1\317"+
    "\1\116\7\317\1\162\1\320\1\321\3\317\1\322\4\317"+
    "\1\252\1\0\1\252\1\0\2\252\1\122\1\0\1\252"+
    "\1\323\1\0\1\124\1\253\3\252\1\122\4\252\1\0"+
    "\1\252\1\0\2\252\1\122\1\0\1\252\1\323\1\0"+
    "\1\223\1\253\3\252\1\122\3\252\1\254\1\0\7\254"+
    "\1\122\1\254\1\223\10\254\1\324\1\0\1\324\3\254"+
    "\1\324\1\254\1\324\1\122\1\324\1\255\4\324\1\254"+
    "\3\324\1\122\1\0\1\123\1\0\1\122\1\123\1\122"+
    "\2\0\1\123\1\0\1\124\1\125\7\122\1\256\1\0"+
    "\1\224\1\0\1\256\1\224\1\122\1\0\1\224\1\257"+
    "\1\0\1\223\1\260\3\256\1\122\3\256\1\261\1\0"+
    "\1\261\1\226\2\261\1\225\1\226\1\261\1\323\1\226"+
    "\1\132\1\262\3\261\1\225\4\261\1\0\1\261\1\226"+
    "\2\261\1\225\1\226\1\261\1\323\1\226\1\223\1\262"+
    "\3\261\1\225\3\261\1\263\1\133\1\263\1\133\2\263"+
    "\1\41\1\133\1\263\1\325\1\133\1\134\1\264\1\265"+
    "\1\266\1\263\1\41\4\263\1\133\1\263\1\133\2\263"+
    "\1\41\1\133\1\263\1\325\1\133\1\234\1\264\1\265"+
    "\1\266\1\263\1\41\4\263\1\0\1\263\1\133\2\263"+
    "\1\41\1\133\1\263\1\325\1\133\1\134\1\264\3\263"+
    "\1\41\3\263\1\267\1\133\7\267\1\41\1\267\1\234"+
    "\1\267\1\271\1\272\5\267\1\326\1\133\1\326\3\267"+
    "\1\326\1\267\1\326\1\41\1\326\1\270\1\326\1\327"+
    "\1\330\1\326\1\267\3\326\1\267\1\0\7\267\1\41"+
    "\1\267\1\234\10\267\1\273\1\140\1\273\1\140\2\273"+
    "\1\42\1\140\1\273\1\331\1\140\1\141\1\274\2\273"+
    "\1\275\1\42\4\273\1\140\1\273\1\140\2\273\1\42"+
    "\1\140\1\273\1\331\1\140\1\237\1\274\2\273\1\275"+
    "\1\42\3\273\1\252\1\0\1\252\1\0\2\252\1\122"+
    "\1\0\1\252\1\323\1\0\1\124\1\253\2\252\1\273"+
    "\1\122\3\252\1\276\1\140\7\276\1\42\1\276\1\237"+
    "\3\276\1\300\4\276\1\332\1\140\1\332\3\276\1\332"+
    "\1\276\1\332\1\42\1\332\1\277\3\332\1\333\1\276"+
    "\3\332\1\254\1\0\7\254\1\122\1\254\1\223\3\254"+
    "\1\276\4\254\1\301\1\110\1\301\1\110\2\301\1\154"+
    "\1\110\1\301\1\334\1\210\1\155\1\303\1\304\1\305"+
    "\1\301\1\154\4\301\1\110\1\301\1\110\2\301\1\154"+
    "\1\110\1\301\1\334\1\210\1\244\1\303\1\304\1\305"+
    "\1\301\1\154\4\301\1\0\1\301\1\110\2\301\1\154"+
    "\1\110\1\301\1\334\1\110\1\155\1\303\3\301\1\154"+
    "\3\301\1\252\1\0\1\252\1\0\2\252\1\122\1\0"+
    "\1\252\1\323\1\251\1\124\1\253\3\252\1\122\3\252"+
    "\1\306\1\110\7\306\1\154\1\307\1\244\1\306\1\311"+
    "\1\312\5\306\1\335\1\110\1\335\3\306\1\335\1\306"+
    "\1\335\1\154\1\336\1\310\1\335\1\337\1\340\1\335"+
    "\1\306\3\335\1\306\1\0\7\306\1\154\1\306\1\244"+
    "\10\306\1\254\1\0\7\254\1\122\1\341\1\223\10\254"+
    "\1\313\1\116\1\313\1\116\2\313\1\162\1\116\1\313"+
    "\1\342\1\216\1\163\1\315\2\313\1\316\1\162\4\313"+
    "\1\116\1\313\1\116\2\313\1\162\1\116\1\313\1\342"+
    "\1\216\1\250\1\315\2\313\1\316\1\162\3\313\1\252"+
    "\1\0\1\252\1\0\2\252\1\122\1\0\1\252\1\323"+
    "\1\251\1\124\1\253\2\252\1\313\1\122\3\252\1\317"+
    "\1\116\7\317\1\162\1\320\1\250\3\317\1\322\4\317"+
    "\1\343\1\116\1\343\3\317\1\343\1\317\1\343\1\162"+
    "\1\344\1\321\3\343\1\345\1\317\3\343\1\254\1\0"+
    "\7\254\1\122\1\341\1\223\3\254\1\317\4\254\1\122"+
    "\1\0\1\123\1\0\1\122\1\123\1\122\2\0\1\122"+
    "\1\0\1\124\1\125\7\122\1\324\1\0\1\324\1\254"+
    "\2\324\2\254\1\324\1\323\1\254\1\223\4\324\1\254"+
    "\3\324\1\41\1\133\1\41\1\133\3\41\2\133\1\41"+
    "\1\133\1\134\1\135\1\136\1\137\5\41\1\326\1\133"+
    "\1\326\1\267\2\326\2\267\1\326\1\325\1\267\1\234"+
    "\1\326\1\327\1\330\1\326\1\267\4\326\1\0\1\326"+
    "\1\267\2\326\2\267\1\326\1\325\1\267\1\234\4\326"+
    "\1\267\3\326\1\42\1\140\1\42\1\140\3\42\2\140"+
    "\1\42\1\140\1\141\1\142\2\42\1\143\4\42\1\332"+
    "\1\140\1\332\1\276\2\332\2\276\1\332\1\331\1\276"+
    "\1\237\3\332\1\333\1\276\3\332\1\324\1\0\1\324"+
    "\1\254\2\324\2\254\1\324\1\323\1\254\1\223\3\324"+
    "\1\332\1\254\3\324\1\154\1\110\1\154\1\110\3\154"+
    "\2\110\1\154\1\210\1\155\1\240\1\241\1\242\5\154"+
    "\1\335\1\110\1\335\1\306\2\335\2\306\1\335\1\334"+
    "\1\307\1\244\1\335\1\337\1\340\1\335\1\306\4\335"+
    "\1\0\1\335\1\306\2\335\2\306\1\335\1\334\1\306"+
    "\1\244\4\335\1\306\3\335\1\324\1\0\1\324\1\254"+
    "\2\324\2\254\1\324\1\323\1\341\1\223\4\324\1\254"+
    "\3\324\1\162\1\116\1\162\1\116\3\162\2\116\1\162"+
    "\1\216\1\163\1\245\2\162\1\246\4\162\1\343\1\116"+
    "\1\343\1\317\2\343\2\317\1\343\1\342\1\320\1\250"+
    "\3\343\1\345\1\317\3\343\1\324\1\0\1\324\1\254"+
    "\2\324\2\254\1\324\1\323\1\341\1\223\3\324\1\343"+
    "\1\254\3\324";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\1\11\4\1\3\11\1\1\1\11\2\1"+
    "\1\11\26\1\1\11\1\1\1\0\1\11\2\1\2\0"+
    "\2\1\1\11\1\1\1\0\1\11\1\1\3\0\1\1"+
    "\5\0\1\1\1\0\4\1\1\0\7\1\1\0\2\1"+
    "\1\11\2\1\1\0\12\1\1\11\1\1\1\0\1\1"+
    "\1\0\16\1\2\0\2\11\1\1\1\11\1\1\2\0"+
    "\5\1\1\0\3\1\1\0\12\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\11\16\1\1\11\5\1\1\0\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int valueIndent = 0;
  private boolean afterEOL = false;
  private int braceCount = 0;
  private IElementType valueTokenType = null;
  private int previousState = YYINITIAL;
    
  private char previousChar() {
    return getChar(-1);
  }

  private char getChar(final int offset) {
    final int loc = getTokenStart()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private char getCharAfter(final int offset) {
    final int loc = getTokenEnd()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private boolean isAfterEol() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\n';
  }

  private boolean isAfterSpace() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\t' || prev == ' ';
  }

  private void yyBegin(int newState) {
    //System.out.println("yybegin(): " + newState);
    yybegin(newState);
  }


  public _YAMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _YAMLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 60) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(VALUE);
                                    return SCALAR_KEY;
          }
        case 25: break;
        case 16: 
          { if (zzMarkedPos == zzEndRead){
                                      return SCALAR_KEY;
                                    }
                                    return TEXT;
          }
        case 26: break;
        case 3: 
          { return isAfterEol() ? INDENT : WHITESPACE;
          }
        case 27: break;
        case 2: 
          { if (braceCount == 0) {
                                      yyBegin(YYINITIAL);
                                    }
                                    return EOL;
          }
        case 28: break;
        case 21: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yyBegin(INDENT_VALUE);
                                    valueIndent = 0; // initialization
                                    afterEOL = false;
                                    valueTokenType = SCALAR_TEXT;
                                    yypushback(1);
          }
        case 29: break;
        case 20: 
          { if (braceCount <= 0) {
                                      char c;
                                      while ((c = getCharAfter(0)) == ' ' || c == ','){
                                        zzMarkedPos++;
                                      }
                                    }
                                    return TEXT;
          }
        case 30: break;
        case 19: 
          { return SCALAR_KEY;
          }
        case 31: break;
        case 10: 
          { return QUESTION;
          }
        case 32: break;
        case 22: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(INDENT_VALUE);
                                    valueIndent = 0; // initialization
                                    afterEOL = false;
                                    valueTokenType = SCALAR_LIST;
                                    yypushback(yylength());
          }
        case 33: break;
        case 8: 
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACE;
          }
        case 34: break;
        case 18: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return COLON;
          }
        case 35: break;
        case 15: 
          { afterEOL = false;
                                            //System.out.println("Matched WHITESPACE:" + yytext());
                                            final int matched = yylength();
                                            if (valueIndent < 0){
                                                valueIndent = matched;
                                                //System.out.println("Indent selected:" + valueIndent);
                                            }
                                            else if (valueIndent > matched) {
                                                yyBegin(YYINITIAL);
                                            }
                                            return isAfterEol() ? INDENT : WHITESPACE;
          }
        case 36: break;
        case 6: 
          { if (braceCount > 0) {
                                      yyBegin(BRACES);
                                      return COMMA;
                                    }
                                    return TEXT;
          }
        case 37: break;
        case 7: 
          { if (braceCount == 0) {
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACE;
          }
        case 38: break;
        case 11: 
          { return SCALAR_DSTRING;
          }
        case 39: break;
        case 13: 
          { if (afterEOL){
                                                yypushback(yylength());
                                                yyBegin(YYINITIAL);

                                            } else {
                                                afterEOL = false;
                                                if (valueIndent < 0) {
                                                    //System.out.println("Matched TEXT:" + yytext());
                                                    return TEXT;
                                                }
                                                //System.out.println("Matched ValueContext:" + yytext());
                                                return valueTokenType;
                                            }
          }
        case 40: break;
        case 9: 
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACKET;
          }
        case 41: break;
        case 14: 
          { afterEOL = true;
                                            //System.out.println("Matched EOL:");
                                            if (valueIndent < 0) {
                                                yyBegin(YYINITIAL);
                                            }
                                            else if (valueIndent == 0) {
                                                valueIndent --;
                                            }
                                            return EOL;
          }
        case 42: break;
        case 4: 
          { // YAML spec: when a comment follows another syntax element,
                                  //  it must be separated from it by space characters.
                                  return (isAfterEol() || isAfterSpace()) ? COMMENT : TEXT;
          }
        case 43: break;
        case 17: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yyBegin(VALUE_OR_KEY);
                                    return SEQUENCE_MARKER;
          }
        case 44: break;
        case 1: 
          { return TEXT;
          }
        case 45: break;
        case 12: 
          { return SCALAR_STRING;
          }
        case 46: break;
        case 5: 
          { if (braceCount == 0) {
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACKET;
          }
        case 47: break;
        case 24: 
          { braceCount = 0;
                                    yyBegin(YYINITIAL);
                                    return DOCUMENT_MARKER;
          }
        case 48: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
