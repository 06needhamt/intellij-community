/* The following code was generated by JFlex 1.4.3 on 11/18/15 1:05 PM */

package org.jetbrains.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.yaml.YAMLTokenTypes;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/18/15 1:05 PM from the specification file
 * <tt>/Users/valich/work/idea/plugins/yaml/src/org/jetbrains/yaml/lexer/yaml.flex</tt>
 */
public class _YAMLLexer implements FlexLexer, YAMLTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VALUE_OR_KEY = 6;
  public static final int VALUE_BRACE = 8;
  public static final int YYINITIAL = 0;
  public static final int BRACES = 2;
  public static final int VALUE = 4;
  public static final int INDENT_VALUE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\1\2\0\1\2\22\0\1\13\1\27\1\21\1\6"+
    "\1\25\1\17\1\26\1\22\2\25\1\26\1\32\1\4\1\12\1\25"+
    "\1\25\12\23\1\7\1\25\1\30\1\25\1\14\1\5\1\26\6\23"+
    "\24\24\1\31\1\20\1\11\1\0\1\25\1\3\6\23\24\24\1\15"+
    "\1\33\1\16\1\25\u05e1\0\12\23\206\0\12\23\306\0\12\23\u019c\0"+
    "\12\23\166\0\12\23\166\0\12\23\166\0\12\23\166\0\12\23\166\0"+
    "\12\23\166\0\12\23\166\0\12\23\166\0\12\23\340\0\12\23\166\0"+
    "\12\23\106\0\12\23\u0116\0\12\23\106\0\12\23\u0746\0\12\23\46\0"+
    "\12\23\u012c\0\12\23\200\0\12\23\246\0\12\23\6\0\12\23\266\0"+
    "\12\23\126\0\12\23\206\0\12\23\6\0\12\23\u89c6\0\12\23\u02a6\0"+
    "\12\23\46\0\12\23\306\0\12\23\166\0\12\23\u0196\0\12\23\u5316\0"+
    "\12\23\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\3\1\11\1\12\4\3\1\13\1\1"+
    "\1\5\2\3\1\11\3\3\1\1\1\14\1\5\14\14"+
    "\1\1\1\5\3\14\1\15\1\16\1\17\10\0\1\1"+
    "\1\0\1\20\1\0\2\21\2\22\7\0\1\23\1\0"+
    "\1\23\4\0\1\1\1\0\1\20\6\0\1\24\2\0"+
    "\1\25\1\1\3\0\2\26\2\0\1\24\1\25\2\27"+
    "\1\0\1\1\17\0\1\30\1\0\1\1\2\0\1\31"+
    "\3\0\1\32\1\0\1\1\5\0\1\1\2\0\2\1"+
    "\2\0\2\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\3\0\2\1\1\0\4\1\1\0\1\1\2\0\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u01a4\0\u0230"+
    "\0\u024c\0\u01a4\0\u0268\0\u0284\0\u02a0\0\u02bc\0\u01a4\0\u02d8"+
    "\0\u02f4\0\u0310\0\u032c\0\u0348\0\u0364\0\u0380\0\u039c\0\u03b8"+
    "\0\u01a4\0\u03d4\0\u03f0\0\u03d4\0\u040c\0\u0268\0\u0428\0\u0444"+
    "\0\u02bc\0\u0460\0\u01f8\0\u01c0\0\u0380\0\u039c\0\u047c\0\u0498"+
    "\0\u04b4\0\u0498\0\u0364\0\u04d0\0\u01a4\0\u04ec\0\u0508\0\u01a4"+
    "\0\u0524\0\u0540\0\u055c\0\u0578\0\u0594\0\u05b0\0\u05cc\0\u05e8"+
    "\0\u0604\0\u0188\0\u01a4\0\u0620\0\u01a4\0\u063c\0\u0658\0\u0674"+
    "\0\u0284\0\u0690\0\u06ac\0\u02a0\0\u06c8\0\u01a4\0\u06e4\0\u0700"+
    "\0\u071c\0\u0738\0\u0754\0\u0770\0\u078c\0\u07a8\0\u07c4\0\u02d8"+
    "\0\u07e0\0\u07fc\0\u0380\0\u0428\0\u0818\0\u06ac\0\u039c\0\u0444"+
    "\0\u0834\0\u0850\0\u086c\0\u03d4\0\u03b8\0\u01a4\0\u0888\0\u08a4"+
    "\0\u08c0\0\u01a4\0\u08dc\0\u01a4\0\u08f8\0\u0914\0\u0930\0\u094c"+
    "\0\u0498\0\u047c\0\u0968\0\u0984\0\u09a0\0\u0968\0\u09bc\0\u09d8"+
    "\0\u09f4\0\u055c\0\u0a10\0\u0a2c\0\u0594\0\u01a4\0\u01a4\0\u0a48"+
    "\0\u0a64\0\u0a80\0\u0a9c\0\u01a4\0\u0ab8\0\u0ad4\0\u0af0\0\u01a4"+
    "\0\u0b0c\0\u0b28\0\u0b44\0\u0b60\0\u0b7c\0\u0b98\0\u0bb4\0\u0bd0"+
    "\0\u0bec\0\u0c08\0\u0c24\0\u0c40\0\u0c5c\0\u0a64\0\u0c78\0\u0c94"+
    "\0\u0cb0\0\u0ccc\0\u0ce8\0\u0d04\0\u0d20\0\u0d3c\0\u0d58\0\u0d74"+
    "\0\u0b28\0\u0d90\0\u0dac\0\u0dc8\0\u0de4\0\u0bd0\0\u0e00\0\u0e1c"+
    "\0\u0e38\0\u0e54\0\u0e70\0\u0e8c\0\u0ce8\0\u0ea8\0\u0ec4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\26\1\21\1\31\1\32\1\33\1\17"+
    "\1\34\1\35\3\17\1\21\1\36\1\17\1\37\1\17"+
    "\1\21\1\40\1\20\2\21\1\22\1\41\1\24\1\42"+
    "\1\26\1\27\1\43\1\26\1\21\1\44\1\32\1\45"+
    "\1\40\1\46\1\47\3\40\1\21\1\36\1\40\1\37"+
    "\1\40\1\21\1\50\1\20\2\51\1\22\1\52\1\24"+
    "\1\53\1\26\1\27\1\54\1\26\1\55\1\31\1\32"+
    "\1\56\1\50\1\57\1\60\3\50\1\51\1\61\1\50"+
    "\1\37\1\50\1\62\1\17\1\20\2\51\1\22\1\23"+
    "\1\24\1\63\1\26\1\27\1\64\1\26\1\55\1\31"+
    "\1\32\1\56\1\17\1\65\1\66\3\17\1\51\1\61"+
    "\1\17\1\37\1\17\1\62\1\67\1\20\2\51\1\22"+
    "\1\70\1\24\1\71\1\26\1\27\1\72\1\26\1\55"+
    "\1\44\1\32\1\73\1\67\1\57\1\60\3\67\1\51"+
    "\1\61\1\67\1\37\1\67\1\62\1\74\1\75\6\74"+
    "\1\76\2\74\1\76\20\74\27\0\1\77\5\0\1\100"+
    "\6\0\1\101\2\0\1\101\20\0\1\102\4\0\1\103"+
    "\1\0\1\103\2\0\1\103\5\0\1\102\2\0\3\102"+
    "\2\0\1\102\1\0\1\102\2\0\2\100\1\0\1\100"+
    "\3\0\2\100\1\0\1\100\1\0\2\100\12\0\1\100"+
    "\2\0\1\104\4\0\1\105\1\0\1\105\2\0\1\105"+
    "\5\0\1\104\2\0\3\104\2\0\1\104\1\0\1\104"+
    "\2\0\2\100\5\0\1\100\2\0\1\100\34\0\1\106"+
    "\52\0\1\106\1\107\2\0\3\107\1\110\1\111\1\112"+
    "\2\107\1\112\20\107\34\0\1\17\2\0\5\17\1\0"+
    "\2\17\1\0\20\17\1\24\1\0\32\24\1\17\1\113"+
    "\1\0\5\17\1\114\2\17\1\114\20\17\10\0\1\26"+
    "\2\0\1\26\20\0\1\17\1\115\1\0\5\17\1\116"+
    "\2\17\1\116\20\17\15\0\1\117\33\0\1\120\16\0"+
    "\1\121\1\0\16\121\1\122\1\123\12\121\1\124\1\0"+
    "\20\124\1\125\11\124\1\0\1\126\3\0\3\127\1\130"+
    "\1\0\1\131\1\130\3\0\1\132\2\0\1\127\2\131"+
    "\2\127\1\133\1\134\1\0\1\127\1\0\1\135\2\0"+
    "\1\135\1\136\1\135\1\136\1\137\1\140\1\136\1\135"+
    "\1\140\1\135\2\136\12\135\1\136\2\135\1\40\2\0"+
    "\1\40\1\0\3\40\2\0\1\40\1\0\1\40\2\0"+
    "\12\40\1\0\3\40\1\113\1\0\1\40\1\0\3\40"+
    "\1\114\1\0\1\40\1\114\1\40\2\0\12\40\1\0"+
    "\3\40\1\115\1\0\1\40\1\0\3\40\1\116\1\0"+
    "\1\40\1\116\1\40\2\0\12\40\1\0\2\40\15\0"+
    "\1\141\33\0\1\142\16\0\1\143\1\144\16\143\1\145"+
    "\1\146\12\143\1\147\1\150\20\147\1\151\11\147\1\152"+
    "\2\0\3\152\1\153\1\154\1\155\2\152\1\155\20\152"+
    "\1\50\2\0\5\50\1\0\2\50\1\0\21\50\1\113"+
    "\1\0\5\50\1\114\2\50\1\114\20\50\1\0\1\156"+
    "\6\0\1\157\1\0\1\160\1\157\16\0\1\160\1\0"+
    "\20\144\1\161\1\162\12\144\22\150\1\163\11\150\1\0"+
    "\1\164\6\0\1\165\1\0\1\166\1\165\16\0\1\166"+
    "\1\0\1\167\2\0\1\167\1\170\1\167\1\170\1\171"+
    "\1\172\1\170\1\167\1\172\1\167\2\170\12\167\1\170"+
    "\2\167\1\67\2\0\1\67\1\0\3\67\2\0\1\67"+
    "\1\0\1\67\2\0\12\67\1\0\3\67\1\113\1\0"+
    "\1\67\1\0\3\67\1\114\1\0\1\67\1\114\1\67"+
    "\2\0\12\67\1\0\2\67\1\74\1\0\32\74\1\0"+
    "\1\75\6\0\1\76\2\0\1\76\25\0\3\173\2\0"+
    "\1\174\4\0\1\175\2\0\1\173\2\174\2\173\1\176"+
    "\1\177\1\0\1\173\11\0\1\101\2\0\1\101\20\0"+
    "\1\200\2\0\1\200\1\201\1\200\1\201\1\202\1\102"+
    "\1\201\1\200\1\102\1\200\2\201\12\200\1\201\2\200"+
    "\1\102\2\0\1\102\1\0\3\102\2\0\1\102\1\0"+
    "\1\102\2\0\12\102\1\0\2\102\1\203\2\0\3\203"+
    "\1\204\1\205\1\104\2\203\1\104\20\203\1\104\2\0"+
    "\5\104\1\0\2\104\1\0\20\104\12\0\1\206\17\0"+
    "\1\206\1\0\1\107\2\0\4\107\1\111\1\112\2\107"+
    "\1\112\20\107\6\0\1\17\25\0\1\17\2\207\5\17"+
    "\1\207\2\17\1\207\20\17\10\0\1\114\2\0\1\114"+
    "\30\0\1\116\2\0\1\116\20\0\1\210\1\0\4\210"+
    "\1\0\2\210\3\0\1\210\2\0\12\210\1\0\2\210"+
    "\1\211\1\0\3\120\1\212\1\120\1\212\2\120\1\212"+
    "\3\120\1\213\1\120\1\211\2\120\3\211\2\120\1\211"+
    "\1\120\1\211\1\120\1\121\1\0\32\121\7\0\1\214"+
    "\33\0\1\214\12\0\1\124\12\0\1\126\3\0\3\127"+
    "\1\130\1\0\1\127\1\130\3\0\1\132\2\0\5\127"+
    "\3\0\1\127\11\0\1\130\2\0\1\130\21\0\1\126"+
    "\3\0\3\127\1\130\1\0\1\131\1\130\3\0\1\132"+
    "\2\0\1\127\2\131\2\127\1\133\2\0\1\127\24\0"+
    "\1\215\15\0\3\127\2\0\1\127\4\0\1\132\2\0"+
    "\5\127\3\0\1\127\5\0\4\216\1\0\2\216\4\0"+
    "\1\217\2\0\6\216\1\0\2\216\1\0\1\135\2\0"+
    "\1\135\1\136\2\135\1\137\1\140\1\136\1\135\1\140"+
    "\1\135\2\136\12\135\1\136\2\135\6\0\1\40\25\0"+
    "\1\40\2\220\1\40\1\220\3\40\2\220\1\40\1\220"+
    "\1\40\2\220\12\40\1\220\2\40\1\221\1\0\4\221"+
    "\1\0\2\221\3\0\1\221\2\0\12\221\1\0\2\221"+
    "\1\222\1\0\3\142\1\223\1\142\1\223\2\142\1\223"+
    "\3\142\1\224\1\142\1\222\2\142\3\222\2\142\1\222"+
    "\1\142\1\222\1\142\1\143\1\144\32\143\7\0\1\214"+
    "\12\0\1\147\11\0\1\152\2\0\4\152\1\154\1\155"+
    "\2\152\1\155\20\152\6\0\1\50\35\0\1\157\2\0"+
    "\1\157\21\0\1\156\6\0\1\157\2\0\1\157\20\0"+
    "\34\144\22\0\1\150\21\0\1\165\2\0\1\165\21\0"+
    "\1\164\6\0\1\165\2\0\1\165\20\0\1\167\2\0"+
    "\1\167\1\170\2\167\1\171\1\172\1\170\1\167\1\172"+
    "\1\167\2\170\12\167\1\170\2\167\6\0\1\67\32\0"+
    "\3\173\2\0\1\173\4\0\1\175\2\0\5\173\3\0"+
    "\1\173\6\0\3\173\2\0\1\174\4\0\1\175\2\0"+
    "\1\173\2\174\2\173\1\176\2\0\1\173\24\0\1\225"+
    "\14\0\4\226\1\0\2\226\4\0\1\227\2\0\6\226"+
    "\1\0\2\226\1\0\1\200\2\0\1\200\1\201\2\200"+
    "\1\202\1\102\1\201\1\200\1\102\1\200\2\201\12\200"+
    "\1\201\2\200\6\0\1\102\25\0\1\203\2\0\4\203"+
    "\1\205\1\104\2\203\1\104\20\203\6\0\1\104\25\0"+
    "\1\230\1\0\3\210\1\231\1\0\1\154\1\210\1\0"+
    "\1\231\1\210\2\0\1\232\1\210\1\230\2\210\3\230"+
    "\2\210\1\230\1\0\1\230\1\210\1\233\1\0\1\120"+
    "\2\233\1\234\1\235\1\212\1\236\1\233\1\234\1\236"+
    "\2\233\1\237\15\233\1\211\1\0\1\120\2\211\1\234"+
    "\1\211\1\234\1\120\1\211\1\234\1\120\2\211\1\240"+
    "\15\211\1\50\4\0\1\154\1\0\1\154\2\0\1\154"+
    "\5\0\1\50\2\0\3\50\2\0\1\50\1\0\1\50"+
    "\24\0\1\127\14\0\4\216\1\0\2\216\1\0\1\241"+
    "\2\0\1\217\2\0\6\216\1\0\2\216\24\0\1\242"+
    "\10\0\1\243\1\0\3\221\1\244\1\0\1\171\1\221"+
    "\1\0\1\244\1\221\2\0\1\245\1\221\1\243\2\221"+
    "\3\243\2\221\1\243\1\0\1\243\1\221\1\246\1\0"+
    "\1\142\1\246\1\247\1\250\1\247\1\223\1\251\1\247"+
    "\1\250\1\251\1\246\1\247\1\252\12\246\1\247\2\246"+
    "\1\222\1\0\1\142\1\222\1\142\1\250\1\222\1\250"+
    "\2\142\1\250\1\142\1\222\1\142\1\224\12\222\1\142"+
    "\2\222\1\67\4\0\1\171\1\0\1\171\2\0\1\171"+
    "\5\0\1\67\2\0\3\67\2\0\1\67\1\0\1\67"+
    "\24\0\1\173\14\0\4\226\1\0\2\226\1\0\1\206"+
    "\2\0\1\227\2\0\6\226\1\0\2\226\24\0\1\253"+
    "\10\0\1\254\1\0\1\210\2\254\1\255\1\153\1\154"+
    "\1\256\1\152\1\255\1\256\2\152\1\257\12\254\1\152"+
    "\2\254\1\230\1\0\1\210\2\230\1\255\1\50\1\260"+
    "\1\210\1\50\1\255\1\210\2\50\1\261\12\230\1\50"+
    "\2\230\1\50\4\0\1\154\1\0\1\154\2\0\1\154"+
    "\3\0\1\213\1\0\1\50\2\0\3\50\2\0\1\50"+
    "\1\0\1\50\1\0\1\233\1\0\1\120\2\233\1\234"+
    "\1\233\1\212\1\236\1\233\1\234\1\236\2\233\1\237"+
    "\16\233\1\0\1\120\2\233\1\234\1\233\1\234\1\236"+
    "\1\233\1\234\1\236\2\233\1\237\15\233\1\211\1\0"+
    "\3\120\1\212\1\211\1\212\2\120\1\212\3\120\1\213"+
    "\1\120\1\211\2\120\3\211\2\120\1\211\1\120\1\211"+
    "\1\120\1\152\2\0\2\152\1\260\1\152\1\154\1\155"+
    "\1\152\1\260\1\155\21\152\2\0\2\152\1\260\1\153"+
    "\1\154\1\155\1\152\1\260\1\155\20\152\1\0\1\126"+
    "\6\0\1\130\2\0\1\130\43\0\1\216\10\0\1\262"+
    "\1\0\1\221\1\262\1\263\1\264\1\170\1\171\1\265"+
    "\1\170\1\264\1\265\1\167\1\170\1\266\12\262\1\170"+
    "\2\262\1\243\1\0\1\221\1\243\1\221\1\264\1\67"+
    "\1\267\1\221\1\0\1\264\1\221\1\67\1\0\1\245"+
    "\12\243\1\0\2\243\1\67\4\0\1\171\1\0\1\171"+
    "\2\0\1\171\3\0\1\224\1\0\1\67\2\0\3\67"+
    "\2\0\1\67\1\0\1\67\1\0\1\246\1\0\1\142"+
    "\1\246\1\247\1\250\1\246\1\223\1\251\1\247\1\250"+
    "\1\251\1\246\1\247\1\252\12\246\1\247\2\246\1\222"+
    "\1\0\3\142\1\223\1\222\1\223\2\142\1\223\3\142"+
    "\1\224\1\142\1\222\2\142\3\222\2\142\1\222\1\142"+
    "\1\222\1\142\1\246\1\0\1\142\1\246\1\247\1\250"+
    "\1\246\1\250\1\251\1\247\1\250\1\251\1\246\1\247"+
    "\1\252\12\246\1\247\2\246\1\67\4\0\1\171\1\67"+
    "\1\171\2\0\1\171\5\0\1\67\2\0\3\67\2\0"+
    "\1\67\1\0\1\67\24\0\1\226\10\0\1\254\1\0"+
    "\1\210\2\254\1\255\1\152\1\154\1\256\1\152\1\255"+
    "\1\256\2\152\1\257\12\254\1\152\3\254\1\0\1\210"+
    "\2\254\1\255\1\152\1\260\1\256\1\152\1\255\1\256"+
    "\2\152\1\257\12\254\1\152\2\254\1\152\2\0\2\152"+
    "\1\260\1\152\1\154\1\155\1\152\1\260\1\155\2\152"+
    "\1\237\16\152\2\0\4\152\1\260\1\155\2\152\1\155"+
    "\21\152\2\0\2\152\1\260\1\153\1\154\1\155\1\152"+
    "\1\260\1\155\2\152\1\237\15\152\1\262\1\0\1\221"+
    "\1\262\1\263\1\264\1\167\1\171\1\265\1\170\1\264"+
    "\1\265\1\167\1\170\1\266\12\262\1\170\2\262\1\243"+
    "\1\0\3\221\1\244\1\67\1\171\1\221\1\0\1\244"+
    "\1\221\2\0\1\245\1\221\1\243\2\221\3\243\2\221"+
    "\1\243\1\0\1\243\1\221\1\262\1\0\1\221\1\262"+
    "\1\263\1\264\1\167\1\267\1\265\1\170\1\264\1\265"+
    "\1\167\1\170\1\266\12\262\1\170\2\262\1\67\4\0"+
    "\1\171\1\67\1\171\2\0\1\171\3\0\1\224\1\0"+
    "\1\67\2\0\3\67\2\0\1\67\1\0\1\67\1\0"+
    "\1\167\2\0\1\167\1\170\2\167\1\267\1\172\1\170"+
    "\1\167\1\172\1\167\2\170\12\167\1\170\2\167";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3808];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\1\3\11\4\1\1\11\2\1\1\11\4\1"+
    "\1\11\11\1\1\11\23\1\1\11\2\1\1\11\1\1"+
    "\4\0\2\1\1\0\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\7\0\1\11\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\6\0\1\1\2\0\2\1\3\0\1\11\1\1"+
    "\2\0\1\11\1\1\1\11\1\1\1\0\1\1\3\0"+
    "\2\1\5\0\1\1\2\0\1\1\2\11\1\0\1\1"+
    "\2\0\1\11\3\0\1\11\1\0\1\1\5\0\1\1"+
    "\2\0\2\1\2\0\2\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\1\3\0\2\1\1\0\4\1\1\0\1\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int currentLineIndent = 0;
  private int valueIndent = -1;
  private int braceCount = 0;
  private IElementType valueTokenType = null;
  private int previousState = YYINITIAL;

  public boolean isCleanState() {
    return yystate() == YYINITIAL
      && currentLineIndent == 0
      && braceCount == 0;
  }

  public void cleanMyState() {
    currentLineIndent = 0;
    braceCount = 0;
  }

  private char previousChar() {
    return getChar(-1);
  }

  private char getChar(final int offset) {
    final int loc = getTokenStart()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private char getCharAfter(final int offset) {
    final int loc = getTokenEnd()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private IElementType getWhitespaceTypeAndUpdateIndent() {
    if (isAfterEol()) {
      currentLineIndent = yylength();
      return INDENT;
    }
    else {
      return WHITESPACE;
    }
  }

  private boolean isAfterEol() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\n';
  }

  private boolean isAfterSpace() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\t' || prev == ' ';
  }

  private void yyBegin(int newState) {
    //System.out.println("yybegin(): " + newState);
    yybegin(newState);
  }

  private boolean startsWith(CharSequence haystack, CharSequence needle) {
    for (int i = Math.min(haystack.length(), needle.length()) - 1; i >= 0; i--) {
      if (haystack.charAt(i) != needle.charAt(i)) {
        return false;
      }
    }
    return true;
  }

  private IElementType tokenOrForbidden(IElementType tokenType) {
    if (!isAfterEol() || yylength() < 3) {
      return tokenType;
    }

    if (startsWith(yytext(), "---")) {
      braceCount = 0;
      yyBegin(YYINITIAL);
      yypushback(yylength() - 3);
      return DOCUMENT_MARKER;
    }
    if (startsWith(yytext(), "...")) {
      braceCount = 0;
      yyBegin(YYINITIAL);
      yypushback(yylength() - 3);
      return DOCUMENT_END;
    }
    return tokenType;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YAMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return getWhitespaceTypeAndUpdateIndent();
          }
        case 27: break;
        case 1: 
          { return tokenOrForbidden(TEXT);
          }
        case 28: break;
        case 26: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(VALUE_BRACE);
  return SCALAR_KEY;
          }
        case 29: break;
        case 19: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return TAG;
          }
        case 30: break;
        case 14: 
          { currentLineIndent = 0;
                                            return EOL;
          }
        case 31: break;
        case 25: 
          { return SCALAR_KEY;
          }
        case 32: break;
        case 13: 
          { if (isAfterEol()){
                                                yypushback(yylength());
                                                yyBegin(YYINITIAL);
                                                break;
                                            } else {
                                                return valueTokenType;
                                            }
          }
        case 33: break;
        case 5: 
          { return QUESTION;
          }
        case 34: break;
        case 16: 
          { if (zzMarkedPos == zzEndRead){
    return SCALAR_KEY;
  }
  yyBegin(VALUE);
  return tokenOrForbidden(TEXT);
          }
        case 35: break;
        case 9: 
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACE;
          }
        case 36: break;
        case 17: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return COLON;
          }
        case 37: break;
        case 20: 
          { return SCALAR_DSTRING;
          }
        case 38: break;
        case 15: 
          { IElementType type = getWhitespaceTypeAndUpdateIndent();
                                            if (currentLineIndent <= valueIndent) {
                                              yyBegin(YYINITIAL);
                                            }
                                            return type;
          }
        case 39: break;
        case 23: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 13;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(INDENT_VALUE);
                                    valueIndent = currentLineIndent;
                                    valueTokenType = SCALAR_LIST;
                                    yypushback(yylength());
                                    break;
          }
        case 40: break;
        case 11: 
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACKET;
          }
        case 41: break;
        case 6: 
          { // YAML spec: when a comment follows another syntax element,
                                  //  it must be separated from it by space characters.
                                  return (isAfterEol() || isAfterSpace()) ? COMMENT : TEXT;
          }
        case 42: break;
        case 8: 
          { if (braceCount == 0) {
                                      yyBegin(VALUE);
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACKET;
          }
        case 43: break;
        case 22: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 12;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(INDENT_VALUE);
                                    valueIndent = currentLineIndent;
                                    valueTokenType = SCALAR_TEXT;
                                    yypushback(yylength());
                                    break;
          }
        case 44: break;
        case 3: 
          { //yyBegin(VALUE);
  return TEXT;
          }
        case 45: break;
        case 18: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yyBegin(VALUE_OR_KEY);
                                    return SEQUENCE_MARKER;
          }
        case 46: break;
        case 21: 
          { return SCALAR_STRING;
          }
        case 47: break;
        case 12: 
          { return TEXT;
          }
        case 48: break;
        case 24: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yyBegin(VALUE);
  return SCALAR_KEY;
          }
        case 49: break;
        case 2: 
          { if (braceCount == 0) {
                                      yyBegin(YYINITIAL);
                                    }
                                    currentLineIndent = 0;
                                    return EOL;
          }
        case 50: break;
        case 4: 
          { if (braceCount > 0) {
                                      yyBegin(BRACES);
                                      return COMMA;
                                    }
                                    yyBegin(VALUE);
                                    return TEXT;
          }
        case 51: break;
        case 10: 
          { if (braceCount == 0) {
                                      yyBegin(VALUE);
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACE;
          }
        case 52: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
