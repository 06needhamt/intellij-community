<idea-plugin version="2">
  <id>org.jetbrains.postfixCompletion</id>
  <name>Postfix Completion</name>
  <version>0.4-beta</version>
  <vendor email="alexander.shvedov@jetbrains.com"
          url="https://github.com/controlflow">Alexander Shvedov</vendor>
  <depends>com.intellij.modules.lang</depends>
  <depends>com.intellij.modules.java</depends>

  <description><![CDATA[
      The basic idea is to prevent caret jumps backward while typing code,
      let you start with the some expression, explore some APIs, think about
      what you are going to do and after finish with statement of some type.<br/><br/>

      <b>Available templates:</b><br/>

      <ul>
        <li> <b>.if</b> – checks boolean expression to be true – <b>if (expr)</b></li>
        <li> <b>.else</b> – checks boolean expression to be false – <b>if (!expr)</b></li>
        <li> <b>.var</b> – initialize new variable with expression – <b>T x = expr;</b></li>
        <li> <b>.null</b> – checks nullable expression to be null – <b>if (expr == null)</b></li>
        <li> <b>.notnull</b> – checks expression to be non-null – <b>if (expr != null)</b></li>
        <li> <b>.not</b> – negates value of inner boolean expression – <b>!expr</b></li>
        <li> <b>.for</b> – iterates over collection – <b>for (T item : collection)</b></li>
        <li> <b>.while</b> – uses expression as loop condition – <b>while (expr)</b></li>
        <li> <b>.arg</b> – helps surround argument with invocation – <b>method(expr)</b></li>
        <li> <b>.cast</b> – surrounds expression with cast – <b>(SomeType) expr</b></li>
        <li> <b>.new</b> – produces instantiation expression for type – <b>new T()</b></li>
      </ul>
      <br/>

      <b>Other features:</b><br/>

      <ul>
        <li>Template expansion by <b>[Tab]</b> key in editor (like live templates)</li>
        <li>Support for IDEA chained code completion (<b>st.new</b> => <b>new SomeType()</b>)</li>
        <li>Works inside code fragments, like evaluate expression debugger window</li>
      </ul>
]]></description>

  <change-notes><![CDATA[
      <b>Version 0.4-beta</b><br/>
      Various fixes. New <b>.new</b> template over types.<br/>
      Postfix template expansion by <b>Tab</b> key in editor (like live templates)
]]></change-notes>

  <idea-version since-build="130.754"/>

  <application-components>
     <component>
      <implementation-class>org.jetbrains.postfixCompletion.Infrastructure.PostfixTemplatesManager</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.IfStatementTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.ElseStatementTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.IntroduceVariableTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.NotNullCheckTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.IsNullCheckTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.NotExpressionTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.ForeachIterationTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.WhileStatementTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.ArgumentExpressionTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.CastExpressionTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.NewExpressionTemplateProvider</implementation-class>
    </component>
    <component>
      <implementation-class>org.jetbrains.postfixCompletion.TemplateProviders.ForIndexedIterationTemplateProvider</implementation-class>
    </component>
  </application-components>

  <module-components>
  </module-components>

  <project-components>
  </project-components>

  <extensions defaultExtensionNs="com.intellij">
    <completion.contributor language="JAVA" order="FIRST"
      implementationClass="org.jetbrains.postfixCompletion.PostfixCompletionContributor" />
  </extensions>
</idea-plugin>