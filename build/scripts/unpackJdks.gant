import com.intellij.openapi.util.SystemInfo
import com.intellij.openapi.util.io.FileUtil

import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

includeTargets << new File("${guessHome(this)}/build/scripts/utils.gant")

target(default: "Unpack JDKs") {
  unpackJdks()
}

def unpackJdks() {
  def osDirName = SystemInfo.isWindows ? "win" : SystemInfo.isMac ? "mac" : "linux"
  def osDir = new File("$home/build/jdk/$osDirName")
  if (!osDir.isDirectory()) {
    projectBuilder.info("Cannot unpack JDK: $osDir not found")
    return
  }

  unpackJdk(osDir, "1.6")
  unpackJdk(osDir, "1.8")
}

private void unpackJdk(File osDir, String majorVersion) {
  def jdkFiles = osDir.listFiles().findAll { it.name.startsWith("jdk$majorVersion") }
  if (SystemInfo.isWindows) {
    def arch = SystemInfo.is64Bit ? "x64" : "x32"
    jdkFiles = jdkFiles.findAll { it.name.endsWith("_${arch}.zip") }
  }
  if (jdkFiles.empty) {
    projectBuilder.info("Cannot unpack JDK: jdk$majorVersion* not found in $osDir")
    return
  }
  if (jdkFiles.size() > 1) {
    projectBuilder.info("Cannot unpack JDK: several matching files are found ($jdkFiles)")
    return
  }

  File jdkFile = jdkFiles.first()
  def destDir = new File("$home/build/jdk/$majorVersion")
  FileUtil.delete(destDir)
  if (jdkFile.name.endsWith(".zip")) {
    ant.unzip(src: jdkFile, dest: destDir)
  }
  else if (jdkFile.name.endsWith(".tar")) {
    def appleJdk = jdkFile.name.contains("apple")
    ant.untar(src: jdkFile, dest: destDir) {
      if (SystemInfo.isMac && !appleJdk) {
        patternset() {
          include(name: "jre/jdk/Contents/")
        }
        cutdirsmapper(dirs: "3")
      }
    }
    def jreBin = appleJdk ? "Home/bin" : SystemInfo.isMac ? "Home/jre/bin" : "jre/bin"
    ant.chmod(perm: "755") {
      fileset(dir: "$destDir/$jreBin") {
        include(name: "*")
      }
    }
  }
  else {
    projectBuilder.info("Cannot unpack JDK: unknown extension of file '${jdkFile.name}'")
  }
}

