/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.BuildException
import org.jetbrains.intellij.build.BuildContext
import org.jetbrains.intellij.build.BuildOptions
import org.jetbrains.intellij.build.BuildTasks
import org.jetbrains.jps.gant.LayoutInfo

import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this)}/build/scripts/utils.gant")

requireProperty("out", "$home/out")

// "out" has to be canonical, otherwise the ant build fails
// with mysterious errors
String out = new File(out).getCanonicalPath()

loadProductProperties(home)

def loadProductProperties(String home) {
  //todo[nik] improve (load implementation class from groovy resources root directly?)
  requireProperty("product", "idea")
  requireProperty("productPropertiesPath", "")
  if (productPropertiesPath.isEmpty()) {
    productPropertiesPath = "$home/build/scripts/" + p("product") + "_properties.gant";
  }
  if (!new File(productPropertiesPath).exists()) {
    throw new BuildException("No product specific properties file found at: " + productPropertiesPath)
  }
  setProperty("productProperties", includeFile(productPropertiesPath).getProperties(home))
}

private BuildContext createBuildContext(String out, BuildOptions options = new BuildOptions()) {
//todo[nik] construct buildOutputRoot automatically based on product name
  BuildContext.createContext(ant, projectBuilder, project, global, home, home, "$out/release", productProperties, options)
}

private static void compileModules(BuildContext buildContext) {
  BuildTasks.create(buildContext).compileProjectAndTests(["jps-builders"])
}

target(compile: "Compile project") {
  compileModules(createBuildContext(out))
}

target('default': 'The default target') {
  def buildContext = createBuildContext(out)
  compileModules(buildContext)
  def tasks = BuildTasks.create(buildContext)
  tasks.cleanOutput()
  tasks.buildSearchableOptions("resources-en", ["community-main"], [])

  layoutAll(buildContext, true)
  if (productProperties.buildUpdater) {
    // Generate updater.jar from the updater module (patch updater)
    layoutUpdater(out)
  }
  tasks.zipSources()
}

//todo[nik] do we really need this target? updates.xml calls layout.gant directly
target('build-dist-jars' : 'Target to build jars from locally compiled classes') {
  def options = new BuildOptions()
  options.useCompiledClassesFromProjectOutput = true
  def buildContext = createBuildContext(out, options)
  compileModules(buildContext)
  def tasks = BuildTasks.create(buildContext)
  tasks.cleanOutput()
  tasks.buildSearchableOptions("resources-en", ["community-main"], [])
  layoutAll(buildContext)
}

def layoutAll(BuildContext buildContext, buildJps = false) {
  def layouts = includeFile("$buildContext.paths.communityHome/build/scripts/layouts.gant")
  def tasks = BuildTasks.create(buildContext)
  def applicationInfo = tasks.patchApplicationInfo()
  LayoutInfo info = layouts.layoutFull(buildContext.paths.projectHome, buildContext.paths.distAll, applicationInfo)

  buildContext.messages.block("Build intellij-core") {
    String coreArtifactDir = "$buildContext.paths.artifacts/core"
    buildContext.ant.mkdir(dir: coreArtifactDir)
    layouts.layout_core(buildContext.paths.projectHome, coreArtifactDir)
    buildContext.notifyArtifactBuilt(coreArtifactDir)

    def intellijCoreZip = "${buildContext.paths.artifacts}/intellij-core-${buildContext.buildNumber}.zip"
    ant.zip(destfile: intellijCoreZip) {
      fileset(dir: coreArtifactDir)
    }
    buildContext.notifyArtifactBuilt(intellijCoreZip)
  }
  if (buildJps) {
    buildContext.messages.block("Build standalone JPS") {
      String jpsArtifactDir = "$buildContext.paths.artifacts/jps"
      layouts.layoutJps(buildContext.paths.communityHome, jpsArtifactDir, buildContext.fullBuildNumber, {})
      buildContext.notifyArtifactBuilt(jpsArtifactDir)
    }
  }

  tasks.buildDistributions()
  return info
}
