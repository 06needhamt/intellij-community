// Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

import org.jetbrains.intellij.build.CompilationTasks
import org.jetbrains.intellij.build.impl.BuildUtils
import org.jetbrains.intellij.build.impl.CompilationContextImpl
import org.jetbrains.jps.idea.IdeaProjectLoader
import org.jetbrains.jps.model.java.JpsJavaExtensionService
import org.jetbrains.jps.model.library.JpsOrderRootType
import org.jetbrains.jps.util.JpsPathUtil

import java.nio.file.Paths

target('default': 'Check icons in repositories') {
  def root = Paths.get(
    System.getProperty('teamcity.build.checkoutDir') ?: '.'
  ).normalize().toAbsolutePath().toString()
  def home = IdeaProjectLoader.guessHome(this)
  def output = "$home/out/iconsCheck"
  def context = CompilationContextImpl.create(home, home, output)
  def moduleName = 'intellij.platform.images.build'
  CompilationTasks.create(context).with {
    resolveProjectDependencies()
    compileModules([moduleName])
  }
  (
    // dependencies
    context.findModule(moduleName)
      .with { JpsJavaExtensionService.dependencies(it) }
      .productionOnly().recursively()
      .libraries.collectMany { it.getRoots(JpsOrderRootType.COMPILED) }
      .collect { JpsPathUtil.urlToFile(it.url) } +
    // compiled modules and jars in lib directory
    ["$output/classes/production", "$root/lib"]
      .collectMany { new File(it).listFiles().toList() }
      .findAll { it.isDirectory() || it.name.endsWith('.jar') }
  ).each {
    // com.intellij.util package gets loaded by AntClassLoader before this script starts
    // so we have to add dependencies to AntClassLoader classpath directly
    BuildUtils.addToJpsClassPath(it.absolutePath, ant)
  }
  def repoArg = 'repos'
  def patternArg = 'skip.dirs.pattern'
  def sync = 'sync'
  String[] repos = System.properties."$repoArg"?.toString()?.split(/,/) ?: []
  if (repos.length < 2) {
    context.messages.error("Usage: -D$repoArg=<codeRepoDir>,<iconsRepoDir> [-D$patternArg=...] [-D$sync=false|true]")
    System.exit(1)
  }
  def skipDirsPattern = System.properties."$patternArg"?.toString() ?: null
  try {
    Class.forName('org.jetbrains.intellij.build.images.sync.CheckAndSyncIconsKt').checkAndSyncIcons(
      repos[0], repos[1], skipDirsPattern, Boolean.parseBoolean(System.properties[sync] as String),
      { String msg -> msg.split(/\n/).each { context.messages.info(it) } },
      { String msg -> context.messages.buildStatus(msg); System.exit(1) }
    )
  }
  catch (Exception e) {
    e.printStackTrace()
    throw e
  }
}