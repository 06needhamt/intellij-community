import org.gradle.internal.os.OperatingSystem

import java.util.concurrent.TimeUnit

task setupJbre()

def targetOs = System.getProperty("intellij.build.target.os", "all")
def jreVersion = System.getProperty("intellij.build.bundled.jre.version", "8").toInteger()
def jreBuild = System.getProperty("intellij.build.bundled.jre.build", jdkBuild)
createJbreTasks(jreBuild, jreVersion, targetOs)

if (System.getProperty('intellij.build.bundle.second.jre', 'false').toBoolean()) {
  def secondJreBuild = System.getProperty("intellij.build.bundled.second.jre.build", secondJreBuild)
  def secondJreVersion = System.getProperty("intellij.build.bundled.second.jre.version", secondJreVersion).toInteger()
  createJbreTasks(secondJreBuild, secondJreVersion, targetOs)
}

def createJbreTasks(String defaultBuild, int version, String targetOs) {
  def isModular = version >= 9
  def jbsdkPrefix = version == 8 ? 'jbrex8' : "jbsdk$version"
  jrePlatformsToDownload(targetOs).each { platform ->
    archToDownload(platform, !isModular).each { arch ->
      def jreBuild = project.ext.has("jreBuild_$platform") ? project.ext["jreBuild_$platform"] : defaultBuild
      def jbsdkArtifactName = "${jbsdkPrefix}${jreBuild}_${platform}_$arch".toString()
      def jbreArtifactName = "jbre${version}${jreBuild}_${platform}_$arch"
      def download = createDownloadJbreTask(jbsdkArtifactName, jreBuild.toString(), !isModular)
      if (!isModular) {
        def untarTask = createUntarJbreTask(download, jbsdkArtifactName.capitalize(), platform)
        createTarJbreTask("tar${jbreArtifactName.capitalize()}", untarTask, platform, jbreArtifactName, false)
        setupJbre.dependsOn("tar${jbreArtifactName.capitalize()}")
        cleanSetupJbre.dependsOn("cleanTar${jbreArtifactName.capitalize()}")
        createTarJbreTask("tar${jbsdkArtifactName.capitalize()}", untarTask, platform, jbsdkArtifactName, true)
        setupJbre.dependsOn("tar${jbsdkArtifactName.capitalize()}")
        cleanSetupJbre.dependsOn("cleanTar${jbsdkArtifactName.capitalize()}")
      }
    }
  }
}

def createDownloadJbreTask(String artifactName, String build, boolean doRepackage) {
  def outputDir = "$project.buildDir/jbre"
  def suffix = doRepackage ? '_origin' : ''
  def outputFile = "$outputDir/${artifactName}${suffix}.tar.gz"
  task("download${artifactName.capitalize()}") {
    def jdkRepo = 'https://cache-redirector.jetbrains.com/intellij-jdk'
    inputs.property('build', build)
    outputs.file(outputFile)
    doLast {
      logger.info("Downloading $artifactName to $outputFile")
      download {
        src "$jdkRepo/${artifactName}.tar.gz"
        dest outputFile
        tempAndMove true
        timeout TimeUnit.MINUTES.toMillis(30).toInteger()
      }
    }
    setupJbre.dependsOn(it)
    cleanSetupJbre.dependsOn("clean${it.name.capitalize()}")
  }
  file(outputFile)
}

def createUntarJbreTask(File downloadOutputs, String taskName, String platform) {
  Task untar
  if (OperatingSystem.current().isWindows()) {
    // note: tarTree extracts symlinks as 0 length files which breaks osx distributions 
    untar = task("untar$taskName", type: Copy, dependsOn: "download$taskName") {
      from tarTree(downloadOutputs), {
        exclude 'lib/tools.jar'
      }
      from tarTree(downloadOutputs), {
        include 'lib/tools.jar'
        into 'jre'
      }
      into { "${downloadOutputs.singleFile.parent}/${downloadOutputs.singleFile.name - '.tar.gz'}/" }
      includeEmptyDirs = false
    }
  }
  else {
    untar = task("untar$taskName", type: Exec, dependsOn: "download$taskName") {
      def outputDir = "${downloadOutputs.absolutePath - '.tar.gz'}"
      inputs.file(downloadOutputs)
      outputs.dir(outputDir)
      doFirst { exec { commandLine 'mkdir', '-p', outputDir } }
      commandLine 'tar', '-xpf', "${downloadOutputs.absolutePath}", '--directory', outputDir
      if (platform != 'osx') {
        doLast {
          if (file("$outputDir/lib/tools.jar").exists()) {
            exec {
              commandLine 'mv', "$outputDir/lib/tools.jar", "$outputDir/jre/lib/"
              ignoreExitValue = true
            }
          }
        }
      }
    }
  }
  cleanSetupJbre.dependsOn("cleanUntar$taskName")
  untar
}

def createTarJbreTask(String taskName,
                      Task untarTask,
                      String platform,
                      String archive,
                      boolean includeToolsJar) {
  def dirToTar = platform == 'osx' ? 'jdk' : 'jre'
  if (OperatingSystem.current().isWindows()) {
    task(taskName, type: Tar) {
      def untarOutputs = untarTask.outputs.files
      inputs.file(untarOutputs)
      from "$untarOutputs.singleFile/$dirToTar"
      if (!includeToolsJar) {
        exclude "**/tools.jar"
      }
      into dirToTar
      compression = Compression.GZIP
      archiveName = "${archive}.tar.gz"
      destinationDir = untarOutputs.singleFile.parentFile
    }
  }
  else {
    task(taskName, type: Exec) {
      def untarOutputs = untarTask.outputs.files
      def outputFile = "${untarOutputs.singleFile.parentFile}/${archive}.tar.gz"
      inputs.files(untarOutputs)
      outputs.file(outputFile)
      def arguments = ['tar', '-czf', outputFile, '-C', untarOutputs.singleFile.absolutePath]
      if (!includeToolsJar) {
        arguments += ['--exclude', '**/tools.jar']
        // exclude entire lib directory (IDEA-176641)
        if (platform == 'osx') {
          arguments += ['--exclude', './jdk/Contents/Home/lib']
        }
      }
      arguments += [dirToTar]
      commandLine = arguments
    }
  }
}

// see org.jetbrains.intellij.build.BuildOptions.targetOS
static def jrePlatformsToDownload(targetOs) {
  Set<String> jrePlatformToDownload = []
  if (targetOs == 'all' || targetOs == 'linux') jrePlatformToDownload += 'linux'
  if (targetOs == 'all' || targetOs == 'windows') jrePlatformToDownload += 'windows'
  if (targetOs == 'all' || targetOs == 'mac') jrePlatformToDownload += 'osx'
  jrePlatformToDownload
}

static def archToDownload(platform, is32BitArchSupported) {
  is32BitArchSupported && platform == 'windows' ? ['x86', 'x64'] : ['x64']
}