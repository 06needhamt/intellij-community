{
  "license": {
    "name": "CC-BY-SA 2.5",
    "url": "https://creativecommons.org/licenses/by-sa/2.5/"
  },
  "author": {
    "name": "Mozzila Contributors",
    "url": "https://github.com/mdn/content"
  },
  "symbols": {
    "aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>AggregateError</strong></code> object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a>, when all promises passed to it reject.</p>"
    },
    "aggregateerror.aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>AggregateError()</strong></code> constructor creates an error for several errors that need to be wrapped in a single error.</p>"
    },
    "array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The JavaScript <strong><code>Array</code></strong> class is a global object that is used in the construction of arrays; which are high-level, list-like objects.</p>"
    },
    "array.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>@@iterator</strong></code> method is part of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">The iterable protocol</a>, that defines how to synchronously iterate over a sequence of values.</p>\n<p>The initial value of the <code><strong>@@iterator</strong></code> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a> property.</p>"
    },
    "array.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Array[@@species]</code></strong> accessor property returns the <code>Array</code> constructor.</p>"
    },
    "array.@@unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@unscopables",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>@@unscopable</strong></code> symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version. These properties are excluded from <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\">with</a></code> statement bindings.</p>"
    },
    "array.array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Array()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> objects.</p>"
    },
    "array.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/concat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>concat()</strong></code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p>"
    },
    "array.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/copywithin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>copyWithin()</strong></code> method shallow copies part of an array to another location in the same array and returns it without modifying its length.</p>"
    },
    "array.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>entries()</code></strong> method returns a new <strong>Array Iterator</strong> object that contains the key/value pairs for each index in the array.</p>"
    },
    "array.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/every",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>every()</code></strong> method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.</span></p>"
    },
    "array.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/fill",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>fill()</strong></code> method changes all elements in an array to a static value, from a start index (default <code>0</code>) to an end index (default <code>array.length</code>). It returns the modified array.</span></p>"
    },
    "array.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/filter",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>filter()</code></strong> method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p>"
    },
    "array.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/find",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code>find()</code> method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfies the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.</span></p>\n<ul>\n<li>If you need the <strong>index</strong> of the found element in the array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>.</li>\n<li>If you need to find the <strong>index of a value</strong>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>. (It’s similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, but checks each element for equality with the value instead of using a testing function.)</li>\n<li>If you need to find if a value <strong>exists</strong> in an array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a>. Again, it checks each element for equality with the value instead of using a testing function.</li>\n<li>If you need to find if any element satisfies the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a>.</li>\n</ul>"
    },
    "array.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findindex",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>findIndex()</strong></code> method returns the <strong>index</strong> of the first element in the array <strong>that satisfies the provided testing function</strong>. Otherwise, it returns <code>-1</code>, indicating that no element passed the test.</span></p>\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a> method, which returns the <strong>value</strong> of an array element, instead of its index.</p>"
    },
    "array.flat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>flat()</strong></code> method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.</p>"
    },
    "array.flatmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flatmap",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>flatMap()</strong></code> method returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> followed by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a> of depth 1, but slightly more efficient than calling those two methods separately.</p>"
    },
    "array.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>forEach()</strong></code> method executes a provided function once for each array element.</p>"
    },
    "array.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/from",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>Array.from()</strong></code> static method creates a new, shallow-copied <code>Array</code> instance from an array-like or iterable object.</span></p>"
    },
    "array.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/includes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>includes()</strong></code> method determines whether an array includes a certain value among its entries, returning <code>true</code> or <code>false</code> as appropriate.</p>"
    },
    "array.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/indexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>indexOf()</strong></code> method returns the first index at which a given element can be found in the array, or -1 if it is not present.</p>"
    },
    "array.isarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/isarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Array.isArray()</strong></code> method determines whether the passed value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n<pre class=\"brush: js notranslate\"><code>Array.isArray([1, 2, 3]);  // true\nArray.isArray({foo: 123}); // false\nArray.isArray('foobar');   // false\nArray.isArray(undefined);  // false\n</code></pre>"
    },
    "array.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/join",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>join()</strong></code> method creates and returns a new string by concatenating all of the elements in an array (or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects\">array-like object</a>), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.</span></p>"
    },
    "array.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>keys()</code></strong> method returns a new <strong>Array Iterator</strong> object that contains the keys for each index in the array.</p>"
    },
    "array.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>lastIndexOf()</code></strong> method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at <code>fromIndex</code>.</p>"
    },
    "array.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>length</strong></code> property of an object which is an instance of type <code>Array</code> sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</p>"
    },
    "array.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>map()</strong></code> method <strong>creates a new array</strong> populated with the results of calling a provided function on every element in the calling array.</span></p>"
    },
    "array.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/of",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Array.of()</strong></code> method creates a new <code>Array</code> instance from a variable number of arguments, regardless of number or type of the arguments.</p>\n<p>The difference between <code><strong>Array.of()</strong></code> and the <code><strong>Array</strong></code> constructor is in the handling of integer arguments: <code><strong>Array.of(7)</strong></code> creates an array with a single element, <code>7</code>, whereas <code><strong>Array(7)</strong></code> creates an empty array with a <code>length</code> property of <code>7</code> (<strong>Note:</strong> this implies an array of <code>7</code> empty slots, not slots with actual <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> values).</p>\n<pre class=\"brush: js notranslate\"><code>Array.of(7); // [7]\nArray(7); // array of 7 empty slots\nArray.of(1, 2, 3); // [1, 2, 3]\nArray(1, 2, 3);    // [1, 2, 3]\n</code></pre>"
    },
    "array.pop": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/pop",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>pop()</code></strong> method removes the <strong>last</strong> element from an array and returns that element. This method changes the length of the array.</p>"
    },
    "array.push": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/push",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>push()</strong></code> method adds one or more elements to the end of an array and returns the new length of the array.</p>"
    },
    "array.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduce",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>reduce()</strong></code> method executes a <strong>reducer</strong> function (that you provide) on each element of the array, resulting in single output value.</p>\n<p>The <strong>reducer</strong> function takes four arguments:</p>\n<ol>\n<li>Accumulator</li>\n<li>Current Value</li>\n<li>Current Index</li>\n<li>Source Array</li>\n</ol>\n<p>Your <strong>reducer</strong> function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.</p>"
    },
    "array.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduceright",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>reduceRight()</strong></code> method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</p>\n<p>See also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"><code>Array.prototype.reduce()</code></a> for left-to-right.</p>"
    },
    "array.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reverse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reverse()</code></strong> method reverses an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a></em>. The first array element becomes the last, and the last array element becomes the first.</p>"
    },
    "array.shift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/shift",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>shift()</strong></code> method removes the <strong>first</strong> element from an array and returns that removed element. This method changes the length of the array.</p>"
    },
    "array.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method returns a shallow copy of a portion of an array into a new array object selected from <code>start</code> to <code>end</code> (<code>end</code> not included) where <code>start</code> and <code>end</code> represent the index of items in that array. The original array will not be modified.</p>"
    },
    "array.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/some",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>some()</code></strong> method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value. </span></p>"
    },
    "array.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/sort",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>sort()</strong></code> method sorts the elements of an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a></em> and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.</p>\n<p>The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.</p>"
    },
    "array.splice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/splice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>splice()</code></strong> method changes the contents of an array by removing or replacing existing elements and/or adding new elements <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a>.</p>"
    },
    "array.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string representing the elements of the array. The elements are converted to Strings using their <code>toLocaleString</code> methods and these Strings are separated by a locale-specific String (such as a comma “,”).</p>"
    },
    "array.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>toSource()</strong></code> method returns a string representing the source code of the array.</p>"
    },
    "array.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the specified array and its elements.</p>"
    },
    "array.unshift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/unshift",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>unshift()</strong></code> method adds one or more elements to the beginning of an array and returns the new length of the array.</p>"
    },
    "array.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new <strong><code>Array Iterator</code></strong> object that contains the values for each index in the array.</p>"
    },
    "arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer</code></strong> object is used to represent a generic, fixed-length raw binary data buffer.</p>\n<p>It is an array of bytes, often referred to in other languages as a \"byte array\".You cannot directly manipulate the contents of an <code>ArrayBuffer</code>; instead, you create one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</p>\n<p>The <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer\">ArrayBuffer()</a></code> constructor creates a new <code>ArrayBuffer</code> of the given length in bytes. You can also get an array buffer from existing data, for example <a href=\"$MDN_URL$/Glossary/Base64#Appendix_to_Solution_1_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer\" data-flaw=\"link1\">from a Base64 string</a> or <a href=\"$MDN_URL$/Web/API/FileReader/readAsArrayBuffer\">from a local file</a>.</p>"
    },
    "arraybuffer.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer[@@species]</code></strong> accessor property returns the <code>ArrayBuffer</code> constructor.</p>"
    },
    "arraybuffer.arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.</p>"
    },
    "arraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> in bytes.</p>"
    },
    "arraybuffer.isview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/isview",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer.isView()</code></strong> method determines whether the passed value is one of the <code>ArrayBuffer</code> views, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "arraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method returns a new <code>ArrayBuffer</code> whose contents are a copy of this <code>ArrayBuffer</code>'s bytes from <code>begin</code>, inclusive, up to <code>end</code>, exclusive.</p>"
    },
    "asyncfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncfunction",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>AsyncFunction</code> constructor</strong> creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function\">async function</a> object. In JavaScript, every asynchronous function is actually an <code>AsyncFunction</code> object.</p>\n<p>Note that <code>AsyncFunction</code> is <em>not</em> a global object. It can be obtained with the following code:</p>\n<pre class=\"brush: js notranslate\"><code>Object.getPrototypeOf(async function(){}).constructor\n</code></pre>"
    },
    "atomics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Atomics</code></strong> object provides atomic operations as static methods. They are used with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.</p>"
    },
    "atomics.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/add",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.add()</code></strong> method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>"
    },
    "atomics.and": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/and",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.and()</code></strong> method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>"
    },
    "atomics.compareexchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/compareexchange",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.compareExchange()</code></strong> method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value.  It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.</p>"
    },
    "atomics.exchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/exchange",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Atomics.exchange()</code></strong> method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.</p>"
    },
    "atomics.islockfree": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/islockfree",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.isLockFree()</code></strong> method is used to determine whether to use locks or atomic operations. It returns <code>true</code>, if the given size is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a> property of integer TypedArray types.</p>"
    },
    "atomics.load": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/load",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.load()</code></strong> method returns a value at a given position in the array.</p>"
    },
    "atomics.notify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/notify",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.notify()</code></strong> method notifies up some agents that are sleeping in the wait queue.</p>\n<div class=\"note notecard\">\n<p><strong>Note:</strong> This operation works with a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> only.<br>\nIt will return <code>0</code> on non-shared <code>ArrayBuffer</code> objects.</p>\n</div>"
    },
    "atomics.or": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/or",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.or()</code></strong> method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>"
    },
    "atomics.store": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/store",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.store()</code></strong> method stores a given value at the given position in the array and returns that value.</p>"
    },
    "atomics.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/sub",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Atomics.sub()</code></strong> method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>"
    },
    "atomics.wait": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/wait",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.wait()</code></strong> method verifies that a given position in an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either \"<code>ok</code>\", \"<code>not-equal</code>\", or \"<code>timed-out</code>\".</p>\n<div class=\"note notecard\">\n<p><strong>Note:</strong> This operation only works with a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> and may not be allowed on the main thread.</p>\n</div>"
    },
    "atomics.xor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/xor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.xor()</code></strong> method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>"
    },
    "bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><strong><code>BigInt</code></strong> is a built-in object that provides a way to represent whole numbers larger than 2<sup>53</sup> - 1, which is the largest number JavaScript can reliably represent with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a> and represented by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> constant. <strong><code>BigInt</code></strong> can be used for arbitrarily large integers.</p>"
    },
    "bigint.asintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asintn",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt.asIntN</code></strong> static method is used to wrap a BigInt value to a signed integer between -2<sup>width-1</sup> and 2<sup>width-1</sup>-1.</p>"
    },
    "bigint.asuintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asuintn",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt.asUintN</code></strong> static method is used to wrap a BigInt value to an unsigned integer between 0 and 2<sup>width</sup>-1.</p>"
    },
    "bigint.bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/bigint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt()</code></strong> constructor returns a value of type <strong>bigint</strong>.</p>"
    },
    "bigint.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this BigInt.</p>"
    },
    "bigint.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object. The trailing \"n\" is not part of the string.</p>"
    },
    "bigint.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the wrapped primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object.</p>"
    },
    "bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt64Array</code></strong> typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>"
    },
    "bigint64array.bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt64Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> object, which is, an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>"
    },
    "biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigUint64Array</code></strong> typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>"
    },
    "biguint64array.biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigUint64Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a> object, which is, an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>"
    },
    "boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Boolean</code></strong> object is an object wrapper for a boolean value.</p>"
    },
    "boolean.boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/boolean",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Boolean()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> objects.</p>"
    },
    "boolean.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>toSource()</strong></code> method returns a string representing the source code of the object.</p>"
    },
    "boolean.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the specified Boolean object.</p>"
    },
    "boolean.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>valueOf()</strong></code> method returns the primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object.</p>"
    },
    "dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>DataView</code></strong> view provides a low-level interface for reading and writing multiple number types in a binary <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, without having to care about the platform's <a href=\"$MDN_URL$/Glossary/Endianness\">endianness</a>.</span></p>"
    },
    "dataview.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/buffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>buffer</code></strong> accessor property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> referenced by the <code>DataView</code> at construction time.</p>"
    },
    "dataview.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length (in bytes) of this view from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</p>"
    },
    "dataview.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteOffset</code></strong> accessor property represents the offset (in bytes) of this view from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</p>"
    },
    "dataview.dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/dataview",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>DataView()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> objects.</p>"
    },
    "dataview.getbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbigint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getBigInt64()</code></strong> method gets a signed 64-bit integer (long long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbiguint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getBigUint64()</code></strong> method gets an unsigned 64-bit integer (unsigned long long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getFloat32()</code></strong> method gets a signed 32-bit float (float) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getFloat64()</code></strong> method gets a signed 64-bit float (double) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getInt16()</code></strong> method gets a signed 16-bit integer (short) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getInt32()</code></strong> method gets a signed 32-bit integer (long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getInt8()</code></strong> method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUint16()</code></strong> method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUint32()</code></strong> method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.getuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUint8()</code></strong> method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbigint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setBigInt64()</code></strong> method stores a signed 64-bit integer (long long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbiguint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setBigUint64()</code></strong> method stores an unsigned 64-bit integer (unsigned long long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setFloat32()</code></strong> method stores a signed 32-bit float (float) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setFloat64()</code></strong> method stores a signed 64-bit float (double) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setInt16()</code></strong> method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setInt32()</code></strong> method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setInt8()</code></strong> method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUint16()</code></strong> method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUint32()</code></strong> method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "dataview.setuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUint8()</code></strong> method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>"
    },
    "date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">JavaScript <strong><code>Date</code></strong> objects represent a single moment in time in a platform-independent format.</span> <code>Date</code> objects contain a <code>Number</code> that represents milliseconds since 1 January 1970 UTC.</p>\n<div class=\"notecard note\">\n<p>TC39 is working on <a href=\"https://tc39.es/proposal-temporal/docs/index.html\">Temporal</a>, a new Date/Time API.<br>\nRead more about it on the <a href=\"https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/\">Igalia blog</a> and fill out the <a href=\"https://forms.gle/iL9iZg7Y9LvH41Nv8\">survey</a>. It needs real-world feedback from web developers, but is not yet ready for production use!</p>\n</div>"
    },
    "date.@@toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/@@toprimitive",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>[@@toPrimitive]()</strong></code> method converts a <code>Date</code> object to a primitive value.</p>"
    },
    "date.date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/date",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">Creates a JavaScript <strong><code>Date</code></strong> instance that represents a single moment in time in a platform-independent format.</span> <code>Date</code> objects contain a <code>Number</code> that represents milliseconds since 1 January 1970 UTC.</p>"
    },
    "date.getdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getDate()</code></strong> method returns the day of the month for the specified date according to local time.</p>"
    },
    "date.getday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getday",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>getDay()</code></strong> method returns the day of the week for the specified date according to local time, where 0 represents Sunday.</span> For the day of the month, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getDate\"><code>Date.prototype.getDate()</code></a>.</p>"
    },
    "date.getfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getFullYear()</code></strong> method returns the year of the specified date according to local time.</p>\n<p>Use this method instead of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getYear\"><code>getYear()</code></a> method.</p>"
    },
    "date.gethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gethours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getHours()</code></strong> method returns the hour for the specified date, according to local time.</p>"
    },
    "date.getmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getMilliseconds()</code></strong> method returns the milliseconds in the specified date according to local time.</p>"
    },
    "date.getminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getMinutes()</code></strong> method returns the minutes in the specified date according to local time.</p>"
    },
    "date.getmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getMonth()</code></strong> method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).</p>"
    },
    "date.getseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getSeconds()</code></strong> method returns the seconds in the specified date according to local time.</p>"
    },
    "date.gettime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettime",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getTime()</code></strong> method returns the number of milliseconds* since the <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix Epoch</a>.</p>\n<p>* JavaScript uses <em>milliseconds</em> as the unit of measurement, whereas Unix Time is in <em>seconds</em>.</p>\n<p><em>getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a client browser in any other timezone.</em></p>\n<p>You can use this method to help assign a date and time to another <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object. This method is functionally equivalent to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/valueOf\"><code>valueOf()</code></a> method.</p>"
    },
    "date.gettimezoneoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettimezoneoffset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getTimezoneOffset()</code></strong> method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.</p>"
    },
    "date.getutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCDate()</code></strong> method returns the day of the month(from 1 to 31) in the specified date according to universal time.</p>"
    },
    "date.getutcday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcday",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCDay()</code></strong> method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.</p>"
    },
    "date.getutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCFullYear()</code></strong> method returns the year in the specified date according to universal time.</p>"
    },
    "date.getutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutchours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCHours()</code></strong> method returns the hours in the specified date according to universal time.</p>"
    },
    "date.getutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCMilliseconds()</code></strong> method returns the milliseconds portion of the time object's value.</p>"
    },
    "date.getutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCMinutes()</code></strong> method returns the minutes in the specified date according to universal time.</p>"
    },
    "date.getutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCMonth()</code></strong> returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).</p>"
    },
    "date.getutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCSeconds()</code></strong> method returns the seconds in the specified date according to universal time.</p>"
    },
    "date.getyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>getYear()</code></strong> method returns the year in the specified date according to local time. Because <code>getYear()</code> does not return full years (\"year 2000 problem\"), it is no longer used and has been replaced by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\"><code>getFullYear()</code></a> method.</p>"
    },
    "date.now": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/now",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Date.now()</code></strong> method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</p>"
    },
    "date.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/parse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Date.parse()</code></strong> method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or <code>NaN</code> if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).</p>\n<p>It is not recommended to use <code>Date.parse</code> as until ES5, parsing of strings was entirely implementation dependent. There are still many differences in how different hosts parse date strings, therefore date strings should be manually parsed (a library can help if many different formats are to be accommodated).</p>"
    },
    "date.setdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setDate()</code></strong> method sets the day of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object relative to the beginning of the currently set month.</p>"
    },
    "date.setfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setFullYear()</code></strong> method sets the full year for a specified date according to local time. Returns new timestamp.</p>"
    },
    "date.sethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/sethours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setHours()</code></strong> method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance.</p>"
    },
    "date.setmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setMilliseconds()</code></strong> method sets the milliseconds for a specified date according to local time.</p>"
    },
    "date.setminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setMinutes()</code></strong> method sets the minutes for a specified date according to local time.</p>"
    },
    "date.setmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setMonth()</code></strong> method sets the month for a specified date according to the currently set year.</p>"
    },
    "date.setseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setSeconds()</code></strong> method sets the seconds for a specified date according to local time.</p>"
    },
    "date.settime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/settime",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setTime()</code></strong> method sets the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>"
    },
    "date.setutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCDate()</code></strong> method sets the day of the month for a specified date according to universal time.</p>"
    },
    "date.setutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCFullYear()</code></strong> method sets the full year for a specified date according to universal time.</p>"
    },
    "date.setutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutchours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCHours()</code></strong> method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance.</p>"
    },
    "date.setutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCMilliseconds()</code></strong> method sets the milliseconds for a specified date according to universal time.</p>"
    },
    "date.setutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCMinutes()</code></strong> method sets the minutes for a specified date according to universal time.</p>"
    },
    "date.setutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCMonth()</code></strong> method sets the month for a specified date according to universal time.</p>"
    },
    "date.setutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCSeconds()</code></strong> method sets the seconds for a specified date according to universal time.</p>"
    },
    "date.setyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>setYear()</code></strong> method sets the year for a specified date according to local time. Because <code>setYear()</code> does not set full years (\"year 2000 problem\"), it is no longer used and has been replaced by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> method.</p>"
    },
    "date.todatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/todatestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toDateString()</code></strong> method returns the date portion of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in English in the following format separated by spaces:</p>\n<ol>\n<li>First three letters of the week day name</li>\n<li>First three letters of the month name</li>\n<li>Two digit day of the month, padded on the left a zero if necessary</li>\n<li>Four digit year (at least), padded on the left with zeros if necessary</li>\n</ol>\n<p>E.g. \"Thu Jan 01 1970\".</p>"
    },
    "date.togmtstring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/togmtstring",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>toGMTString()</code></strong> method converts a date to a string, using Internet Greenwich Mean Time (GMT) conventions. The exact format of the value returned by <code>toGMTString()</code> varies according to the platform and browser, in general it should represent a human readable date string.</p>\n<div class=\"note notecard\">\n<p><strong>Note:</strong> <code>toGMTString()</code> is deprecated and should no longer be used. It remains implemented only for backward compatibility; please use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\"><code>toUTCString()</code></a> instead.</p>\n</div>"
    },
    "date.toisostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toisostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toISOString()</code></strong> method returns a string in <em>simplified</em> extended ISO format (<a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>), which is always 24 or 27 characters long (<code><var>YYYY</var>-<var>MM</var>-<var>DD</var>T<var>HH</var>:<var>mm</var>:<var>ss.sss</var>Z</code> or <code><var>±</var><var>YYYYYY</var>-<var>MM</var>-<var>DD</var>T<var>HH</var>:<var>mm</var>:<var>ss.sss</var>Z</code>, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"<code>Z</code>\".</p>"
    },
    "date.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tojson",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toJSON()</code></strong> method returns a string representation of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>"
    },
    "date.tolocaledatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaledatestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleDateString()</code></strong> method returns a string with a language sensitive representation of the date portion of this date. The new <code>locales</code> and <code>options</code> arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the <code>locales</code> and <code>options</code> arguments, the locale used and the form of the string returned are entirely implementation dependent.</p>"
    },
    "date.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language sensitive representation of this date.</p>\n<p>The new <code><var>locales</var></code> and <code><var>options</var></code> arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function.</p>\n<p>In older implementations, which ignore the <code><var>locales</var></code> and <code><var>options</var></code> arguments, the locale used and the form of the string returned are entirely implementation-dependent.</p>"
    },
    "date.tolocaletimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaletimestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleTimeString()</code></strong> method returns a string with a language sensitive representation of the time portion of this date. The new <code>locales</code> and <code>options</code> arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the <code>locales</code> and <code>options</code> arguments, the locale used and the form of the string returned are entirely implementation dependent.</p>"
    },
    "date.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>"
    },
    "date.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>"
    },
    "date.totimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/totimestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toTimeString()</code></strong> method returns the time portion of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in human readable form in English.</p>"
    },
    "date.toutcstring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toutcstring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toUTCString()</code></strong> method converts a date to a string, using the UTC time zone.</p>\n<p>Based on <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">rfc7231</a> and modified according to <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-date.prototype.toutcstring\">ecma-262 toUTCString</a>, it can have negative values in the <a href=\"https://tc39.es/ecma262/#sec-date.prototype.toutcstring\">2021 version</a></p>"
    },
    "date.utc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/utc",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Date.UTC()</code></strong> method accepts parameters similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>"
    },
    "date.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>"
    },
    "decodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuri",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>decodeURI()</strong></code> function decodes a Uniform Resource Identifier (URI) previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> or by a similar routine.</span></p>"
    },
    "decodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>decodeURIComponent()</strong></code> function decodes a Uniform Resource Identifier (URI) component previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent</code></a> or by a similar routine.</p>"
    },
    "encodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuri",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>encodeURI()</strong></code> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).</p>"
    },
    "encodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>encodeURIComponent()</strong></code> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).</p>"
    },
    "error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><code>Error</code> objects are thrown when runtime errors occur. The <code>Error</code> object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.</p>"
    },
    "error.columnnumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/columnnumber",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>columnNumber</strong></code> property contains the column number in the line of the file that raised this error.</p>"
    },
    "error.error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/error",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Error</code></strong> constructor creates an error object.</span></p>"
    },
    "error.filename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/filename",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>fileName</strong></code> property contains the path to the file that raised this error.</p>"
    },
    "error.linenumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/linenumber",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>lineNumber</strong></code> property contains the line number in the file that raised this error.</p>"
    },
    "error.message": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/message",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>message</strong></code> property is a human-readable description of the error.</p>"
    },
    "error.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/name",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>name</strong></code> property represents a name for the type of error. The initial value is \"Error\".</p>"
    },
    "error.stack": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/stack",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong><code>stack</code></strong> property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> objects offer a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.</p>"
    },
    "error.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>toSource()</strong></code> method returns code that could eval to the same error.</p>"
    },
    "error.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> object.</p>"
    },
    "escape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/escape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div class=\"warning notecard\"><strong>Warning:</strong> Although <code>escape()</code> is not strictly deprecated (as in \"removed from the Web standards\"), it is defined in <a href=\"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-additional-ecmascript-features-for-web-browsers\">Annex B</a> of the ECMA-262 standard, whose introduction states:\n<blockquote>… All of the language features and behaviours specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. …<br>\n… Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. …</blockquote>\n</div>\n<p><span class=\"seoSummary\">The <code><strong>escape()</strong></code> function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.</span></p>\n<div class=\"notecard note\">\n<p><strong>Note:</strong> This function was used mostly for URL queries (the part of a URL following <code>?</code>)—<em>not</em> for escaping ordinary String literals, which use the format \"<code>\\x<var>HH</var></code>\". (<code><var>HH</var></code> are two hexadecimal digits, and the form <code>\\x<var>HH</var>\\x<var>HH</var></code> is used for higher-plane Unicode characters.)</p>\n<p>Escaped characters in String literals can be expanded by replacing the <code>\\x</code> with <code>%</code>, then using the <code>decodeURIComponent()</code> function.</p>\n</div>"
    },
    "eval": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/eval",
      "status": [
        "StandardTrack"
      ],
      "doc": "<div class=\"notecard warning\">\n<p><strong>Warning:</strong> Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use <code>eval()</code>. See <a href=\"#Never_use_eval!\">Never use eval()!</a>, below.</p>\n</div>\n<p>The <code><strong>eval()</strong></code> function evaluates JavaScript code represented as a string.</p>"
    },
    "evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>EvalError</code></strong> object indicates an error regarding the global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.</p>"
    },
    "evalerror.evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror/evalerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>EvalError</code></strong> constructor creates a new error regarding the global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.</p>"
    },
    "finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>FinalizationRegistry</code></strong> object lets you request a callback when an object is garbage-collected.</p>"
    },
    "finalizationregistry.finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>FinalizationRegistry</code></strong> constructor creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> object that uses the given callback.</p>"
    },
    "finalizationregistry.register": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/register",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>register()</code> method registers an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instance so that if the object is garbage-collected, the registry's callback may get called.</p>"
    },
    "finalizationregistry.unregister": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/unregister",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>unregister</code> unregisters a target object from a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instance.</p>"
    },
    "float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float32Array</code></strong> typed array represents an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "float32array.float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array/float32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float32Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> object, which is, an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float64Array</code></strong> typed array represents an array of 64-bit floating point numbers (corresponding to the C <code>double</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "float64array.float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array/float64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float64Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a> object, which is, an array of 64-bit floating point numbers (corresponding to the C <code>double</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>Every JavaScript function is actually a <code>Function</code> object. This can be seen with the code <code>(function(){}).constructor === Function</code>, which returns true.</p>"
    },
    "function.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/apply",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>apply()</strong></code> method calls a function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects\">array-like object</a>).</p>"
    },
    "function.arguments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/arguments",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <code><strong><em>function</em>.arguments</strong></code> property refers to an array-like object corresponding to the arguments passed to a function. Use the simple variable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> instead. This property is restricted to non-strict functions.</p>"
    },
    "function.bind": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/bind",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>bind()</strong></code> method creates a new function that, when called, has its <code>this</code> keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</span></p>"
    },
    "function.call": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/call",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>call()</strong></code> method calls a function with a given <code>this</code> value and arguments provided individually.</span></p>"
    },
    "function.caller": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/caller",
      "status": [],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code><var>function</var>.caller</code></strong> property returns the function that invoked the specified function. It returns <code>null</code> for strict, async function and generator function callers.</p>"
    },
    "function.displayname": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/displayname",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong><em>function</em>.displayName</strong></code> property returns the display name of the function.</p>"
    },
    "function.function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/function",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Function</code> constructor</strong> creates a new <code>Function</code> <strong>object</strong>. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\" data-flaw-src=\"{{jsxref(\"eval\")}}\"><code>eval</code></a>. However, unlike eval, the <code>Function</code> constructor creates functions which execute in the global scope only.</span></p>"
    },
    "function.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>length</code></strong> property indicates the number of parameters expected by the function.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Function.length</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "function.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/name",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> object's read-only <strong><code>name</code></strong> property indicates the function's name as specified when it was created, or it may be either <code>anonymous</code> or <code>''</code> (an empty string) for functions created anonymously.</span></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Function.name</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>\n<div class=\"note notecard\">\n<p>Note that in non-standard, pre-ES2015 implementations the <code>configurable</code> attribute was <code>false</code> as well.</p>\n</div>"
    },
    "function.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object. This method is usually called internally by JavaScript and not explicitly in code. You can call <code>toSource()</code> while debugging to examine the contents of an object.</p>"
    },
    "function.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the source code of the function.</p>"
    },
    "generator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Generator</strong></code> object is returned by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator function</a> and it conforms to both the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable protocol</a> and the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\">iterator protocol</a>.</p>"
    },
    "generator.next": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/next",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>next()</code></strong> method returns an object with two properties <code>done</code> and <code>value</code>. You can also provide a parameter to the <code>next</code> method to send a value to the generator.</span></p>"
    },
    "generator.return": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/return",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>return()</code></strong> method returns the given value and finishes the generator.</p>"
    },
    "generator.throw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/throw",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>throw()</code></strong> method resumes the execution of a generator by throwing an error into it and returns an object with two properties <code>done</code> and <code>value</code>.</span></p>"
    },
    "generatorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>GeneratorFunction</code> constructor</strong> creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator function</a> object. In JavaScript, every generator function is actually a <code>GeneratorFunction</code> object.</p>\n<p>Note that <code>GeneratorFunction</code> is not a global object. It could be obtained by evaluating the following code.</p>\n<pre class=\"brush: js notranslate\"><code>Object.getPrototypeOf(function*(){}).constructor\n</code></pre>"
    },
    "globalthis": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/globalthis",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The global <code><strong>globalThis</strong></code> property contains the global <code>this</code> value, which is akin to the global object.</span></p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>globalThis</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "infinity": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/infinity",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global property <code><strong>Infinity</strong></code> is a numeric value representing infinity.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Infinity</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int16Array</code></strong> typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int16array.int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array/int16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int16Array()</code></strong> typed array constructor creates an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int32Array()</code></strong> typed array constructor creates an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int32array.int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array/int32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int32Array()</code></strong> typed array constructor creates an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int8Array</code></strong> typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int8array.int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array/int8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int8Array()</code></strong> constructor creates a typed array of twos-complement 8-bit signed integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <strong><code>InternalError</code> object</strong> indicates an error that occurred internally in the JavaScript engine.</p>\n<p>Example cases are mostly when something is too large, e.g.:</p>\n<ul>\n<li>\"too many switch cases\",</li>\n<li>\"too many parentheses in regular expression\",</li>\n<li>\"array initializer too large\",</li>\n<li>\"too much recursion\".</li>\n</ul>"
    },
    "internalerror.internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror/internalerror",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <strong><code>InternalError()</code></strong> constructor creates an error that indicates an error that occurred internally in the JavaScript engine. For example: \"<strong>InternalError</strong>: too much recursion\".</p>"
    },
    "intl": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p class=\"summary\">The <strong><code>Intl</code></strong> object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The <strong><code>Intl</code></strong> object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.</p>"
    },
    "intl.@@tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/@@tostringtag",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl[@@toStringTag]</code></strong> property has an initial value of \"Intl\".</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Intl[@@toStringTag]</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "intl.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator</code></strong> objects enable language sensitive string comparison.</p>"
    },
    "intl.collator.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/collator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator</code></strong> object is a constructor for collators, objects that enable language sensitive string comparison.</p>"
    },
    "intl.collator.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/compare",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator.prototype.compare()</code></strong> method compares two strings according to the sort order of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\" data-flaw-src=\"{{jsxref(\"Collator\")}}\"><code>Collator</code></a> object.</p>"
    },
    "intl.collator.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and collation options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\" data-flaw-src=\"{{jsxref(\"Collator\")}}\"><code>Collator</code></a> object.</p>"
    },
    "intl.collator.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.</p>"
    },
    "intl.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.DateTimeFormat</code></strong> object is a constructor for objects that enable language-sensitive date and time formatting.</span></p>"
    },
    "intl.datetimeformat.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.DateTimeFormat()</code></strong> constructor for objects that enable language-sensitive date and time formatting.</span></p>"
    },
    "intl.datetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.format()</code></strong> method formats a date according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" data-flaw-src=\"{{jsxref(\"DateTimeFormat\", \"Intl.DateTimeFormat\")}}\"><code>Intl.DateTimeFormat</code></a> object.</p>"
    },
    "intl.datetimeformat.formatrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrange",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.formatRange()</code></strong> formats a date range in the most concise way based on the <strong><code>locale</code></strong> and <code><strong>options</strong></code> provided when instantiating <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" data-flaw-src=\"{{jsxref(\"DateTimeFormat\", \"Intl.DateTimeFormat\")}}\"><code>Intl.DateTimeFormat</code></a> object.</p>"
    },
    "intl.datetimeformat.formatrangetoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrangetoparts",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.formatRangeToParts()</code></strong> method allows locale-specific tokens representing each part of the formatted date range produced by <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" data-flaw=\"link1\">DateTimeFormat</a></code> formatters.</p>"
    },
    "intl.datetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.formatToParts()</code></strong> method allows locale-aware formatting of strings produced by <code>DateTimeFormat</code> formatters.</p>"
    },
    "intl.datetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" data-flaw-src=\"{{jsxref(\"DateTimeFormat\", \"DateTimeFormat\")}}\"><code>DateTimeFormat</code></a> object.</p>"
    },
    "intl.datetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DisplayNames</code></strong> object is a constructor for objects that enables the consistent translation of language, region and script display names.</p>"
    },
    "intl.displaynames.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/displaynames",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DisplayNames()</code></strong> constructor creates objects that enables the consistent translation of language, region and script display names.</p>"
    },
    "intl.displaynames.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/of",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>of</strong></code><strong><code>()</code></strong> method receives a code and returns a string based on the locale and options provided when instantiating Intl.DisplayNames.</p>"
    },
    "intl.displaynames.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Intl.DisplayNames.prototype.resolvedOptions()</strong></code> method returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\" data-flaw-src=\"{{jsxref(\"DisplayNames\")}}\"><code>DisplayNames</code></a> object.</p>"
    },
    "intl.displaynames.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DisplayNames.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.getcanonicallocales": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/getcanonicallocales",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.getCanonicalLocales()</code></strong> method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.</p>"
    },
    "intl.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat</code></strong> object is a constructor for objects that enable language-sensitive list formatting.</p>"
    },
    "intl.listformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/format",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>format()</code></strong> method returns a string with a language-specific representation of the list.</p>"
    },
    "intl.listformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/formattoparts",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat.prototype.formatToParts()</code></strong> method returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects representing the different components that can be used to format a list of values in a locale-aware fashion.</p>"
    },
    "intl.listformat.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/listformat",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat()</code></strong> constructor creates objects that enable language-sensitive list formatting.</p>"
    },
    "intl.listformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/resolvedoptions",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Intl.ListFormat.prototype.resolvedOptions()</strong></code> method returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\" data-flaw-src=\"{{jsxref(\"ListFormat\")}}\"><code>ListFormat</code></a> object.</p>"
    },
    "intl.listformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/supportedlocalesof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale</code></strong> object is a standard built-in property of the Intl object that represents a Unicode locale identifier.</span></p>"
    },
    "intl.locale.basename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/basename",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.baseName</code></strong> property returns a substring of the <code>Locale</code>'s string representation, containing core information about the <code>Locale</code>.</p>"
    },
    "intl.locale.calendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/calendar",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.calendar</code></strong> property is an accessor property which returns the type of calendar used in the <code>Locale</code>.</p>"
    },
    "intl.locale.casefirst": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/casefirst",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.caseFirst</code></strong> property is an accessor property that returns whether case is taken into account for the locale's collation rules.</span></p>"
    },
    "intl.locale.collation": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/collation",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.collation</code></strong> property is an accessor property that returns the <a href=\"https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation\">collation type</a> for the <code>Locale</code>, which is used to order strings according to the locale's rules.</span></p>"
    },
    "intl.locale.hourcycle": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/hourcycle",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.hourCycle</code></strong> property is an accessor property that returns the time keeping format convention used by the locale.</p>"
    },
    "intl.locale.language": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/language",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.language</code></strong> property is an accessor property that returns the language associated with the locale.</span></p>"
    },
    "intl.locale.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/locale",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale</code></strong> constructor is a standard built-in property of the Intl object that represents a Unicode locale identifier.</span></p>"
    },
    "intl.locale.maximize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/maximize",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.maximize()</code></strong> method gets the most likely values for the language, script, and region of the locale based on existing values.</span></p>"
    },
    "intl.locale.minimize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/minimize",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.minimize()</code></strong> method attempts to remove information about the locale that would be added by calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize\" data-flaw-src=\"{{jsxref(\"Locale/maximize\", \"Locale.maximize()\")}}\"><code>Locale.maximize()</code></a>.</span></p>"
    },
    "intl.locale.numberingsystem": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numberingsystem",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.numberingSystem</code></strong> property is an accessor property that returns the <a href=\"https://en.wikipedia.org/wiki/Numeral_system\">numeral system</a> used by the locale.</span></p>"
    },
    "intl.locale.numeric": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numeric",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.numeric</code></strong> property is an accessor property that returns whether the locale has special collation handling for numeric characters.</span></p>"
    },
    "intl.locale.region": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/region",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.region</code></strong> property is an accessor property that returns the region of the world (usually a country) associated with the locale.</p>"
    },
    "intl.locale.script": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/script",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.script</code></strong> property is an accessor property which returns the script used for writing the particular language used in the locale.</span></p>"
    },
    "intl.locale.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.toString()</code></strong> returns the Locale's full <a href=\"https://www.unicode.org/reports/tr35/#Unicode_locale_identifier\">locale identifier string</a>.</span></p>"
    },
    "intl.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat</code></strong> object is a constructor for objects that enable language sensitive number formatting.</p>"
    },
    "intl.numberformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/format",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat.prototype.format()</code></strong> method formats a number according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\" data-flaw-src=\"{{jsxref(\"NumberFormat\")}}\"><code>NumberFormat</code></a> object.</p>"
    },
    "intl.numberformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formattoparts",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Numberformat.prototype.formatToParts()</code></strong> method allows locale-aware formatting of strings produced by <code>NumberFormat</code> formatters.</p>"
    },
    "intl.numberformat.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/numberformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat()</code></strong> constructor creates objects that enable language sensitive number formatting.</p>"
    },
    "intl.numberformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\" data-flaw-src=\"{{jsxref(\"NumberFormat\")}}\"><code>NumberFormat</code></a> object.</p>"
    },
    "intl.numberformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules</code></strong> object enables plural-sensitive formatting and plural-related language rules.</p>"
    },
    "intl.pluralrules.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\" data-flaw-src=\"{{jsxref(\"PluralRules\", \"Intl.PluralRules\")}}\"><code>Intl.PluralRules</code></a> objects.</p>"
    },
    "intl.pluralrules.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\" data-flaw-src=\"{{jsxref(\"PluralRules\")}}\"><code>PluralRules</code></a> object.</p>"
    },
    "intl.pluralrules.select": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/select",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules.prototype.select</code></strong> method returns a String indicating which plural rule to use for locale-aware formatting.</p>"
    },
    "intl.pluralrules.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat</code></strong> object enables language-sensitive relative time formatting.</p>"
    },
    "intl.relativetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat.prototype.format()</code></strong> method formats a <code>value</code> and <code>unit</code> according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> object.</p>"
    },
    "intl.relativetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>Intl.RelativeTimeFormat.prototype.formatToParts()</code> method returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects representing the relative time format in parts that can be used for custom locale-aware formatting.</p>"
    },
    "intl.relativetimeformat.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> objects.</p>"
    },
    "intl.relativetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" data-flaw-src=\"{{jsxref(\"RelativeTimeFormat\")}}\"><code>RelativeTimeFormat</code></a> object.</p>"
    },
    "intl.relativetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.segmenter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter",
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Segmenter</code></strong> object is a constructor for segmenters, objects that enable language sensitive string splitting.</span></p>"
    },
    "intl.segmenter.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/resolvedoptions",
      "doc": "<p>Returns a new object with properties reflecting the locale and granularity options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object.</p>"
    },
    "intl.segmenter.segment": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment",
      "doc": "<p>Getter function that segments a string according to the locale and granularity of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object.</p>"
    },
    "intl.segmenter.segmentdata": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segmentdata",
      "doc": ""
    },
    "intl.segmenter.segments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segments",
      "doc": "<p>[Placeholder: See https://github.com/mdn/sprints/issues/3876]</p>"
    },
    "intl.segmenter.segments.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segments/@@iterator",
      "doc": "<p>[Placeholder: See https://github.com/mdn/sprints/issues/3876]</p>"
    },
    "intl.segmenter.segments.containing": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segments/containing",
      "doc": "<p>[Placeholder: See https://github.com/mdn/sprints/issues/3876]</p>"
    },
    "intl.segmenter.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/supportedlocalesof",
      "doc": "<p>Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.</p>"
    },
    "isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isfinite",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global <code><strong>isFinite()</strong></code> function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.</p>"
    },
    "isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isnan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>isNaN()</strong></code> function determines whether a value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or not. Note, coercion inside the <code>isNaN</code> function has <a href=\"#Description\">interesting</a> rules; you may alternatively want to use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>, as defined in ECMAScript 2015.</p>"
    },
    "json": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>JSON</code></strong> object contains methods for parsing <a class=\"external\" href=\"https://json.org/\">JavaScript Object Notation</a> (<a href=\"$MDN_URL$/Glossary/JSON\">JSON</a>) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.</span></p>"
    },
    "json.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/parse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>JSON.parse()</code></strong> method parses a JSON string, constructing the JavaScript value or object described by the string. An optional <strong>reviver</strong> function can be provided to perform a transformation on the resulting object before it is returned.</span></p>"
    },
    "json.stringify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/stringify",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>JSON.stringify()</code></strong> method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</p>"
    },
    "map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Map</code></strong> object holds key-value pairs and remembers the original insertion order of the keys.</span> Any value (both objects and <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a>) may be used as either a key or a value.</p>"
    },
    "map.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p class=\"seoSummary\">The initial value of the <strong><code>@@iterator</code></strong> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>entries</code></a> method.</p>"
    },
    "map.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Map[@@species]</code></strong> accessor property returns the <code>Map</code> constructor.</p>"
    },
    "map.@@tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@tostringtag",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Map[@@toStringTag]</code></strong> property has an initial value of \"Map\".</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Map.prototype[@@toStringTag]</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "map.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/clear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>clear()</code></strong> method removes all elements from a <code>Map</code> object.</p>"
    },
    "map.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <code>Map</code> object by key.</p>"
    },
    "map.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>entries()</code></strong> method returns a new <strong><a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></strong> object that contains the <code>[key, value]</code> pairs for each element in the <code>Map</code> object in insertion order.</p>"
    },
    "map.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>forEach()</code></strong> method executes a provided function once per each key/value pair in the <code>Map</code> object, in insertion order.</span></p>"
    },
    "map.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>get()</code></strong> method returns a specified element from a <code>Map</code> object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the <code>Map</code> object.</p>"
    },
    "map.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the specified key exists or not.</p>"
    },
    "map.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>keys()</code></strong> method returns a new <strong><a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></strong> object that contains the keys for each element in the <code>Map</code> object in insertion order.</p>"
    },
    "map.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Map()</code> constructor</strong> creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> objects.</p>"
    },
    "map.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>set()</code></strong> method adds or updates an element with a specified key and a value to a <code>Map</code> object.</p>"
    },
    "map.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/size",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>size</code></strong> accessor property returns the number of elements in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> object.</p>"
    },
    "map.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new <strong><a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></strong> object that contains the values for each element in the <code>Map</code> object in insertion order.</p>"
    },
    "math": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math",
      "doc": "<p><strong><code>Math</code></strong> is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.</p>\n<p><code>Math</code> works with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> type. It doesn't work with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>.</p>"
    },
    "math.abs": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/abs",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Math.abs()</code></strong> function returns the absolute value of a number</span>, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.abs</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mrow><mo stretchy=\"false\">|</mo><mi>x</mi><mo stretchy=\"false\">|</mo></mrow><mo>=</mo><mrow><mo>{</mo><mtable columnalign=\"left left\"><mtr><mtd><mi>x</mi></mtd><mtd><mtext>if</mtext><mspace width=\"1em\"></mspace><mi>x</mi><mo>&gt;</mo><mn>0</mn></mtd></mtr><mtr><mtd><mi>0</mi></mtd><mtd><mtext>if</mtext><mspace width=\"1em\"></mspace><mi>x</mi><mo>=</mo><mn>0</mn></mtd></mtr><mtr><mtd><mo>-</mo><mi>x</mi></mtd><mtd><mtext>if</mtext><mspace width=\"1em\"></mspace><mi>x</mi><mo>&lt;</mo><mn>0</mn></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"TeX\">{\\mathtt{\\operatorname{Math.abs}(z)}} = {|z|} = \\begin{cases} x &amp; \\text{if} \\quad x \\geq 0 \\\\ x &amp; \\text{if} \\quad x &lt; 0 \\end{cases} </annotation></semantics></math></p>"
    },
    "math.acos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acos",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.acos()</code></strong> function returns the arccosine (in radians) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>-</mo><mn>1</mn></mrow><mo>;</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"thickmathspace\"></mspace><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.acos</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arccos</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo>;</mo><mi>π</mi><mo stretchy=\"false\">]</mo><mspace width=\"thinmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">cos</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1};1],\\;\\mathtt{\\operatorname{Math.acos}(x)} = \\arccos(x) = \\text{ the unique } \\; y \\in [0; \\pi] \\, \\text{such that} \\; \\cos(y) = x</annotation></semantics></math></p>"
    },
    "math.acosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acosh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.acosh()</code></strong> function returns the hyperbolic arc-cosine of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>1</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.acosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"thinmathspace\">arcosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>≥</mo><mn>0</mn><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\geq 1, \\mathtt{\\operatorname{Math.acosh}(x)} = \\operatorname{arcosh}(x) = \\text{ the unique } \\; y \\geq 0 \\; \\text{such that} \\; \\cosh(y) = x</annotation></semantics></math></p>"
    },
    "math.asin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.asin()</code></strong> function returns the arcsine (in radians) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>-</mo><mn>1</mn></mrow><mo>;</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"thickmathspace\"></mspace><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.asin</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arcsin</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>;</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mspace width=\"thinmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">sin</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1};1],\\;\\mathtt{\\operatorname{Math.asin}(x)} = \\arcsin(x) = \\text{ the unique } \\; y \\in \\left[-\\frac{\\pi}{2}; \\frac{\\pi}{2}\\right] \\, \\text{such that} \\; \\sin(y) = x</annotation></semantics></math></p>"
    },
    "math.asinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asinh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.asinh()</code></strong> function returns the hyperbolic arcsine of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.asinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"thinmathspace\">arsinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.asinh}(x)} = \\operatorname{arsinh}(x) = \\text{ the unique } \\; y \\; \\text{such that} \\; \\sinh(y) = x</annotation></semantics></math></p>"
    },
    "math.atan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.atan()</code></strong> function returns the arctangent (in radians) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.atan</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arctan</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>;</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mspace width=\"thinmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">tan</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.atan}(x)} = \\arctan(x) = \\text{ the unique } \\; y \\in \\left[-\\frac{\\pi}{2}; \\frac{\\pi}{2}\\right] \\, \\text{such that} \\; \\tan(y) = x</annotation></semantics></math></p>"
    },
    "math.atan2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.atan2()</code></strong> function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for <code>Math.atan2(y,x)</code>.</p>"
    },
    "math.atanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atanh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.atanh()</code></strong> function returns the hyperbolic arctangent of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mrow><mo>(</mo><mrow><mo>-</mo><mn>1</mn><mo>,</mo><mn>1</mn></mrow><mo>)</mo></mrow><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.atanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"thinmathspace\">arctanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in \\left( -1, 1 \\right), \\mathtt{\\operatorname{Math.atanh}(x)} = \\operatorname{arctanh}(x) = \\text{ the unique } \\; y \\; \\text{such that} \\; \\tanh(y) = x</annotation></semantics></math></p>"
    },
    "math.cbrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cbrt",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.cbrt()</code></strong> function returns the cube root of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo>.</mo><mi>c</mi><mi>b</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mroot><mi>x</mi><mn>3</mn></mroot><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mi>y</mi><mn>3</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{Math.cbrt(x)} = \\sqrt[3]{x} = \\text{the unique} \\; y \\; \\text{such that} \\; y^3 = x</annotation></semantics></math></p>"
    },
    "math.ceil": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ceil",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.ceil()</code></strong> function always rounds a number up to the next largest integer.</p>\n<p><strong>Note: </strong><code>Math.ceil(<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>)</code> returns integer 0 and does not give a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> error.</p>"
    },
    "math.clz32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/clz32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.clz32()</code></strong> function returns the number of leading zero bits in the 32-bit binary representation of a number.</p>"
    },
    "math.cos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cos",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Math.cos()</code></strong> static function returns the <a title=\"cosine\" href=\"https://en.wikipedia.org/wiki/cosine\">cosine</a> of the specified angle, which must be specified in <a title=\"radians\" href=\"https://en.wikipedia.org/wiki/radians\">radians</a>. This value is </span><math style=\"display: inline;\"> <mstyle displaystyle=\"true\"> <mfrac> <msub> <mrow> <mtext>length</mtext> </mrow> <mrow> <mrow> <mtext>adjacent</mtext> </mrow> </mrow> </msub> <msub> <mrow> <mtext>length</mtext> </mrow> <mrow> <mrow> <mtext>hypotenuse</mtext> </mrow> </mrow> </msub> </mfrac> </mstyle> </math>.</p>"
    },
    "math.cosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cosh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.cosh()</code></strong> function returns the hyperbolic cosine of a number, that can be expressed using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">constant e</a>:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.cosh(x)</mo></mstyle><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cosh(x)}} = \\frac{e^x + e^{-x}}{2}</annotation></semantics></math></p>"
    },
    "math.e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/e",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.E</code></strong> property represents the base of natural logarithms, e, approximately 2.718.</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.E</mi></mstyle><mo>=</mo><mi>e</mi><mo>≈</mo><mn>2.718</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.E}} = e \\approx 2.718</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.E</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.exp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/exp",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.exp()</code></strong> function returns <code>e<sup>x</sup></code>, where <code>x</code> is the argument, and <code>e</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">Euler's number (also known as Napier's constant)</a>, the base of the natural logarithms.</p>"
    },
    "math.expm1": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/expm1",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.expm1()</code></strong> function returns <code>e<sup>x</sup> - 1</code>, where <code>x</code> is the argument, and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a> the base of the natural logarithms.</p>"
    },
    "math.floor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/floor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.floor()</code></strong> function returns the largest integer less than or equal to a given number.</p>"
    },
    "math.fround": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/fround",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p class=\"seoSummary\">The <strong><code>Math.fround()</code></strong> function returns the nearest <a title=\"32-bit single precision\" href=\"https://en.wikipedia.org/wiki/Single-precision floating-point format\">32-bit single precision</a> float representation of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>.</p>"
    },
    "math.hypot": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/hypot",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.hypot()</code></strong> function returns the square root of the sum of squares of its arguments, that is:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.hypot</mo><mo stretchy=\"false\">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>v</mi><mi>i</mi><mn>2</mn></msubsup></mrow></msqrt><mo>=</mo><msqrt><mrow><msubsup><mi>v</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>v</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>…</mo><mo>+</mo><msubsup><mi>v</mi><mi>n</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.hypot}(v_1, v_2, \\dots, v_n)} = \\sqrt{\\sum_{i=1}^n v_i^2} = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2}</annotation></semantics></math></p>"
    },
    "math.imul": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/imul",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.imul()</code></strong> function returns the result of the C-like 32-bit multiplication of the two parameters.</p>"
    },
    "math.ln10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln10",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LN10</code></strong> property represents the natural logarithm of 10, approximately 2.302:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LN10</mi></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>10</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>2.302</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LN10}} = \\ln(10) \\approx 2.302</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LN10</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.ln2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LN2</code></strong> property represents the natural logarithm of 2, approximately 0.693:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LN2</mi></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.693</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LN2}} = \\ln(2) \\approx 0.693</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LN2</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.log": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log()</code></strong> function returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>e</code></a>) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mi>e</mi><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0, \\mathtt{\\operatorname{Math.log}(x)} = \\ln(x) = \\text{the unique} \\; y \\; \\text{such that} \\; e^y = x</annotation></semantics></math></p>\n<p>The JavaScript <strong><code>Math.log()</code></strong> function is equivalent to <em>ln(x)</em> in mathematics.</p>"
    },
    "math.log10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log10()</code></strong> function returns the base 10 logarithm of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log10</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mn>10</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0, \\mathtt{\\operatorname{Math.log10}(x)} = \\log_10(x) = \\text{the unique} \\; y \\; \\text{such that} \\; 10^y = x</annotation></semantics></math></p>"
    },
    "math.log10e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10e",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LOG10E</code></strong> property represents the base 10 logarithm of e, approximately 0.434:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LOG10E</mi></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.434</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LOG10E}} = \\log_10(e) \\approx 0.434</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LOG10E</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.log1p": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log1p",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log1p()</code></strong> function returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>e</code></a>) of 1 + a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mo>-</mo><mn>1</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log1p</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"TeX\">\\forall x &gt; -1, \\mathtt{\\operatorname{Math.log1p}(x)} = \\ln(1 + x)</annotation></semantics></math></p>"
    },
    "math.log2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log2()</code></strong> function returns the base 2 logarithm of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log2</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mn>2</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0, \\mathtt{\\operatorname{Math.log2}(x)} = \\log_2(x) = \\text{the unique} \\; y \\; \\text{such that} \\; 2^y = x</annotation></semantics></math></p>"
    },
    "math.log2e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2e",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LOG2E</code></strong> property represents the base 2 logarithm of e, approximately 1.442:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LOG2E</mi></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>1.442</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LOG2E}} = \\log_2(e) \\approx 1.442</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LOG2E</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.max": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/max",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Math.max()</code></strong> function returns the largest of the zero or more numbers given as input parameters.</span></p>"
    },
    "math.min": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/min",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static function <strong><code>Math.min()</code></strong> returns the lowest-valued number passed into it, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> if any parameter isn't a number and can't be converted into one.</span></p>"
    },
    "math.pi": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pi",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.PI</code></strong> property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.PI</mi></mstyle><mo>=</mo><mi>π</mi><mo>≈</mo><mn>3.14159</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.PI}} = \\pi \\approx 3.14159</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.PI</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.pow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pow",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.pow()</code></strong> function returns the <code><var>base</var></code> to the <code><var>exponent</var></code> power, that is, <code>base<sup>exponent</sup></code>.</p>"
    },
    "math.random": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/random",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.random()</code></strong> function returns a floating-point, pseudo-random number in the range 0 to less than 1 (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.</p>\n<div class=\"note notecard\">\n<p><code>Math.random()</code> <em>does not</em> provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the <a href=\"$MDN_URL$/Web/API/Crypto/getRandomValues\"><code>window.crypto.getRandomValues()</code></a> method.</p>\n</div>"
    },
    "math.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/round",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.round()</code></strong> function returns the value of a number rounded to the nearest integer.</p>"
    },
    "math.sign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sign",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sign()</code></strong> function returns either a <strong>positive</strong> or <strong>negative</strong> +/- 1, indicating the sign of a number passed into the argument. If the number passed into <code>Math.sign()</code> is 0, it will return a +/- 0. Note that if the number is positive, an explicit (+) will <strong>not</strong> be returned.</p>"
    },
    "math.sin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sin()</code></strong> function returns the sine of a number.</p>"
    },
    "math.sinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sinh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sinh()</code></strong> function returns the hyperbolic sine of a number, that can be expressed using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">constant e</a>:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.sinh(x)</mo></mstyle><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>-</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.sinh(x)}} = \\frac{e^x - e^{-x}}{2}</annotation></semantics></math></p>"
    },
    "math.sqrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sqrt()</code></strong> function returns the square root of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo>.</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msqrt><mi>x</mi></msqrt><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>≥</mo><mn>0</mn><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\geq 0, \\mathtt{Math.sqrt(x)} = \\sqrt{x} = \\text{the unique} \\; y \\geq 0 \\; \\text{such that} \\; y^2 = x</annotation></semantics></math></p>"
    },
    "math.sqrt2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.SQRT2</code></strong> property represents the square root of 2, approximately 1.414:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.SQRT2</mi></mstyle><mo>=</mo><msqrt><mn>2</mn></msqrt><mo>≈</mo><mn>1.414</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.SQRT2}} = \\sqrt{2} \\approx 1.414</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.SQRT2</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.tan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.tan()</code></strong> function returns the tangent of a number.</p>"
    },
    "math.tanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tanh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.tanh()</code></strong> function returns the hyperbolic tangent of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mi>x</mi><mo>=</mo><mfrac><mrow><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mi>x</mi></mrow><mrow><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>-</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>-</mo><mn>1</mn></mrow><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"TeX\">\\tanh x = \\frac{\\sinh x}{\\cosh x} = \\frac {e^x - e^{-x}} {e^x + e^{-x}} = \\frac{e^{2x} - 1}{e^{2x}+1}</annotation></semantics></math></p>"
    },
    "math.trunc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/trunc",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.trunc()</code></strong> function returns the integer part of a number by removing any fractional digits.</p>"
    },
    "nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/nan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global <code><strong>NaN</strong></code> property is a value representing Not-A-Number.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>NaN</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "null": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/null",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The value <code>null</code> represents the intentional absence of any object value. It is one of JavaScript's <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> and is treated as <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> for boolean operations.</p>"
    },
    "number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number",
      "status": [
        "StandardTrack"
      ],
      "doc": "<div><strong><code>Number</code></strong> is a <a href=\"$MDN_URL$/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript\">primitive wrapper object</a> used to represent and manipulate numbers like <code>37</code> or <code>-9.25</code>.</div>\n<p>The <strong><code>Number</code></strong> constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the<strong><code>Number()</code> function</strong>.</p>\n<p>The JavaScript <strong>Number</strong> type is a <a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic\">double-precision 64-bit binary format IEEE 754</a> value, like <code>double</code> in Java or C#. This means it can represent fractional values, but there are some limits to what it can store. A Number only keeps about 17 decimal places of precision; arithmetic is subject to <a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding\">rounding</a>. The largest value a Number can hold is about 1.8×10<sup>308</sup>. Numbers beyond that are replaced with the special Number constant <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>.</p>\n<p>A number literal like <code>37</code> in JavaScript code is a floating-point value, not an integer. There is no separate integer type in common everyday use. (JavaScript now has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> type, but it was not designed to replace Number for everyday uses. <code>37</code> is still a Number, not a BigInt.)</p>\n<p>Number may also be expressed in literal forms like <code>0b101</code>, <code>0o13</code>, <code>0x0A</code>. Learn more on numeric <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#Numeric_literals\">lexical grammar here</a>.</p>"
    },
    "number.epsilon": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/epsilon",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.EPSILON</code></strong> property represents the difference between 1 and the smallest floating point number greater than 1.</p>\n<p>You do not have to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to access this static property (use <code>Number.EPSILON</code>).</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Number.EPSILON</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "number.isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isfinite",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Number.isFinite()</code></strong> method determines whether the passed value is a finite number — that is, it checks that a number is neither positive nor negative <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a>, since JavaScript has both.</span></p>"
    },
    "number.isinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isinteger",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.isInteger()</code></strong> method determines whether the passed value is an integer.</p>"
    },
    "number.isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isnan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.isNaN()</code></strong> method determines whether the passed value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> and its type is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>. It is a more robust version of the original, global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN()</code></a>.</p>"
    },
    "number.issafeinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/issafeinteger",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.isSafeInteger()</code></strong> method determines whether the provided value is a number that is a <dfn>safe integer</dfn>.</p>\n<p>A safe integer is an integer that</p>\n<ul>\n<li>can be exactly represented as an IEEE-754 double precision number, and</li>\n<li>whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.</li>\n</ul>\n<p>For example, <code>2<sup>53</sup> - 1</code> is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, <code>2<sup>53</sup></code> is <em>not</em> a safe integer: it can be exactly represented in IEEE-754, but the integer <code>2<sup>53</sup> + 1</code> can't be directly represented in IEEE-754 but instead rounds to <code>2<sup>53</sup></code> under round-to-nearest and round-to-zero rounding. The safe integers consist of all integers from <code>-(2<sup>53</sup> - 1)</code> inclusive to <code>2<sup>53</sup> - 1</code> inclusive (± <code>9007199254740991</code> or ± 9,007,199,254,740,991).</p>\n<p>Handling values larger or smaller than ~9 quadrillion with full precision requires using an <a href=\"https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic\">arbitrary precision arithmetic library</a>. See <a href=\"http://floating-point-gui.de/\">What Every Programmer Needs to Know about Floating Point Arithmetic</a> for more information on floating point representations of numbers.</p>\n<p>For larger integers, consider using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> type.</p>"
    },
    "number.nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/nan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.NaN</code></strong> property represents Not-A-Number. Equivalent of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</p>\n<p>You do not have to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to access this static property (use <code>Number.NaN</code>).</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Number.NaN</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "number.number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/number",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number()</code> constructor</strong> creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>"
    },
    "number.parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Number.parseFloat()</code></strong> method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</span></p>"
    },
    "number.parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parseint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.parseInt()</code></strong> method parses a string argument and returns an integer of the specified radix or base.</p>"
    },
    "number.toexponential": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toexponential",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toExponential()</code></strong> method returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in exponential notation.</p>"
    },
    "number.tofixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tofixed",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toFixed()</code></strong> method formats a number using fixed-point notation.</p>"
    },
    "number.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this number.</p>"
    },
    "number.toprecision": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toprecision",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toPrecision()</code></strong> method returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to the specified precision.</p>"
    },
    "number.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>"
    },
    "number.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>"
    },
    "number.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the wrapped primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>"
    },
    "object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object</strong></code> class represents one of <a href=\"$MDN_URL$/Web/JavaScript/Data_structures\">JavaScript's data types</a>. It is used to store various keyed collections and more complex entities. Objects can be created using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a> constructor or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>.</p>"
    },
    "object.assign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/assign",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Object.assign()</code></strong> method copies all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\">enumerable</a> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">own properties</a> from one or more <em>source objects</em> to a <em>target object</em>. It returns the target object.</span></p>"
    },
    "object.constructor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/constructor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>constructor</code></strong> property returns a reference to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> constructor function that created the instance object. Note that the value of this property is a reference to <em>the function itself</em>, not a string containing the function's name.</p>\n<p>The value is only read-only for primitive values such as <code>1</code>, <code>true</code>, and <code>\"test\"</code>.</p>"
    },
    "object.create": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/create",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.create()</strong></code> method creates a new object, using an existing object as the prototype of the newly created object.</p>"
    },
    "object.defineproperties": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperties",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.defineProperties()</code></strong> method defines new or modifies existing properties directly on an object, returning the object.</p>"
    },
    "object.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static method <code><strong>Object.defineProperty()</strong></code> defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</p>"
    },
    "object.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.entries()</strong></code> method returns an array of a given object's own enumerable string-keyed property <code>[<var>key</var>, <var>value</var>]</code> pairs, in the same order as that provided by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> loop. (The only important difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well). </p>\n<p>The order of the array returned by <code><strong>Object.entries()</strong></code> does not depend on how an object is defined. If there is a need for certain ordering, then the array should be sorted first, like <code>Object.entries(obj).sort((a, b) =&gt; b[0].localeCompare(a[0]));</code>.</p>"
    },
    "object.freeze": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/freeze",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.freeze()</strong></code> method <strong>freezes</strong> an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. <code>freeze()</code> returns the same object that was passed in.</p>"
    },
    "object.fromentries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/fromentries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.fromEntries()</strong></code> method transforms a list of key-value pairs into an object.</p>"
    },
    "object.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getOwnPropertyDescriptor()</code></strong> method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.</p>"
    },
    "object.getownpropertydescriptors": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptors",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.getOwnPropertyDescriptors()</strong></code> method returns all own property descriptors of a given object.</p>"
    },
    "object.getownpropertynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertynames",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getOwnPropertyNames()</code></strong> method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.</p>"
    },
    "object.getownpropertysymbols": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertysymbols",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getOwnPropertySymbols()</code></strong> method returns an array of all symbol properties found directly upon a given object.</p>"
    },
    "object.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getPrototypeOf()</code></strong> method returns the prototype (i.e. the value of the internal <code>[[Prototype]]</code> property) of the specified object.</p>"
    },
    "object.hasownproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/hasownproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>hasOwnProperty()</code></strong> method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).</p>"
    },
    "object.is": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/is",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.is()</code></strong> method determines whether two values are <a href=\"$MDN_URL$/Web/JavaScript/Equality_comparisons_and_sameness\">the same value</a>.</p>"
    },
    "object.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isextensible",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.isExtensible()</code></strong> method determines if an object is extensible (whether it can have new properties added to it).</p>"
    },
    "object.isfrozen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isfrozen",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.isFrozen()</code></strong> determines if an object is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/freeze\">frozen</a>.</p>"
    },
    "object.isprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>isPrototypeOf()</strong></code> method checks if an object exists in another object's prototype chain.</p>\n<div class=\"note notecard\">\n<p><code>isPrototypeOf()</code> differs from the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator. In the expression \"<code>object instanceof AFunction</code>\", the <code>object</code> prototype chain is checked against <code>AFunction.prototype</code>, not against <code>AFunction</code> itself.</p>\n</div>"
    },
    "object.issealed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/issealed",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.isSealed()</code></strong> method determines if an object is sealed.</p>"
    },
    "object.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>Object.keys()</strong></code> method returns an array of a given object's own enumerable property <strong>names</strong>, iterated in the same order that a normal loop would.</span></p>"
    },
    "object.object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/object",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object</code> constructor</strong> creates an object wrapper for the given value.</p>\n<ul>\n<li>If the value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, it will create and return an empty object.</li>\n<li>Otherwise, it will return an object of a Type that corresponds to the given value.</li>\n<li>If the value is an object already, it will return the value.</li>\n</ul>\n<p>When called in a non-constructor context, <code>Object</code> behaves identically to <code>new Object()</code>.</p>"
    },
    "object.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.preventExtensions()</code></strong> method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).</p>"
    },
    "object.propertyisenumerable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/propertyisenumerable",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>propertyIsEnumerable()</strong></code> method returns a Boolean indicating whether the specified property is enumerable and is the object's own property.</p>"
    },
    "object.proto": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/proto",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div><div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div>\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong> Changing the <code>[[Prototype]]</code> of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in <strong><em>every</em></strong> browser and JavaScript engine. The effects on the performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in <code>obj.__proto__ = ...</code> statements, but may extend to <strong><em>any</em></strong> code that has access to <strong><em>any</em></strong> object whose <code>[[Prototype]]</code> has been altered. If you care about performance you should avoid setting the <code>[[Prototype]]</code> of an object. Instead, create a new object with the desired <code>[[Prototype]]</code> using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.</p>\n</div>\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong> While <code>Object.prototype.__proto__</code> is supported today in most browsers, its existence and exact behavior has only been standardized in the ECMAScript 2015 specification as a legacy feature to ensure compatibility for web browsers. For better support, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a> instead.</p>\n</div>\n</div>\n<p>The <code>__proto__</code> property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\" data-flaw-src=\"{{JSxRef(\"Object.prototype\")}}\"><code>Object.prototype</code></a> is an accessor property (a getter function and a setter function) that exposes the internal <code>[[Prototype]]</code> (either an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>) of the object through which it is accessed.</p>\n<p>The use of <code>__proto__</code> is controversial and discouraged. It was never originally included in the ECMAScript language spec, but modern browsers implemented it anyway. Only recently was the <code>__proto__</code> property standardized by the ECMAScript 2015 specification for compatibility with web browsers, so it will be supported into the future. It is deprecated in favor of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\"><code>Reflect.getPrototypeOf</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\"><code>Reflect.setPrototypeOf</code></a> (though still, setting the <code>[[Prototype]]</code> of an object is a slow operation that should be avoided if performance is a concern).</p>\n<p>The <code>__proto__</code> property can also be used in an object literal definition to set the object <code>[[Prototype]]</code> on creation, as an alternative to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. See: <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>.</p>"
    },
    "object.seal": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/seal",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.seal()</strong></code> method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.</p>"
    },
    "object.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.setPrototypeOf()</strong></code> method sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object to another object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>.</p>\n<div class=\"warning notecard\">\n<p><strong>Warning:</strong> Changing the <code>[[Prototype]]</code> of an object is, by the nature of <a href=\"https://mathiasbynens.be/notes/prototypes\">how modern JavaScript engines optimize property accesses</a>, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in the <code>Object.setPrototypeOf(...)</code> statement, but may extend to <strong><em>any</em></strong> code that has access to any object whose <code>[[Prototype]]</code> has been altered.</p>\n<p>Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the <code>[[Prototype]]</code> of an object. Instead, create a new object with the desired <code>[[Prototype]]</code> using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.</p>\n</div>"
    },
    "object.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toLocaleString()</strong></code> method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.</p>"
    },
    "object.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tosource",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>"
    },
    "object.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the object.</p>"
    },
    "object.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of the specified object.</p>"
    },
    "object.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>Object.values()</strong></code> method returns an array of a given object's own enumerable property values, in the same order as that provided by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> loop. (The only difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well.)</span></p>"
    },
    "parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>parseFloat()</strong></code> function parses an argument (converting it to a string first if needed) and returns a floating point number.</span></p>"
    },
    "parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parseint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>parseInt()</strong></code> function parses a string argument and returns an integer of the specified <a href=\"https://en.wikipedia.org/wiki/Radix\">radix</a> (the base in mathematical numeral systems).</p>"
    },
    "promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</p>\n<div class=\"notecard note\"><h4 id=\"Note\">Note:</h4>This feature is available in <a href=\"$MDN_URL$/Web/API/Web_Workers_API\">Web Workers</a>.</div>\n<p>To learn about the way promises work and how you can use them, we advise you to read <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises\">Using promises</a> first.</p>"
    },
    "promise.all": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/all",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise.all()</code></strong> method takes an iterable of promises as an input, and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves to an array of the results of the input promises. This returned promise will resolve when all of the input's promises have resolved, or if the input iterable contains no promises. It rejects immediately upon any of the input promises rejecting or non-promises throwing an error, and will reject with this first rejection message / error.</p>"
    },
    "promise.allsettled": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/allsettled",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Promise.allSettled()</strong></code> method returns a promise that resolves after all of the given promises have either fulfilled or rejected, with an array of objects that each describes the outcome of each promise.</p>\n<p>It is typically used when you have multiple asynchronous tasks that are not dependent on one another to complete successfully, or you'd always like to know the result of each promise.</p>\n<p>In comparison, the Promise returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a> may be more appropriate if the tasks are dependent on each other / if you'd like to immediately reject upon any of them rejecting.</p>"
    },
    "promise.any": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/any",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><code>Promise.any()</code> takes an iterable of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill (if all of the given promises are rejected), then the returned promise is rejected with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a>, a new subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> that groups together individual errors. Essentially, this method is the opposite of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a>.</p>"
    },
    "promise.catch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/catch",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>catch()</strong></code> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> and deals with rejected cases only. It behaves the same as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.prototype.then(undefined, onRejected)</code></a> (in fact, calling <code>obj.catch(onRejected)</code> internally calls <code>obj.then(undefined, onRejected)</code>). This means that you have to provide an <code>onRejected</code> function even if you want to fall back to an <code>undefined</code> result value - for example <code>obj.catch(() =&gt; {})</code>.</p>"
    },
    "promise.finally": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/finally",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>finally()</code></strong> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. When the promise is settled, i.e either fulfilled or rejected, the specified callback function is executed. This provides a way for code to be run whether the promise was fulfilled successfully or rejected once the <code>Promise</code> has been dealt with.</p>\n<p>This helps to avoid duplicating code in both the promise's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>then()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>catch()</code></a> handlers.</p>"
    },
    "promise.promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/promise",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise</code></strong> constructor is primarily used to wrap functions that do not already support promises.</p>"
    },
    "promise.race": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/race",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Promise.race()</strong></code> method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise.</p>"
    },
    "promise.reject": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/reject",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise.reject()</code></strong> method returns a <code>Promise</code> object that is rejected with a given reason.</p>"
    },
    "promise.resolve": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/resolve",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise.resolve()</code></strong> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object that is resolved with a given value. If the value is a promise, that promise is returned; if the value is a thenable (i.e. has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>\"then\" method</code></a>), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.</p>"
    },
    "promise.then": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/then",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>then()</strong></code> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. It takes up to two arguments: callback functions for the success and failure cases of the <code>Promise</code>.</p>\n<div class=\"note notecard\">\n<p>If one or both arguments are omitted or are provided non-functions, then <code>then</code> will be missing the handler(s), but will not generate any errors. If the <code>Promise</code> that <code>then</code> is called on adopts a state (<code>fulfillment</code> or <code>rejection</code>) for which <code>then</code> has no handler, the returned promise simply adopts the final state of the original <code>Promise</code> on which <code>then</code> was called.</p>\n</div>"
    },
    "proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>Proxy</code> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.</p>"
    },
    "proxy.proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Proxy()</strong></code> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> objects.</p>"
    },
    "proxy.proxy.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/apply",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.apply()</code></strong> method is a trap for a function call.</p>"
    },
    "proxy.proxy.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/construct",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.construct()</code></strong> method is a trap for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a <code>[[Construct]]</code> internal method (i.e. <code>new target</code> must be valid).</p>"
    },
    "proxy.proxy.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.defineProperty()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>.</p>"
    },
    "proxy.proxy.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.deleteProperty()</code></strong> method is a trap for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator.</p>"
    },
    "proxy.proxy.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.get()</code></strong> method is a trap for getting a property value.</p>"
    },
    "proxy.proxy.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.getOwnPropertyDescriptor()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>.</p>"
    },
    "proxy.proxy.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.getPrototypeOf()</code></strong> method is a trap for the <code>[[GetPrototypeOf]]</code> internal method.</p>"
    },
    "proxy.proxy.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.has()</code></strong> method is a trap for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator.</p>"
    },
    "proxy.proxy.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/isextensible",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.isExtensible()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>.</p>"
    },
    "proxy.proxy.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.ownKeys()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a>.</p>"
    },
    "proxy.proxy.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.preventExtensions()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>.</p>"
    },
    "proxy.proxy.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.set()</code></strong> method is a trap for setting a property value.</p>"
    },
    "proxy.proxy.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.setPrototypeOf()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>.</p>"
    },
    "proxy.revocable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/revocable",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Proxy.revocable()</strong></code> method is used to create a revocable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> object.</p>"
    },
    "rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>RangeError</strong></code> object indicates an error when a value is not in the set or range of allowed values.</span></p>"
    },
    "rangeerror.rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>RangeError()</strong></code> constructor creates an error when a value is not in the set or range of allowed values.</span></p>"
    },
    "referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>ReferenceError</strong></code> object represents an error when a non-existent variable is referenced.</p>"
    },
    "referenceerror.referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ReferenceError</code></strong> object represents an error when a non-existent variable is referenced.</p>"
    },
    "reflect": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\"><strong>Reflect</strong> is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\" data-flaw=\"link1\">proxy handlers</a>. <code>Reflect</code> is not a function object, so it's not constructible.</span></p>"
    },
    "reflect.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/apply",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.apply()</code></strong> method calls a target function with arguments as specified.</p>"
    },
    "reflect.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/construct",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Reflect.construct()</strong></code> method acts like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator, but as a function. It is equivalent to calling <code>new target(...args)</code>. It gives also the added option to specify a different prototype.</p>"
    },
    "reflect.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.defineProperty()</code></strong> method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> but returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>.</p>"
    },
    "reflect.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Reflect</strong></code><strong><code>.deleteProperty()</code></strong> method allows to delete properties. It is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code> operator</a> as a function.</p>"
    },
    "reflect.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.get()</code></strong> method works like getting a property from an object (<code>target[propertyKey]</code>) as a function.</p>"
    },
    "reflect.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.getOwnPropertyDescriptor()</code></strong> method is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>. It returns a property descriptor of the given property if it exists on the object, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise.</span></p>"
    },
    "reflect.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.getPrototypeOf()</code></strong> method is almost the same method as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>. It returns the prototype (i.e. the value of the internal <code>[[Prototype]]</code> property) of the specified object.</p>"
    },
    "reflect.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.has()</code></strong> method works like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code> operator</a> as a function.</p>"
    },
    "reflect.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/isextensible",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.isExtensible()</code></strong> method determines if an object is extensible (whether it can have new properties added to it). It is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>, but with some <a href=\"#Difference_to_Object.isExtensible\">differences</a>.</span></p>"
    },
    "reflect.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.ownKeys()</code></strong> method returns an array of the <code>target</code> object's own property keys.</p>"
    },
    "reflect.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.preventExtensions()</code></strong> method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).</span> It is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>, but with some <a href=\"#Difference_from_Object.preventExtensions\">differences</a>.</p>"
    },
    "reflect.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.set()</code></strong> method works like setting a property on an object.</p>"
    },
    "reflect.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.setPrototypeOf()</code></strong> method is the same method as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>, except for its return type. It sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object to another object or to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>, and returns <code>true</code> if the operation was successful, or <code>false</code> otherwise</span>.</p>"
    },
    "regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.</p>\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions chapter</a> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">JavaScript Guide</a>.</p>"
    },
    "regexp.@@match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@match",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@match]()</code></strong> method retrieves the matches when matching a <em>string</em> against a <em>regular expression</em>.</p>"
    },
    "regexp.@@matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@matchall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@matchAll]</code></strong> method returns all matches of the regular expression against a string.</p>"
    },
    "regexp.@@replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@replace",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@replace]()</code></strong> method replaces some or all matches of a <code>this</code> pattern in a string by a <code>replacement</code>, and returns the result of the replacement as a new string. The <code>replacement</code> can be a string or a function to be called for each match.</p>"
    },
    "regexp.@@search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@search",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@search]()</code></strong> method executes a search for a match between a <code>this</code> regular expression and a string.</p>"
    },
    "regexp.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>RegExp[@@species]</code></strong> accessor property returns the <code>RegExp</code> constructor.</p>"
    },
    "regexp.@@split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@split",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@split]()</code></strong> method splits a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object into an array of strings by separating the string into substrings.</p>"
    },
    "regexp.compile": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/compile",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The deprecated <code><strong>compile</strong></code><strong><code>()</code></strong> method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the <code>RegExp</code> constructor.</p>"
    },
    "regexp.dotall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/dotall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>dotAll</code></strong> property indicates whether or not the \"<code>s</code>\" flag is used with the regular expression. <code>dotAll</code> is a read-only property of an individual regular expression instance.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.dotAll</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "regexp.exec": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/exec",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>exec()</code></strong> method executes a search for a match in a specified string. Returns a result array, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>.</span></p>\n<p>JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> objects are <strong>stateful</strong> when they have the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>global</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a> flags set (e.g. <code>/foo/g</code> or <code>/foo/y</code>). They store a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> from the previous match. Using this internally, <code>exec()</code> can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a>.</p>\n<p>A newer function has been proposed to simplify matching multiple parts of a string (with capture groups): <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a>.</p>\n<p>If you are executing a match simply to find <code>true</code> or <code>false</code>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a> method or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> instead.</p>"
    },
    "regexp.flags": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/flags",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>flags</code></strong> property returns a string consisting of the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2\">flags</a> of the current regular expression object.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.flags</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "regexp.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/global",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>global</code></strong> property indicates whether or not the \"<code>g</code>\" flag is used with the regular expression. <code>global</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.global</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.ignorecase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/ignorecase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ignoreCase</code></strong> property indicates whether or not the \"<code>i</code>\" flag is used with the regular expression. <code>ignoreCase</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.ignoreCase</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.input": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/input",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong><code>input</code> </strong>property is a static property of regular expressions that contains the string against which a regular expression is matched. <code>RegExp.$_</code> is an alias for this property.</p>"
    },
    "regexp.lastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastindex",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>lastIndex</code></strong> is a read/write integer property of regular expression instances that specifies the index at which to start the next match.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExpInstance.lastIndex</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.lastmatch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastmatch",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong>lastMatch</strong> property is a static and read-only property of regular expressions that contains the last matched characters. <code>RegExp.$&amp;</code> is an alias for this property.</p>"
    },
    "regexp.lastparen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastparen",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong><code>lastParen</code></strong> property is a static and read-only property of regular expressions that contains the last parenthesized substring match, if any. <code>RegExp.$+</code> is an alias for this property.</p>"
    },
    "regexp.leftcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/leftcontext",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong>leftContext </strong>property is a static and read-only property of regular expressions that contains the substring preceding the most recent match. <code>RegExp.$`</code> is an alias for this property.</p>"
    },
    "regexp.multiline": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/multiline",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>multiline</code></strong> property indicates whether or not the \"<code>m</code>\" flag is used with the regular expression. <code>multiline</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.multiline</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.n": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/n",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The legacy RegExp <strong>$1, $2, $3, $4, $5, $6, $7, $8, $9</strong> properties are static and read-only properties of regular expressions that contain parenthesized substring matches.</p>"
    },
    "regexp.regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/regexp",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>RegExp</code></strong> constructor creates a regular expression object for matching text with a pattern.</p>\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions chapter</a> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide\">JavaScript Guide</a>.</p>"
    },
    "regexp.rightcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/rightcontext",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong>rightContext </strong>property is a static and read-only property of regular expressions that contains the substring following the most recent match. <code>RegExp.$'</code> is an alias for this property.</p>"
    },
    "regexp.source": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/source",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>source</code></strong> property returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.source</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.sticky": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/sticky",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>sticky</code></strong> property reflects whether or not the search is sticky (searches in strings only from the index indicated by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> property of this regular expression). <code>sticky</code> is a read-only property of an individual regular expression object.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.sticky</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.test": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/test",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>test()</code></strong> method executes a search for a match between a regular expression and a specified string. Returns <code>true</code> or <code>false</code>.</p>"
    },
    "regexp.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>"
    },
    "regexp.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the regular expression.</p>"
    },
    "regexp.unicode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/unicode",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>unicode</code></strong> property indicates whether or not the \"<code>u</code>\" flag is used with a regular expression. <code>unicode</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.unicode</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Set</code></strong> object lets you store unique values of any type, whether <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> or object references.</span></p>"
    },
    "set.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The initial value of the <strong><code>@@iterator</code></strong> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>values</code></a> property.</p>"
    },
    "set.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Set[Symbol.species]</code></strong> accessor property returns the <code>Set</code> constructor.</p>"
    },
    "set.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/add",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>add()</code></strong> method appends a new element with a specified value to the end of a <code>Set</code> object.</p>"
    },
    "set.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/clear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>clear()</code></strong> method removes all elements from a <code>Set</code> object.</p>"
    },
    "set.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <code>Set</code> object.</p>"
    },
    "set.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>entries()</strong></code> method returns a new <a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a> object that contains<strong> an array of <code>[value, value]</code></strong> for each element in the <code>Set</code> object, in insertion order. For <code>Set</code> objects there is no <code>key</code> like in <code>Map</code> objects. However, to keep the API similar to the <code>Map</code> object, each <em>entry</em> has the same value for its <em>key</em> and <em>value</em> here, so that an array <code>[value, value]</code> is returned.</p>"
    },
    "set.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>forEach()</code></strong> method executes a provided function once for each value in the <code>Set</code> object, in insertion order.</p>"
    },
    "set.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the specified value exists in a <code>Set</code> object or not.</p>"
    },
    "set.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Set</code> constructor</strong> lets you create <code>Set</code> objects that store unique values of any type, whether <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> or object references.</span></p>"
    },
    "set.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/size",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>size</code></strong> accessor property returns the number of (unique) elements in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object.</p>"
    },
    "set.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new iterator object that contains the values for each element in the <code>Set</code> object in insertion order.</p>\n<div class=\"notecard note\">\n<p><strong>Note</strong>: The <strong><code>keys()</code></strong> method is an alias for this method (for similarity with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> objects), hence the <code>keys()</code> page redirecting here. It behaves exactly the same and returns <strong>values</strong> of <code>Set</code> elements.</p>\n</div>"
    },
    "sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>SharedArrayBuffer</code></strong> object is used to represent a generic, fixed-length raw binary data buffer, similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object, but in a way that they can be used to create views on shared memory. Unlike an <code>ArrayBuffer</code>, a <code>SharedArrayBuffer</code> cannot become detached.</p>"
    },
    "sharedarraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> in bytes.</p>"
    },
    "sharedarraybuffer.sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<div class=\"note notecard\">\n<p>Note that <code>SharedArrayBuffer</code> was disabled by default in all major browsers on 5 January, 2018 in response to <a href=\"https://meltdownattack.com/\">Spectre</a>. Chrome <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=821270\">re-enabled it in v67</a> on platforms where its site-isolation feature is enabled to protect against Spectre-style vulnerabilities.</p>\n</div>\n<p>The <strong><code>SharedArrayBuffer()</code> constructor</strong> is used to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> object representing a generic, fixed-length raw binary data buffer, similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object.</p>"
    },
    "sharedarraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>SharedArrayBuffer.prototype.slice()</code></strong> method returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> whose contents are a copy of this <code>SharedArrayBuffer</code>'s bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>.</p>"
    },
    "string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>String</code></strong> object is used to represent and manipulate a sequence of characters.</p>"
    },
    "string.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@iterator]()</code></strong> method returns a new iterator object that iterates over the code points of a String value, returning each code point as a String value.</p>"
    },
    "string.anchor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/anchor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>anchor()</code></strong> method creates a string beginning with an <code>&lt;a name=\"...\"&gt;</code> start tag, then some text, and then an <code>&lt;/a&gt;</code> end tag.</p>\n<div class=\"notecard warning\">\n<p>Don't use this method. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> instead. Also, the HTML specification no longer allows the <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> element to have a <code>name</code> attribute, so this method doesn't even create valid markup.</p>\n</div>"
    },
    "string.big": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/big",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>big()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a> HTML element that causes a string to be displayed in a big font.</p>\n<div class=\"note notecard\">\n<p><strong>Usage note:</strong> The &lt;big&gt; element has been removed in <a href=\"$MDN_URL$/Web/Guide/HTML/HTML5\">HTML5</a> and shouldn't be used anymore. Instead web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties.</p>\n</div>"
    },
    "string.blink": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/blink",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>blink()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/blink\"><code>&lt;blink&gt;</code></a> HTML element that causes a string to blink.</p>\n<div class=\"warning notecard\">\n<p><strong>Warning:</strong> Blinking text is frowned upon by several accessibility standards. The <code>&lt;blink&gt;</code> element itself is non-standard and deprecated!</p>\n</div>"
    },
    "string.bold": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/bold",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>bold()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a> HTML element that causes a string to be displayed as bold.</p>"
    },
    "string.charat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object's <strong><code>charAt()</code></strong> method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.</span></p>"
    },
    "string.charcodeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charcodeat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>charCodeAt()</code></strong> method returns an integer between <code>0</code> and <code>65535</code> representing the UTF-16 code unit at the given index.</span></p>\n<p>The UTF-16 code unit matches the Unicode code point for code points which can be represented in a single UTF-16 code unit. If the Unicode code point cannot be represented in a single UTF-16 code unit (because its value is greater than <code>0xFFFF</code>) then the code unit returned will be <em>the first part of a surrogate pair</em> for the code point. If you want the entire code point value, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>codePointAt()</code></a>.</p>"
    },
    "string.codepointat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/codepointat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>codePointAt()</code></strong> method returns a non-negative integer that is the Unicode code point value.</p>"
    },
    "string.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/concat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>concat()</code></strong> method concatenates the string arguments to the calling string and returns a new string.</span></p>"
    },
    "string.endswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/endswith",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>endsWith()</code></strong> method determines whether a string ends with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.</span></p>"
    },
    "string.fixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fixed",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>fixed()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a> HTML element that causes a string to be displayed in fixed-pitch font.</p>"
    },
    "string.fontcolor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontcolor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>fontcolor()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> HTML element that causes a string to be displayed in the specified font color.</p>\n<div class=\"note notecard\">\n<p><strong>Usage note:</strong> The &lt;font&gt; element has been removed in <a href=\"$MDN_URL$/Web/Guide/HTML/HTML5\">HTML5</a> and shouldn't be used anymore. Instead web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties.</p>\n</div>"
    },
    "string.fontsize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontsize",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>fontsize()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> HTML element that causes a string to be displayed in the specified font size.</p>\n<div class=\"note notecard\">\n<p><strong>Usage note:</strong> The &lt;font&gt; element has been removed in <a href=\"$MDN_URL$/Web/Guide/HTML/HTML5\">HTML5</a> and shouldn't be used anymore. Instead web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties.</p>\n</div>"
    },
    "string.fromcharcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcharcode",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>String.fromCharCode()</code></strong> method returns a string created from the specified sequence of UTF-16 code units.</p>"
    },
    "string.fromcodepoint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcodepoint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>String.fromCodePoint()</code></strong> method returns a string created by using the specified sequence of code points.</p>"
    },
    "string.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/includes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>includes()</code></strong> method determines whether one string may be found within another string, returning <code>true</code> or <code>false</code> as appropriate.</p>"
    },
    "string.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/indexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>indexOf()</code></strong> method returns the index within the calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object of the first occurrence of the specified value, starting the search at <code>fromIndex</code>. Returns <code>-1</code> if the value is not found.</span></p>\n<div class=\"note notecard\"><strong>Note:</strong> For the Array method, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>.</div>"
    },
    "string.italics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/italics",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>italics()</code></strong> method creates an <a href=\"$MDN_URL$/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a> HTML element that causes a string to be italic.</p>"
    },
    "string.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>lastIndexOf()</code></strong> method returns the index within the calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object of the last occurrence of the specified value, searching backwards from <code>fromIndex</code>. Returns <code>-1</code> if the value is not found.</p>"
    },
    "string.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>length</code></strong> property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object contains the length of the string, in UTF-16 code units. <code>length</code> is a read-only data property of string instances.</span></p>"
    },
    "string.link": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/link",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>link()</code></strong> method creates a string representing the code for an <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> HTML element to be used as a hypertext link to another URL.</p>"
    },
    "string.localecompare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/localecompare",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>localeCompare()</code></strong> method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order.</p>\n<p>The new <code><var>locales</var></code> and <code><var>options</var></code> arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the <code><var>locales</var></code> and <code><var>options</var></code> arguments, the locale and sort order used are entirely implementation-dependent.</p>"
    },
    "string.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/match",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>match()</code></strong> method retrieves the result of matching a <em>string</em> against a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">regular expression</a>.</p>"
    },
    "string.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/matchall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>matchAll()</code></strong> method returns an iterator of all results matching a <var>string</var> against a <em><a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">regular expression</a></em>, including <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\">capturing groups</a>.</p>"
    },
    "string.normalize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/normalize",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>normalize()</code></strong> method returns the Unicode Normalization Form of the string.</p>"
    },
    "string.padend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padend",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>padEnd()</code></strong> method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.</p>"
    },
    "string.padstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padstart",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>padStart()</code></strong> method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.</span> The padding is applied from the start of the current string.</p>"
    },
    "string.raw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/raw",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>String.raw()</code></strong> method is a tag function of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\" data-flaw=\"link1\">template literals</a>. This is <em>similar</em> to the <code>r</code> prefix in Python, or the <code>@</code> prefix in C# for string literals. (But it is not <em>identical</em>; see explanations in <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=5016\">this issue</a>.) It's used to get the raw string form of template strings, that is, substitutions (e.g. <code>${foo}</code>) are processed, but escapes (e.g. <code>\\n</code>) are not.</span></p>"
    },
    "string.repeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/repeat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>repeat()</code></strong> method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.</p>"
    },
    "string.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replace",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>replace()</code></strong> method returns a new string with some or all matches of a <code>pattern</code> replaced by a <code>replacement</code>.</span> The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function to be called for each match. If <code>pattern</code> is a string, only the first occurrence will be replaced.</p>\n<p>The original string is left unchanged.</p>"
    },
    "string.replaceall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replaceall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>replaceAll()</code></strong> method returns a new string with all matches of a <code>pattern</code> replaced by a <code>replacement</code>.</span> The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function to be called for each match.</p>\n<p>The original string is left unchanged.</p>"
    },
    "string.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/search",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>search()</code></strong> method executes a search for a match between a regular expression and this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.</p>"
    },
    "string.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method extracts a section of a string and returns it as a new string, without modifying the original string.</p>"
    },
    "string.small": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/small",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>small()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a> HTML element that causes a string to be displayed in a small font.</p>"
    },
    "string.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/split",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>split()</code></strong> method divides a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> into an ordered list of substrings, puts these substrings into an array, and returns the array.  The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.  </span></p>"
    },
    "string.startswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/startswith",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>startsWith()</code></strong> method determines whether a string begins with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.</span></p>"
    },
    "string.strike": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/strike",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>strike()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a> HTML element that causes a string to be displayed as struck-out text.</p>"
    },
    "string.string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/string",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>String</code></strong> constructor is used to create a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object. When called instead as a function, it performs type conversion to a <a href=\"$MDN_URL$/Glossary/string\">primitive string</a>, which is usually more useful.</p>"
    },
    "string.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sub",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>sub()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a> HTML element that causes a string to be displayed as subscript.</p>"
    },
    "string.substr": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substr",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<p class=\"seoSummary\">The <strong><code>substr()</code></strong> method returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.</p>"
    },
    "string.substring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>substring()</code></strong> method returns the part of the <code>string</code> between the start and end indexes, or to the end of the string.</p>"
    },
    "string.sup": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sup",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>sup()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a> HTML element that causes a string to be displayed as superscript.</p>"
    },
    "string.tolocalelowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocalelowercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleLowerCase()</code></strong> method returns the calling string value converted to lower case, according to any locale-specific case mappings.</p>"
    },
    "string.tolocaleuppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocaleuppercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleUpperCase()</code></strong> method returns the calling string value converted to upper case, according to any locale-specific case mappings.</p>"
    },
    "string.tolowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolowercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLowerCase()</code></strong> method returns the calling string value converted to lower case.</p>"
    },
    "string.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>"
    },
    "string.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified object.</p>"
    },
    "string.touppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/touppercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toUpperCase()</code></strong> method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).</p>"
    },
    "string.trim": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trim",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>trim()</code></strong> method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).</p>"
    },
    "string.trimend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimend",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>trimEnd()</code></strong> method removes whitespace from the end of a string. <code>trimRight()</code> is an alias of this method.</p>"
    },
    "string.trimstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimstart",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>trimStart()</code></strong> method removes whitespace from the beginning of a string. <code>trimLeft()</code> is an alias of this method.</p>"
    },
    "string.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.</p>"
    },
    "symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The data type <strong>symbol</strong> is a <a href=\"$MDN_URL$/Glossary/Primitive\">primitive data type</a>. The <code>Symbol()</code> function returns a value of type <strong>symbol</strong>, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax \"<code>new Symbol()</code>\".  </p>\n<p>Every symbol value returned from <code>Symbol()</code> is unique.  A symbol value may be used as an identifier for object properties; this is the data type's primary purpose, although other use-cases exist, such as enabling opaque data types, or serving as an implementation-supported unique identifier in general.  Some further explanation about purpose and usage can be found in the <a href=\"$MDN_URL$/Glossary/Symbol\">glossary entry for Symbol</a>.</p>"
    },
    "symbol.@@toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/@@toprimitive",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@toPrimitive]()</code></strong> method converts a Symbol object to a primitive value.</p>"
    },
    "symbol.asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/asynciterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Symbol.asyncIterator</strong></code> well-known symbol specifies the default AsyncIterator for an object. If this property is set on an object, it is an async iterable and can be used in a <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></code> loop.</p>"
    },
    "symbol.description": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/description",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The read-only <code><strong>description</strong></code> property is a string returning the optional description of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> objects.</p>"
    },
    "symbol.for": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/for",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.for(key)</code></strong> method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.</p>"
    },
    "symbol.hasinstance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/hasinstance",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Symbol.hasInstance</code></strong> well-known symbol is used to determine if a constructor object recognizes an object as its instance. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator's behavior can be customized by this symbol.</span></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.hasInstance</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.isconcatspreadable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/isconcatspreadable",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.isConcatSpreadable</code></strong> well-known symbol is used to configure if an object should be flattened to its array elements when using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> method.</p>"
    },
    "symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The well-known <code><strong>Symbol.iterator</strong></code> symbol specifies the default iterator for an object. Used by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a>.</p>"
    },
    "symbol.keyfor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/keyfor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.keyFor(sym)</code></strong> method retrieves a shared symbol key from the global symbol registry for the given symbol.</p>"
    },
    "symbol.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/match",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Symbol.match</strong></code> well-known symbol specifies the matching of a regular expression against a string. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> method.</p>"
    },
    "symbol.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/matchall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Symbol.matchAll</strong></code> well-known symbol returns an iterator, that yields matches of the regular expression against a string. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a> method.</p>"
    },
    "symbol.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/replace",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.replace</code></strong> well-known symbol specifies the method that replaces matched substrings of a string. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> method.</p>\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.replace</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/search",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.search</code></strong> well-known symbol specifies the method that returns the index within a string that matches the regular expression. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> method.</p>\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a>.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.search</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The well-known symbol <code><strong>Symbol.species</strong></code> specifies a function-valued property that the constructor function uses to create derived objects.</p>"
    },
    "symbol.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/split",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.split</code></strong> well-known symbol specifies the method that splits a string at the indices that match a regular expression. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> method.</p>\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a>.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.split</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/symbol",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>Symbol()</code> constructor returns a value of type <strong>symbol</strong>, but is incomplete as a constructor because it does not support the syntax \"<code>new Symbol()</code>\" and it is not intended to be subclassed. It may be used as the value of an <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/extends\">extends</a></code> clause of a <code>class</code> definition but a <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/super\">super</a></code> call to it will cause an exception.</p>"
    },
    "symbol.toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/toprimitive",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.toPrimitive</code></strong> is a symbol that specifies a function valued property that is called to convert an object to a corresponding primitive value.</p>"
    },
    "symbol.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>\n<p>This method is usually called internally by JavaScript.</p>"
    },
    "symbol.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object.</p>"
    },
    "symbol.tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostringtag",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.toStringTag</code></strong> well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> method.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.toStringTag</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/unscopables",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.unscopables</code></strong> well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\">with</a></code> environment bindings of the associated object.</p>"
    },
    "symbol.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of a Symbol object.</p>"
    },
    "syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>SyntaxError</strong></code> object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.</p>"
    },
    "syntaxerror.syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>SyntaxError</code></strong> constructor creates a new error object that represents an error when trying to interpret syntactically invalid code.</p>"
    },
    "typedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><em>TypedArray</em></strong> object describes an array-like view of an underlying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">binary data buffer</a>. There is no global property named <code>TypedArray</code>, nor is there a directly visible <code>TypedArray</code> constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.</p>"
    },
    "typedarray.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The initial value of the <code>@@iterator</code> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>values</code></a> property.</p>"
    },
    "typedarray.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>TypedArray[@@species]</strong></code> accessor property returns the constructor of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array</a>.</p>"
    },
    "typedarray.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/buffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>buffer</code></strong> accessor property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> referenced by a <em>TypedArray</em> at construction time.</p>"
    },
    "typedarray.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length (in bytes) of a typed array.</p>"
    },
    "typedarray.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteOffset</code></strong> accessor property represents the offset (in bytes) of a typed array from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>"
    },
    "typedarray.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/copywithin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>copyWithin()</strong></code> method copies the sequence of array elements within the array to the position starting at <code><var>target</var></code>. The copy is taken from the index positions of the second and third arguments <code><var>start</var></code> and <code><var>end</var></code>. The <code><var>end</var></code> argument is optional and defaults to the length of the array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>entries()</code></strong> method returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> iterator object that contains the key/value pairs for each index in the array.</p>"
    },
    "typedarray.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/every",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>every()</code></strong> method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a><em>.</em> <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/fill",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>fill()</code></strong> method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/filter",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>filter()</code></strong> method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/find",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>find()</code></strong> method returns a value of an element in the typed array, if it satisfies the provided testing function. Otherwise <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex\"><code>findIndex()</code></a> method, which returns the <strong>index</strong> of a found element in the typed array instead of its value.</p>"
    },
    "typedarray.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findindex",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>findIndex()</code></strong> method returns an <strong>index</strong> in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.</p>\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/find\"><code>find()</code></a> method, which returns the <strong>value</strong> of a found element in the typed array instead of its index.</p>"
    },
    "typedarray.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>forEach()</code></strong> method executes a provided function once per array element. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/from",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code><var>TypedArray</var>.from()</code></strong> method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array</a> from an array-like or iterable object. This method is nearly the same as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>.</p>"
    },
    "typedarray.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/includes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>includes()</strong></code> method determines whether a typed array includes a certain element, returning <code>true</code> or <code>false</code> as appropriate. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/indexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>indexOf()</strong></code> method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/join",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>join()</code></strong> method joins all elements of an array into a string. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>keys()</code></strong> method returns a new array iterator object that contains the keys for each index in the array.</p>"
    },
    "typedarray.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>lastIndexOf()</strong></code> method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at <code>fromIndex</code>. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>length</code></strong> accessor property represents the length (in elements) of a typed array.</p>"
    },
    "typedarray.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>map()</code></strong> method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a><em>.</em> <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/name",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong><em>TypedArray</em>.name</strong></code> property represents a string value of the typed array constructor name.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>TypedArray.name</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "typedarray.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/of",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code><var>TypedArray</var>.of()</code></strong> method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array</a> from a variable number of arguments. This method is nearly the same as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a>.</p>"
    },
    "typedarray.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduce",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reduce()</code></strong> method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"><code>Array.prototype.reduce()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduceright",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reduceRight()</code></strong> method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\"><code>Array.prototype.reduceRight()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reverse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>reverse()</strong></code> method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>set()</code></strong> method stores multiple values in the typed array, reading input values from a specified array.</p>"
    },
    "typedarray.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method returns a new typed array (with a new underlying buffer), that contains a copy of a portion of the original typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/some",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>some()</strong></code> method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a><em>.</em> <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/sort",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>sort()</strong></code> method sorts the elements of a typed array numerically <em>in place</em> and returns the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a>, except that sorts the values numerically instead of as strings. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.subarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/subarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>subarray()</code></strong> method returns a new <em>TypedArray</em> on the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> store and with the same element types as for this <em>TypedArray</em> object. The begin offset is <strong>inclusive</strong> and the end offset is <strong>exclusive</strong>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a>.</p>"
    },
    "typedarray.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma “,”). This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a> and, as the typed array elements are numbers, the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a> applies for each element. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified array and its elements. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>"
    },
    "typedarray.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new array iterator object that contains the values for each index in the array.</p>"
    },
    "typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>TypeError</strong></code> object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.</p>\n<p>A <code>TypeError</code> may be thrown when:</p>\n<ul>\n<li>an operand or argument passed to a function is incompatible with the type expected by that operator or function; or</li>\n<li>when attempting to modify a value that cannot be changed; or</li>\n<li>when attempting to use a value in an inappropriate way.</li>\n</ul>"
    },
    "typeerror.typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror/typeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>TypeError()</code></strong> constructor creates a new error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.</p>"
    },
    "uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint16Array</code></strong> typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint16array.uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array/uint16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint16Array()</code></strong> typed array constructor creates an array of 16-bit unsigned integers in the platform byte order.</p>"
    },
    "uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint32Array</code></strong> typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint32array.uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array/uint32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint32Array()</code></strong> typed array constructor creates an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8Array</code></strong> typed array represents an array of 8-bit unsigned integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint8array.uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/uint8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8Array()</code></strong> constructor creates a typed array of 8-bit unsigned integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8ClampedArray</code></strong> typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint8clampedarray.uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8ClampedArray()</code></strong> constructor creates a typed array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "undefined": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/undefined",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global <code><strong>undefined</strong></code> property represents the primitive value <code><a href=\"$MDN_URL$/Glossary/Undefined\">undefined</a></code>. It is one of JavaScript's <a href=\"$MDN_URL$/Glossary/Primitive\">primitive types</a>.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>undefined</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "unescape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/unescape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div class=\"warning notecard\">Warning: Although <code>unescape()</code> is not strictly deprecated (as in \"removed from the Web standards\"), it is defined in <a href=\"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-additional-ecmascript-features-for-web-browsers\">Annex B</a> of the ECMA-262 standard, whose introduction states:\n<blockquote>… All of the language features and behaviours specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. …<br>\n… Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. …</blockquote>\n</div>\n<p>The <code><strong>unescape()</strong></code> function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/escape\"><code>escape</code></a>. Usually, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent</code></a> are preferred over <code>unescape</code>.</p>\n<div class=\"note notecard\"><strong>Note:</strong> Do not use <code>unescape</code> to decode URIs, use <code>decodeURI</code> instead.</div>"
    },
    "uneval": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uneval",
      "status": [
        "Deprecated"
      ],
      "doc": "<div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div><div class=\"notecard obsolete\">\n<h4 id=\"Obsolete_since_Gecko_74_Firefox_74_Thunderbird_74_SeaMonkey_2.71\">Obsolete since Gecko 74 (Firefox 74 / Thunderbird 74 / SeaMonkey 2.71)</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div>\n<p>The <code><strong>uneval()</strong></code> function creates a string representation of the source code of an Object.</p>"
    },
    "urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>URIError</strong></code> object represents an error when a global URI handling function was used in a wrong way.</p>"
    },
    "urierror.urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror/urierror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>URIError()</code></strong> constructor creates an error when a global URI handling function was used in a wrong way.</p>"
    },
    "weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>WeakMap</code></strong> object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</span></p>\n<p>You can learn more about <code>WeakMap</code>s in the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections#WeakMap_object\">WeakMap object</a> guide (under <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a>).</p>"
    },
    "weakmap.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/clear",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>clear()</strong></code> method used to remove all elements from a <code>WeakMap</code> object, but is no longer part of ECMAScript and its implementations.</p>"
    },
    "weakmap.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> object.</p>"
    },
    "weakmap.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>get()</code></strong> method returns a specified element from a <code>WeakMap</code> object.</p>"
    },
    "weakmap.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the specified key exists in the <code>WeakMap</code> object or not.</p>"
    },
    "weakmap.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>set()</code></strong> method adds a new element with a specified key and value to a <code>WeakMap</code> object.</p>"
    },
    "weakmap.weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/weakmap",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakMap()</code> constructor</strong> creates <code>WeakMap</code> objects which are a collections of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</p>\n<p>You can learn more about <code>WeakMap</code>s in the section <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections#WeakMap_object\">WeakMap object</a> in <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a>.</p>"
    },
    "weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WeakRef</code></strong> object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.</p>"
    },
    "weakref.deref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/deref",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>deref</code> method returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> instance's target object, or <code>undefined</code> if the target object has been garbage-collected.</p>"
    },
    "weakref.weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/weakref",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakRef</code></strong> constructor creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> object referring to a given target object.</p>"
    },
    "weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakSet</code></strong> object lets you store weakly held <em>objects</em> in a collection.</p>"
    },
    "weakset.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/add",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>add()</strong></code> method appends a new object to the end of a <code>WeakSet</code> object.</p>"
    },
    "weakset.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/clear",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>clear()</strong></code> method used to remove all elements from a <code>WeakSet</code> object, but is no longer part of ECMAScript and its implementations.</p>"
    },
    "weakset.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <code>WeakSet</code> object.</p>"
    },
    "weakset.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an object exists in a <code>WeakSet</code> or not.</p>"
    },
    "weakset.weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/weakset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakSet</code></strong> constructor lets you create <code>WeakSet</code> objects that store weakly held <em>objects</em> in a collection.</p>"
    },
    "webassembly": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly</code></strong> JavaScript object acts as the namespace for all <a href=\"$MDN_URL$/WebAssembly\">WebAssembly</a>-related functionality.</p>\n<p>Unlike most other global objects, <code>WebAssembly</code> is not a constructor (it is not a function object). You can compare it to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a>, which is also a namespace object for mathematical constants and functions, or to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a> which is the namespace object for internationalization constructors and other language-sensitive functions.</p>"
    },
    "webassembly.compile": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compile",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.compile()</code></strong> function compiles WebAssembly binary code into a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> object. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate\"><code>WebAssembly.instantiate()</code></a> function should be used).</p>"
    },
    "webassembly.compileerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compileerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.CompileError</strong></code> object indicates an error during WebAssembly decoding or validation.</p>"
    },
    "webassembly.compileerror.compileerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compileerror/compileerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.CompileError()</strong></code> constructor creates a new WebAssembly <code>CompileError</code> object, which indicates an error during WebAssembly decoding or validation.</p>"
    },
    "webassembly.compilestreaming": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compilestreaming",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.compileStreaming()</code></strong> function compiles a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> directly from a streamed underlying source.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> function should be used).</p>"
    },
    "webassembly.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/global",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Global</code></strong> object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> instances. This allows dynamic linking of multiple modules.</p>"
    },
    "webassembly.global.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/global/global",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Global()</code></strong> constructor creates a new <code>Global</code> object representing a global variable instance, accessible from both JavaScript and importable/exportable across one or more <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> instances. This allows dynamic linking of multiple modules.</p>"
    },
    "webassembly.instance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instance",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Instance</code></strong> object is a stateful, executable instance of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>. <code>Instance</code> objects contain all the <a href=\"$MDN_URL$/WebAssembly/Exported_functions\">Exported WebAssembly functions</a> that allow calling into WebAssembly code from JavaScript.</p>"
    },
    "webassembly.instance.exports": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instance/exports",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>exports</code></strong> readonly property of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\"><code>WebAssembly.Instance</code></a> object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.</p>\n<pre class=\"syntaxbox notranslate\">instance.exports</pre>"
    },
    "webassembly.instance.instance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instance/instance",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.Instance()</code></strong> constructor creates a new <code>Instance</code> object which is a stateful, executable instance of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>.</p>"
    },
    "webassembly.instantiate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instantiate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.instantiate()</code></strong> function allows you to compile and instantiate WebAssembly code. This function has two overloads:</p>\n<ul>\n<li>The primary overload takes the WebAssembly binary code, in the form of a <a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, and performs both compilation and instantiation in one step. The returned <code>Promise</code> resolves to both a compiled <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> and its first <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\"><code>WebAssembly.Instance</code></a>.</li>\n<li>The secondary overload takes an already-compiled <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> and returns a <code>Promise</code> that resolves to an <code>Instance</code> of that <code>Module</code>. This overload is useful if the <code>Module</code> has already been compiled.</li>\n</ul>\n<div class=\"warning notecard\">\n<p><strong>Important</strong>: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>\n</div>"
    },
    "webassembly.instantiatestreaming": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instantiatestreaming",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.instantiateStreaming()</code></strong> function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.</p>"
    },
    "webassembly.linkerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/linkerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.LinkError</strong></code> object indicates an error during module instantiation (besides <a href=\"http://webassembly.org/docs/semantics/#traps\">traps</a> from the start function).</p>"
    },
    "webassembly.linkerror.linkerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/linkerror/linkerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.LinkError()</strong></code> constructor creates a new WebAssembly <code>LinkError</code> object, which indicates an error during module instantiation (besides <a href=\"http://webassembly.org/docs/semantics/#traps\">traps</a> from the start function).</p>"
    },
    "webassembly.memory": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Memory</strong></code> object is a resizable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></code> that holds the raw bytes of memory accessed by a WebAssembly <code>Instance</code>.</p>\n<p>A memory created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</p>"
    },
    "webassembly.memory.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory/buffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>buffer</code></strong> prototype property of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\"><code>WebAssembly.Memory</code></a> object returns the buffer contained in the memory.</p>"
    },
    "webassembly.memory.grow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory/grow",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>grow()</code></strong> protoype method of the <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\">Memory</a></code> object increases the size of the memory instance by a specified number of WebAssembly pages.</p>"
    },
    "webassembly.memory.memory": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory/memory",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Memory()</strong></code> constructor creates a new <code>Memory</code> object whose <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer\"><code>buffer</code></a> property is a resizable <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></code> or <code>SharedArrayBuffer</code> that holds the raw bytes of memory accessed by a WebAssembly <code>Instance</code>.</p>\n<p>A memory created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</p>"
    },
    "webassembly.module": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">A <strong><code>WebAssembly.Module</code></strong> object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently <a href=\"$MDN_URL$/Web/API/Worker/postMessage\">shared with Workers</a>, and instantiated multiple times. </span></p>"
    },
    "webassembly.module.customsections": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/customsections",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.customSections()</code></strong> function returns a copy of the contents of all custom sections in the given module with the given string name.</p>"
    },
    "webassembly.module.exports": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/exports",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.Module.exports()</code></strong> function returns an array containing descriptions of all the declared exports of the given <code>Module</code>.</p>"
    },
    "webassembly.module.imports": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/imports",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.imports()</code></strong> function returns an array containing descriptions of all the declared imports of the given <code>Module</code>.</p>"
    },
    "webassembly.module.module": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/module",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Module()</code></strong> constructor creates a new Module object containing stateless WebAssembly code that has already been compiled by the browser and can be efficiently <a href=\"$MDN_URL$/Web/API/Worker/postMessage\">shared with Workers</a>, and instantiated multiple times.</p>\n<p>The <code>WebAssembly.Module()</code> constructor function can be called to synchronously compile given WebAssembly binary code. However, the primary way to get a <code>Module</code> is through an asynchronous compilation function like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile\"><code>WebAssembly.compile()</code></a>.</p>"
    },
    "webassembly.runtimeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/runtimeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.RuntimeError</strong></code> object is the error type that is thrown whenever WebAssembly specifies a <a href=\"http://webassembly.org/docs/semantics/#traps\">trap</a>.</p>"
    },
    "webassembly.runtimeerror.runtimeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/runtimeerror/runtimeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.RuntimeError()</strong></code> constructor creates a new WebAssembly <code>RuntimeError</code> object — the type that is thrown whenever WebAssembly specifies a <a href=\"http://webassembly.org/docs/semantics/#traps\">trap</a>.</p>"
    },
    "webassembly.table": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Table()</strong></code> object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</p>\n<div class=\"note notecard\">\n<p><strong>Note</strong>: Tables can currently only store function references, but this will likely be expanded in the future.</p>\n</div>"
    },
    "webassembly.table.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>get()</strong></code> prototype method of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table()</code></a> object retrieves a function reference stored at a given index.</p>"
    },
    "webassembly.table.grow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/grow",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>grow()</strong></code> prototype method of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table</code></a> object increases the size of the Table instance by a specified number of elements.</p>"
    },
    "webassembly.table.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>length</strong></code> prototype property of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table</code></a> object returns the length of the table, i.e. the number of elements in the table.</p>"
    },
    "webassembly.table.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>set()</strong></code> prototype method of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table</code></a> object mutates a reference stored at a given index to a different value.</p>"
    },
    "webassembly.table.table": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/table",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Table()</strong></code> constructor creates a new <code>Table</code> object of the given size and element type.</p>"
    },
    "webassembly.validate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/validate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.validate()</code></strong> function validates a given <a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a> of WebAssembly binary code, returning whether the bytes form a valid wasm module (<code>true</code>) or not (<code>false</code>).</p>"
    }
  }
}