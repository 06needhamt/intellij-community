inspection.diff.format.error=Required parameters: <old_file> <new_file> [<delta_file_name>]
inspection.command.line.explanation=Expected parameters: <project_file_path> <inspection_profile_file_path> <output_path> [<options>]\n Avaliable options are:\n -d <directory_path>  --  directory to be inspected. Optional. Whole project is inspected by default.\n                      -v[0|1|2]            --  verbose level. 0 - silent, 1 - verbose, 2 - most verbose.
inspection.action.title=Inspection
inspection.action.verb=Inspect
inspection.action.noun=Inspection
inspection.action.profile.label=&Inspection Profile:
inspection.offline.parsing.error=Error parsing the results file
inspection.offline.loading.error=Error loading the results file
inspection.offline.results.file.chooser.title=Open File With Inspection Results

inspection.problem.synopsis=Problem synopsis

#export results view
inspection.export.results.description.tag=description
inspection.export.results.problem.element.tag=problem_class
inspection.export.results.can.be.final=can be final
inspection.export.results.can.be.final.description=declaration can have final modifier

inspection.export.results.can.be.static=can be static
inspection.export.results.can.be.static.description=declaration can have static modifier
inspection.export.results.package=package
inspection.export.results.default=<default>
inspection.export.results.class=class
inspection.export.results.author=author
inspection.export.results.name=name
inspection.export.results.display.name=display_name
inspection.export.results.constructor=constructor
inspection.export.results.method=method
inspection.export.results.field=field
inspection.export.results.problem=problem
inspection.export.results.file=file
inspection.export.results.line=line
inspection.export.results.interface=interface
#can be final
inspection.can.be.final.display.name=Declaration can have final modifier
inspection.can.be.final=Can have final modifier.
inspection.can.be.final.accept.quickfix=Accept Suggested Final Modifier
inspection.can.be.final.option=Report classes
inspection.can.be.final.option1=Report methods
inspection.can.be.final.option2=Report fields
#can be static
inspection.can.be.static.display.name=Declaration can have static modifier
inspection.can.be.static=Does not use context instance fields or calls context instance methods and therefore can have static modifier.
inspection.can.be.static.accept.quickfix=Accept Suggested Static Modifier
inspection.annotate.quickfix.verb=annotate
inspection.annotate.quickfix.name=Annotate method as @{0}
#dataflow
inspection.data.flow.display.name=Constant conditions & exceptions
inspection.data.flow.nullable.quickfix.option=<html><body>Suggest @Nullable annotation for methods that may possibly return null.<br> Requires JDK5.0 and annotations.jar from {0} distribution</body></html>
inspection.data.flow.redundant.instanceof.quickfix=Replace with != null
inspection.data.flow.simplify.boolean.expression.quickfix=Simplify Boolean Expression
#messages from dataflow inspection
inspection.data.flow.npe.problem.descriptor=Method invocation {0} may produce <code>java.lang.NullPointerException</code>.
inspection.data.flow.npe.problem.descriptor1=Array access {0} may produce <code>java.lang.NullPointerException</code>.
inspection.data.flow.npe.problem.descriptor2=Member variable access {0} may produce <code>java.lang.NullPointerException</code>.
inspection.data.flow.class.cast.problem.descriptor=Casting {0} to {1} may produce <code>java.lang.ClassCastException</code>.
inspection.data.flow.unreachable.problem.descriptor=Switch label {0} is unreachable.
inspection.data.flow.condition.problem.descriptor=Condition {0} is always {1}.
inspection.data.flow.condition.problem.descriptor1=Condition {0} at the left side of assignment expression is always {1}. Can be simplified to normal assignment.
inspection.data.flow.condition.problem.descriptor2=Condition {0} is redundant and can be replaced with {1}.
inspection.data.flow.condition.problem.descriptor3=Condition {0} is always <code>true</code>.
inspection.data.flow.nullable.problem.descriptor=Expression {0} might evaluate to null but
inspection.data.flow.nullable.problem.descriptor1={0} is returned by the method which isn't declared as @Nullable
inspection.data.flow.nullable.problem.descriptor2={0} is assigned to a variable that is annotated with @NotNull
inspection.data.flow.nullable.problem.descriptor3={0} is returned by the method declared as @NotNull
inspection.data.flow.nullable.problem.descriptor4=Argument {0} might be null.
inspection.data.flow.nullable.problem.descriptor5=Passing null argument to parameter annotated as @NotNull.
#deprecated
inspection.deprecated.display.name=Deprecated API usage
inspection.deprecated.problem.descriptor=Overrides deprecated method.
inspection.deprecated.problem.descriptor1=Uses deprecated API.
#empty method
inspection.empty.method.display.name=Empty method
inspection.empty.method.delete.quickfix=Delete Unnecessary Method(s)
inspection.empty.method.problem.descriptor=Method only calls its super.
inspection.empty.method.problem.descriptor1=Empty method overrides empty method.
inspection.empty.method.problem.descriptor2=The method is empty.
inspection.empty.method.problem.descriptor3=The method and all it's deriveables are empty.
inspection.empty.method.problem.descriptor4=All implementations of this method are empty.
#ejb
inspection.ejb.display.name=EJB Errors & Warnings
inspection.ejb.report.warnings.option=Report warnings
inspection.ejb.job.description=Searching for EJB errors & warnings in
inspection.ejb.report.errors.option=Report errors
#redundant cast
inspection.redundant.cast.display.name=Redundant type cast
inspection.redundant.cast.remove.quickfix=Remove Redundant Cast(s)
inspection.redundant.cast.problem.descriptor=Casting {0} to {1} is redundant
#redundant throws
inspection.redundant.throws.display.name=Redundant throws clause
inspection.redundant.throws.remove.quickfix=Remove unnecessary throws declarations
inspection.redundant.throws.problem.descriptor=The declared exception {0} is never thrown {1, choice, 0#in method implementations.|2#in this method, nor in its derivables.|3#.}

inspection.equals.hashcode.display.name=equals() and hashCode() not paired
inspection.equals.hashcode.job.descriptor=Searching for equals() and hashCode() in
inspection.equals.hashcode.only.one.defined.problem.descriptor=Class has {0} defined but does not define {1}.

inspection.1.5.display.name=Usages of API documented as {0}
inspection.1.5.problem.descriptor=Usage of the API documented as {0}

inspection.local.can.be.final.display.name=Local variable or parameter can be final
inspection.local.can.be.final.option=Report local variables
inspection.local.can.be.final.option1=Report method parameters
inspection.can.be.local.parameter.problem.descriptor=Parameter <code>#ref</code> can have <code>final</code> modifier.
inspection.can.be.local.variable.problem.descriptor=Variable <code>#ref</code> can have <code>final</code> modifier.

inspection.nullable.problems.display.name=@Nullable problems
#check box options
inspection.nullable.problems.option=report @NotNull parameter overrides @Nullable
inspection.nullable.problems.option1=report not annotated method overrides @NotNull
inspection.nullable.problems.option2=report @Nullable method overrides @NotNull
#problem descriptor messages
inspection.nullable.problems.problem.descriptor=Cannot annotate with both @Nullable and @NotNull
inspection.nullable.problems.problem.descriptor1=Method annotated with @Nullable  must not override @NotNull method
inspection.nullable.problems.problem.descriptor2=Not annotated method overrides method annotated with @NotNull
inspection.nullable.problems.problem.descriptor3=Parameter annotated @NonNull  must not override @Nullable parameter

inspection.visibility.display.name=Declaration access can be weaker
inspection.visibility.option=Suggest package local visibility level for class members
inspection.visibility.option1=Suggest package local visibility level for top-level classes
inspection.visibility.option2=Suggest private for inner class members when referenced from outer class only
#can be private|package local|protected|public
inspection.visibility.compose.suggestion=Can be {0}
inspection.package.local=package local

inspection.visibility.accept.quickfix=Accept Suggested Access Level
inspection.visibility.export.results.visibility=access modifier can be weaker

inspection.field.can.be.local.display.name=Field can be local
inspection.field.can.be.local.problem.descriptor=Field can be converted to one or more local variables.
inspection.field.can.be.local.quickfix=Convert to local

inspection.unused.return.value.display.name=Unused method return value
inspection.unused.return.value.problem.descriptor=Return value of the method is never used.
inspection.unused.return.value.make.void.quickfix=Make Method void

inspection.same.return.value.display.name=Method returns the same value
inspection.same.return.value.problem.descriptor=Method always returns {0}
inspection.same.return.value.problem.descriptor1=Method and all its deriveables always return {0}
inspection.same.return.value.problem.descriptor2=All implementations of this method always return {0}

inspection.dependency.violator.display.name=Dependency violator
inspection.dependency.violator.job.descriptor=Searching for dependency rule violations in
inspection.dependency.violator.problem.descriptor=Dependency rule ''{0}.'' is violated.

inspection.same.parameter.display.name=Actual method parameter is the same constant
inspection.same.parameter.problem.descriptor=Actual value of parameter ''{0}'' value is always ''{1}''.

inspection.unused.assignment.display.name=Unused assignment
inspection.unused.assignment.option=Report ++i when may be replaced with (i + 1)
inspection.unused.assignment.option1=Report i++ when changed value is not used afterwards
inspection.unused.assignment.option2=Report redundant initializers
inspection.unused.assignment.remove.quickfix=Remove Redundant Initializer
inspection.unused.assignment.problem.descriptor1=Variable {0} is never used.
inspection.unused.assignment.problem.descriptor2=Variable {0} initializer {1} is redundant.
inspection.unused.assignment.problem.descriptor3=The value {0} assigned to {1} is never used.
inspection.unused.assignment.problem.descriptor4=The value changed at {0} is never used.
inspection.unused.assignment.problem.descriptor5=Variable {0} is never used.
inspection.unused.assignment.problem.descriptor6=The variable is assigned to itself in {0}.

inspection.unused.parameter.composer=The following parameters are not used in any implementation
inspection.unused.parameter.composer1=The following parameters are not used in either this method or any of its derived methods
inspection.unused.parameter.composer2=Parameter {0} is not used in any implementation
inspection.unused.parameter.composer3=Parameter {0} is not used  in either this method or any of its derived methods
inspection.unused.parameter.display.name=Unused method parameters
inspection.unused.parameter.delete.quickfix=Delete Unused Parameter(s)
inspection.unused.parameter.export.results.description=parameter {0} is not used
inspection.unused.parameter.export.results=parameter is not used

inspection.redundant.type.display.name=Redundant type arguments
inspection.redundant.type.remove.quickfix=Remove explicit type arguments
inspection.redundant.type.problem.descriptor=Explicit type arguments can be inferred

inspection.suspicious.collections.method.calls.display.name=Suspicious collections method calls
inspection.suspicious.collections.method.calls.problem.descriptor=Calling ''{1}'' may not succeed for non-null objects of type ''{0}''
inspection.suspicious.collections.method.calls.problem.descriptor1=Suspicious call to ''{0}''

inspection.reference.invalid=invalid
inspection.reference.default.package=default package
inspection.reference.implicit.constructor.name=implicit constructor of {0}
inspection.reference.noname=noname
inspection.reference.anonymous.name=anonymous ({0})
inspection.reference.jsp.holder.method.anonymous.name=<% page content %>
inspection.reference.anonymous=anonymous
inspection.reference.unnamed=<unnamed>
inspection.reference.ref.entity.name.in.owner.name={0} in {1}
inspection.reference.refmethod.in.anonymous.class.name=anonymous.{0}

inspection.export.save.button=Save
inspection.export.dialog.title=Export to HTML
inspection.export.options.panel.title=Options
inspection.export.open.option=Open generated HTML in &browser
inspection.export.title= Code Inspection results
inspection.export.generating.html.for=Generating HTML:{0}
inspection.export.error.writing.to=Error writing to {0}

inspection.export.results.error.title=Inspection Results Export
inspection.export.inspections.link.text=Inspections
inspection.export.open.source.link.text=Open source
inspection.offline.view.empty.browser.text=<HTML><BODY>Select tree node for detailed information</BODY></HTML>
inspection.offline.view.tool.display.name.title=Name
inspection.export.results.unnamed=unnamed
inspection.export.results.unknown.tool.display.name=unknown
inspection.generating.html.progress.title=Generating HTML...
inspection.action.export.html=Export HTML
inspection.tool.description.under.construction.text=Under construction
inspection.tool.in.browser.id.title=ID
inspection.tool.in.browser.description.title=Description:
inspection.chooser.profile.title=Choose Inspection Profile
inspection.inspect.verb.with.scope.title=Inspect Code in {0}
inspection.action.edit.settings=Edit Settings
inspection.action.apply.quickfix=Apply a quickfix
inspection.action.apply.quickfix.description=Apply an inspection quickfix
inspection.tree.popup.title= Accept Resolution
inspection.action.rerun=Rerun Inspection
inspection.general.tools.group.name=General
inspection.empty.root.node.text=Nothing left to show
inspection.read.only.node.prefix=(Read-only)
inspection.invalid.node.text= (INVALID)
inspection.problem.descriptor.count= ({0, choice, 1#1 item|2# {0,number,integer} items})
inspection.action.go.next=Go Next Problem
inspection.actiongo.prev=Go Prev Problem

inspection.javadoc.display.name=Declaration has javadoc problems
inspection.javadoc.option.tab.title=Class
inspection.javadoc.option.tab.title1=Method
inspection.javadoc.option.tab.title2=Field
inspection.javadoc.option.tab.title3=Inner class

inspection.scope.for.title=Scope

inspection.javadoc.required.tags.option.title=Required Tags
inspection.javadoc.problem.descriptor=Required javadoc is absent
inspection.javadoc.job.descriptor=Analyzing javadocs in
inspection.javadoc.problem.descriptor1=Period in the documentation is missing. The period is used by the javadoc tool to generate the comment for the overview page.
inspection.javadoc.problem.descriptor2=Required tag {0} is missing
inspection.javadoc.problem.descriptor5=Author is missing after {0} tag.
inspection.javadoc.problem.descriptor6=Version is missing after {0} tag.
inspection.javadoc.problem.descriptor7=Version is missing {0} after tag.
inspection.javadoc.problem.descriptor8=Cannot resolve symbol {0}
inspection.javadoc.problem.descriptor9=Name expected
inspection.javadoc.problem.descriptor10=Wrong tag {0}
inspection.javadoc.method.problem.descriptor=Description is missing in {0} tag for parameter {1}
inspection.javadoc.method.problem.descriptor1=Description is missing in {0} tag.
inspection.javadoc.method.problem.descriptor2={0} tag description is missing.
inspection.javadoc.method.problem.descriptor3=Required tag {0} is missing for parameter {1}

inspection.export.results.abstract=abstract
inspection.export.results.static=static
inspection.export.results.capitalized.class=Class
inspection.export.results.initializer=initializer
inspection.export.results.capitalized.interface=Interface
inspection.export.results.capitalized.abstract.class=Abstract&nbsp;class
inspection.export.results.abstract.class=abstract&nbsp;class
inspection.export.results.implicit.constructor=implicit constructor of

inspection.problem.resolution=Problem resolution
inspection.tool.configurable.dialog.title=''{0}'' Settings
inspection.quickfix.assert.family=Assert
inspection.assert.quickfix=Assert ''{0}''
inspection.dependency.configure.button.text=Configure dependency rules

inspection.javadoc.label.text=Additional JavaDoc Tags
inspection.javadoc.dialog.title=Edit Additional JavaDoc Tags
inspection.javadoc.html.label.text=Custom Html Tags
inspection.javadoc.html.dialog.title=Edit Custom Html Tags
inspection.javadoc.html.attributes.label.text=Custom Html Attributes
inspection.javadoc.html.attributes.dialog.title=Edit Custom Html Attributes
inspection.javadoc.html.not.required.label.text=Additional Not Required Html Attributes
inspection.javadoc.html.not.required.dialog.title=Edit Additional Not Required Html Attributes

inspection.unused.symbol.option=Check Local Variables
inspection.unused.symbol.option1=Check Fields
inspection.unused.symbol.option2=Check Methods
inspection.unused.symbol.option3=Check Classes
inspection.unused.symbol.option4=Check Parameters

inspection.results.for.profile.toolwindow.title=Results for Inspection Profile ''{0}''
inspection.export.results.invalidated.item=invalidated item
inspection.export.results.no.error=No error message provided.
inspection.export.results.at.line=at line
inspection.descriptor.provider.apply.fix=Apply Fix {0}

inspection.export.results.capitalized.location=Location
inspection.export.results.extends.implements=Extends/implements
inspection.export.results.extended.implemented=Extended/implemented by
inspection.export.results.extended=Extended by
inspection.export.results.overrides.library.methods=Overrides library methods
inspection.export.results.overrides.implements=Overrides/implements
inspection.export.results.derived.methods=Derived methods
inspection.export.results.type.references=The following uses this type
inspection.export.results.used.from=Used from
inspection.export.results.uses=Uses the following
inspection.export.results.no.problems.found=No problems found
inspection.export.results.anonymous.ref.in.owner=in

inspection.processing.job.descriptor=Processing project usages in
inspection.processing.job.descriptor1=Processing external usages of
inspection.processing.job.descriptor2=Analyzing code in

inspection.action.group.by.severity=Group by Severity
inspection.action.group.by.severity.description=Group Inspections By Severity
inspection.no.jdk.error.message=The JDK is not configured properly for this project. Inspection cannot proceed.
inspection.progress.title=Inspecting Code...
inspection.no.problems.dialog.title=Code Inspection
inspection.no.problems.message=No suspicious code found
inspection.problems=problems
inspection.error.loading.message=Error reading inspection profile {0, choice, 0#from {1}|1#}
inspection.errors.occured.dialog.title=Errors Occured
inspection.profiles.presentable.name=Inspection profiles
inspection.severity=Severity:
inspection.enabled.option=&Enabled
inspection.description.title=Description
inspection.as.errors=As errors
inspection.as.warnings=As warnings
inspection.profiles.panel.title=On-The-Fly Editor Highlighting & Analyze|Inspect Code Profiles
inspection.profile.panel.configuration.exception=Unable to create 2 profiles with the same name ''{0}''.
inspection.profile.panel.filter.label=Filter:
inspection.new.profile.message=New profile name
inspection.new.profile.dialog.title=Create new profile
inspection.unable.to.create.profile.dialog.title=Unable to create profile.
inspection.unable.to.create.profile.message=Inspection profile with name ''{0}'' already exist.
inspection.delete.profile.tooltip=Delete current profile
inspection.copy.profile.tooltip=Copy current profile
inspection.reset.profile.tooltip=Reset settings to defaults
inspection.profile.label=Profile:
inspection.profile.unnamed=Unnamed
inspection.tool.availability.in.tree.node= (available for editor highlighting)
inspection.tool.availability.in.tree.node1= (available for Analyze|Inspect Code)
inspection.error.level.popup.menu.title=Choose Error Level

inspection.application.starting.up=Starting up...
inspection.done=done.
inspection.capitalized.done=Done.
inspection.application.file.cannot.be.found=File {0} cannot be found
inspection.application.opening.project=Opening project...
inspection.application.initializing.project=Initializing project...
inspection.application.directory.cannot.be.found=Directory {0} cannot be found

inspection.comparing.references.display.name=== used instead of equals()
inspection.comparing.references.use.quickfix=Use equals()
inspection.comparing.references.problem.descriptor=Suspicious comparison {0}
inspection.dead.code.display.name=Unused declaration
inspection.dead.code.option=Automatically add all void main(String args[]) methods to entry points
inspection.dead.code.option1=Automatically add all EJB interface methods to entry points
inspection.dead.code.option2=Automatically add all JUnit testcases to entry points
inspection.dead.code.option3=Automatically add all applets to entry points
inspection.dead.code.option4=Automatically add all servlets to entry points
inspection.dead.code.option5=Automatically add classes that have usages in non-java files to entry points
inspection.export.results.dead.code=unused declaration
inspection.dead.code.comment=// --Commented out by Inspection
inspection.dead.code.date.comment=// --Commented out by Inspection ({0}):
inspection.dead.code.stop.comment=// --Commented out by Inspection STOP ({0})\n
inspection.dead.code.start.comment=// --Commented out by Inspection START ({0}):\n
inspection.dead.code.safe.delete.quickfix=Safe Delete
inspection.dead.code.comment.quickfix=Comment Out
inspection.dead.code.entry.point.quickfix=Add as Entry Point
inspection.dead.code.remove.from.entry.point.quickfix=Remove from Entry Points
inspection.dead.code.entry.points.display.name=Entry Points
inspection.dead.code.export.results.no.instantiations.found=No instantiations found.
inspection.dead.code.export.results.instantiated.from.heading=Instantiated from
inspection.dead.code.problem.synopsis=Field is never assigned.
inspection.dead.code.problem.synopsis1=Field has no usages.
inspection.dead.code.problem.synopsis2=Field is assigned but never accessed.
inspection.dead.code.problem.synopsis3=Field has one usage but it is not reachable from entry points.
inspection.dead.code.problem.synopsis4=Field has {0, choice, 1#1 usage|2#{0,number} usages} but they are not reachable from entry points.
inspection.dead.code.problem.synopsis6={0, choice, 0#Not Reachable.|1#Reachable.} {1, choice, 1#1 usage|2#{0, number} usages} found in the project code.
inspection.dead.code.problem.synopsis7={0, choice, 0#Has no reachable instantiations.|1#Has reachable instantiations.} {1, choice, 1#1 instantiation|2#{1, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis8={0, choice, 0#Has no reachable implementation instantiations.|1#Has reachable implementation instantiations.} {1, choice, 1#1 instantiation|2#{1, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis9={0, choice, 0#Anonymous class context is not reachable. Class is not instantiated.|1#Instantiated} {1, choice, 1#1 instantiation|2#{1, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis10=Anonymous class declaration context is not reachable from entry points. Class is never instantiated.
inspection.dead.code.problem.synopsis11=No class references has been found. Class static initializer is not reachable.
inspection.dead.code.problem.synopsis12=Class has one instantiation but it is not reachable from entry points.
inspection.dead.code.problem.synopsis13=Class is not instantiated.
inspection.dead.code.problem.synopsis14=<ul><li>Abstract method is not implemented OR</li><li>Implementation class is never instantiated OR</li><li>An instantiation is not reachable from entry points.</li></ul>
inspection.dead.code.problem.synopsis15=<ul><li>Method owner class is never instantiated OR</li><li>An instantiation is not reachable from entry points.</li></ul>
inspection.dead.code.problem.synopsis16=Method is never used.
inspection.dead.code.problem.synopsis17=Method has usage(s) but they all belong to recursive calls chain that has no members reachable from entry points.
inspection.dead.code.problem.synopsis18=Method is not reachable from entry points.
inspection.dead.code.problem.synopsis19=Neither the class nor {0, choice, 1#its implementation|2#{0,number} its implementations} are ever instantiated.
inspection.dead.code.problem.synopsis20=Class has {0, choice, 1#instantiation|2#{0,number} instantiations} but they are not reachable from entry points.
#{0} is class or interface (translated)
inspection.dead.code.problem.synopsis21=Method is never used as a member of this {0}, but only as a member of the implementation class(es). The project will stay compilable if the method is removed from the {0}.
inspection.dead.code.problem.synopsis22=Method overrides a library method but<ul><li>its {0} is never instantiated OR</li><li>its {0} instantiation is not reachable from entry points.</li></ul>
inspection.dead.code.problem.synopsis23={0} is not implemented.
inspection.dead.code.problem.synopsis24={0} has an implementation but <ul><li>it is never instantiated OR</li><li>no instantiations are reachable from entry points.</li></ul>
inspection.dead.code.problem.synopsis25={0} has {1, choice, 1#direct or indirect implementation|2#{1,number} direct or indirect implementations} but <ul><li>they are never instantiated OR</li><li>no instantiations are reachable from entry points.</li></ul>
inspection.dead.code.problem.synopsis26={0, choice, 0#Constructor|1#Method} is never used.
inspection.dead.code.problem.synopsis27={0, choice, 0#Constructor|1#Method}has usage(s) but they all belong to recursive calls chain that has no members reachable from entry points.
inspection.dead.code.problem.synopsis28={0, choice, 0#Constructor|1#Method} has one usage but it is not reachable from entry points.
inspection.dead.code.problem.synopsis29={0, choice, 0#Constructor|1#Method} has {1, choice, 1#usage|2#{1,number} usages} but they are not reachable from entry points.
inspection.duplicates.display.name=Duplicate String Literal
inspection.duplicates.replace.family.quickfix=Replace
inspection.duplicates.replace.quickfix=Replace with ''{0}''
inspection.duplicates.option=&Min string length:
inspection.edit.tool.settings=Edit Tool Settings