/* The following code was generated by JFlex 1.4 on 3/28/05 12:42 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;
import com.intellij.psi.JavaTokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 3/28/05 12:42 PM from the specification file
 * <tt>C:/Irida/tools/lexer/_JavaLexer.flex</tt>
 */
class _JavaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\6\1\4\1\11\1\0\1\4\1\11\16\6\4\0\1\4\1\56"+
    "\1\24\1\0\1\5\1\65\1\63\1\22\1\66\1\67\1\10\1\60"+
    "\1\75\1\21\1\17\1\7\1\12\7\2\2\1\1\100\1\74\1\61"+
    "\1\55\1\62\1\77\1\101\3\3\1\16\1\20\1\15\5\5\1\14"+
    "\13\5\1\13\2\5\1\72\1\23\1\73\1\64\1\5\1\0\1\32"+
    "\1\36\1\37\1\45\1\30\1\31\1\50\1\43\1\44\1\5\1\41"+
    "\1\33\1\46\1\35\1\40\1\51\1\5\1\26\1\34\1\25\1\27"+
    "\1\52\1\53\1\47\1\42\1\54\1\70\1\57\1\71\1\76\41\6"+
    "\2\0\4\5\4\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5"+
    "\1\0\37\5\1\0\u0128\5\2\0\22\5\34\0\136\5\2\0\11\5"+
    "\2\0\7\5\16\0\2\5\16\0\5\5\11\0\1\5\21\0\117\6"+
    "\21\0\3\6\27\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\54\5\1\0\10\5\2\0\32\5\14\0\202\5"+
    "\1\0\4\6\5\0\71\5\2\0\2\5\2\0\2\5\3\0\46\5"+
    "\2\0\2\5\67\0\46\5\2\0\1\5\7\0\47\5\11\0\21\6"+
    "\1\0\27\6\1\0\3\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\13\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5\13\6\12\0"+
    "\12\6\6\0\1\6\143\5\1\0\1\5\7\6\2\0\6\6\2\5"+
    "\2\6\1\0\4\6\2\0\12\6\3\5\22\0\1\6\1\5\1\6"+
    "\33\5\3\0\33\6\65\0\46\5\13\6\u0150\0\3\6\1\0\65\5"+
    "\2\0\1\6\1\5\20\6\2\0\1\5\4\6\3\0\12\5\2\6"+
    "\2\0\12\6\21\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\0\7\6"+
    "\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\4\5\16\0\1\6\2\0\6\5\4\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0\4\5"+
    "\1\0\1\5\7\0\14\6\3\5\14\0\3\6\1\0\7\5\1\0"+
    "\1\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0"+
    "\1\5\17\0\1\5\5\0\12\6\21\0\3\6\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\2\0\4\5\2\0"+
    "\1\6\1\5\6\6\3\0\2\6\2\0\3\6\10\0\2\6\4\0"+
    "\2\5\1\0\3\5\4\0\12\6\22\0\2\6\1\0\6\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\2\5\3\0\3\5\3\0\10\5\1\0\3\5\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\11\0\1\6\17\0\11\6\21\0\3\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\4\0"+
    "\7\6\1\0\3\6\1\0\4\6\7\0\2\6\11\0\2\5\4\0"+
    "\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\4\0\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\7\0\1\5\1\0\2\5\4\0\12\6\22\0\2\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\20\5\4\0\6\6\2\0"+
    "\3\6\1\0\4\6\11\0\1\6\10\0\2\5\4\0\12\6\22\0"+
    "\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0"+
    "\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0"+
    "\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0"+
    "\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6"+
    "\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0"+
    "\2\5\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\10\5\1\0\42\5\6\0\24\6"+
    "\1\0\2\6\4\5\4\0\10\6\1\0\44\6\11\0\1\6\71\0"+
    "\42\5\1\0\5\5\1\0\2\5\1\0\7\6\3\0\4\6\6\0"+
    "\12\6\6\0\6\5\4\6\106\0\46\5\12\0\47\5\11\0\132\5"+
    "\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5"+
    "\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5"+
    "\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\47\5\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5"+
    "\2\0\10\5\12\0\32\5\5\0\113\5\225\0\64\5\40\6\7\0"+
    "\1\5\4\0\12\6\41\0\4\6\1\0\12\6\6\0\130\5\10\0"+
    "\51\5\1\6\u0556\0\234\5\4\0\132\5\6\0\26\5\2\0\6\5"+
    "\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5"+
    "\5\0\3\5\1\0\7\5\17\0\4\6\32\0\5\6\20\0\2\5"+
    "\51\0\6\6\17\0\1\5\40\0\20\5\40\0\15\6\4\0\1\6"+
    "\40\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\3\5"+
    "\1\0\7\5\46\0\44\5\u0e81\0\3\5\31\0\11\5\6\6\1\0"+
    "\5\5\2\0\3\5\6\0\124\5\4\0\2\6\2\0\2\5\2\0"+
    "\136\5\6\0\50\5\4\0\136\5\21\0\30\5\u0248\0\u19b6\5\112\0"+
    "\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\322\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\14\5\44\0\4\6\17\0\2\5\30\0"+
    "\3\5\31\0\1\5\6\0\3\5\1\0\1\5\1\0\207\5\2\0"+
    "\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0"+
    "\32\5\12\0\132\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\20\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\3\42\1\43\1\44\1\45"+
    "\1\46\1\0\2\2\1\0\1\47\1\50\2\11\2\12"+
    "\34\3\1\51\3\3\1\52\6\3\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\42\1\44\1\67\1\70\2\3\1\71\10\3"+
    "\1\72\13\3\1\73\11\3\1\74\14\3\1\75\1\0"+
    "\2\67\1\76\2\3\1\77\1\3\1\100\1\101\6\3"+
    "\1\102\6\3\1\103\3\3\1\104\1\3\1\105\3\3"+
    "\1\106\6\3\1\107\5\3\1\110\1\3\1\44\1\0"+
    "\1\3\1\111\2\3\1\112\1\113\1\114\4\3\1\115"+
    "\1\3\1\116\2\3\1\117\1\3\1\120\1\121\1\3"+
    "\1\122\13\3\1\123\1\3\1\124\1\125\2\3\1\126"+
    "\2\3\1\127\1\3\1\130\1\131\5\3\1\132\1\3"+
    "\1\133\2\3\1\134\3\3\1\135\1\136\3\3\1\137"+
    "\4\3\1\140\1\3\1\141\1\142\2\3\1\143\1\144"+
    "\1\3\1\145\4\3\1\146\1\147\1\3\1\150\2\3"+
    "\1\151\1\3\1\152\1\153\1\3\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\102\0\u0882\0\u08c4\0\u0906\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\102\0\102\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\102\0\102"+
    "\0\102\0\u0b58\0\u0b9a\0\102\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\306\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\u15a8\0\102\0\102\0\102\0\102\0\u15ea"+
    "\0\u162c\0\u166e\0\102\0\u16b0\0\u16f2\0\306\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\306\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\306\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\102\0\u21c6\0\u2208\0\102\0\306\0\u224a\0\u228c"+
    "\0\306\0\u22ce\0\306\0\306\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\306\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\306\0\u2628\0\u266a\0\u26ac\0\306\0\u26ee\0\306"+
    "\0\u2730\0\u2772\0\u27b4\0\306\0\u27f6\0\u2838\0\u287a\0\u28bc"+
    "\0\u28fe\0\u2940\0\306\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\306\0\u2acc\0\102\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16"+
    "\0\306\0\306\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\306"+
    "\0\u2da2\0\306\0\u2de4\0\u2e26\0\306\0\u2e68\0\306\0\306"+
    "\0\u2eaa\0\306\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\306\0\u31c2\0\306"+
    "\0\306\0\u3204\0\u3246\0\306\0\u3288\0\u32ca\0\306\0\u330c"+
    "\0\306\0\306\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\306"+
    "\0\u3498\0\306\0\u34da\0\u351c\0\306\0\u355e\0\u35a0\0\u35e2"+
    "\0\306\0\306\0\u3624\0\u3666\0\u36a8\0\306\0\u36ea\0\u372c"+
    "\0\u376e\0\u37b0\0\306\0\u37f2\0\306\0\306\0\u3834\0\u3876"+
    "\0\306\0\306\0\u38b8\0\306\0\u38fa\0\u393c\0\u397e\0\u39c0"+
    "\0\306\0\306\0\u3a02\0\306\0\u3a44\0\u3a86\0\306\0\u3ac8"+
    "\0\306\0\306\0\u3b0a\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\4\1\2\1\6\1\7"+
    "\1\5\1\10\4\4\1\11\1\4\1\12\1\13\1\2"+
    "\1\14\1\15\1\16\1\4\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\4\4\1\27\1\30\2\4"+
    "\1\31\1\32\1\33\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\103\0\2\3\7\0\1\3\1\0\1\62"+
    "\1\63\1\64\1\65\1\66\7\0\1\66\1\63\1\0"+
    "\1\62\11\0\1\64\35\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\30\4\31\0\1\5\4\0"+
    "\1\5\77\0\1\67\1\70\44\0\1\71\101\0\1\72"+
    "\25\0\1\73\1\74\7\0\1\74\1\75\1\62\1\63"+
    "\1\64\1\65\1\66\7\0\1\66\1\63\1\0\1\62"+
    "\11\0\1\64\1\0\1\75\33\0\2\65\7\0\1\65"+
    "\4\0\1\76\103\0\1\77\33\0\1\100\24\0\11\13"+
    "\1\0\10\13\1\101\1\102\56\13\11\14\1\0\11\14"+
    "\1\103\1\104\55\14\1\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\105\14\4\1\106"+
    "\11\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\107\24\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\6\4\1\110"+
    "\1\4\1\111\11\4\1\112\5\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\5\4\1\113"+
    "\1\114\4\4\1\115\3\4\1\116\10\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\7\4"+
    "\1\117\1\4\1\120\16\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\13\4\1\121\14\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\122\1\4\1\123\12\4\1\124\1\125\7\4"+
    "\1\126\1\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\2\4\1\127\1\130\1\4\1\131"+
    "\22\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\132\11\4\1\133\1\4\1\134"+
    "\12\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\135\1\136\4\4\1\137\2\4"+
    "\1\140\11\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\4\4\1\141\3\4\1\142\10\4"+
    "\1\143\6\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\144\7\4\1\145\14\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\13\4\1\146\14\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\1\4\1\147\1\150"+
    "\2\4\1\151\22\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\13\4\1\152\14\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\16\4\1\153\11\4\102\0\1\154\101\0\1\155\101\0"+
    "\1\156\1\0\1\157\77\0\1\160\2\0\1\161\76\0"+
    "\1\162\3\0\1\163\75\0\1\164\5\0\1\165\73\0"+
    "\1\166\101\0\1\167\25\0\2\65\7\0\1\65\2\0"+
    "\1\63\1\64\1\0\1\66\7\0\1\66\1\63\13\0"+
    "\1\64\35\0\2\170\7\0\1\170\2\0\1\63\1\64"+
    "\2\0\1\170\7\0\1\63\13\0\1\64\12\0\1\170"+
    "\21\0\11\67\1\0\70\67\10\171\1\172\71\171\1\0"+
    "\2\73\7\0\1\73\2\0\1\63\1\64\1\65\1\66"+
    "\7\0\1\66\1\63\13\0\1\64\35\0\1\73\1\74"+
    "\7\0\1\74\1\0\1\62\1\63\1\64\1\65\1\66"+
    "\7\0\1\66\1\63\1\0\1\62\11\0\1\64\35\0"+
    "\3\75\6\0\1\75\1\0\1\62\2\75\1\0\1\75"+
    "\7\0\3\75\1\62\2\0\2\75\5\0\1\75\53\0"+
    "\1\173\62\0\11\13\1\0\70\13\11\14\1\0\70\14"+
    "\1\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\2\4\1\174\2\4\1\175\7\4\1\176\12\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\177\15\4\1\200\10\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\1\201"+
    "\27\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\7\4\1\202\20\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\2\4\1\203"+
    "\25\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\1\204\27\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\6\4\1\205\21\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\13\4\1\206\14\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\1\4\1\207\26\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\10\4\1\210\17\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\7\4\1\211\20\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\7\4\1\212\20\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\10\4\1\213\17\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\214\3\4\1\215\22\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\24\4"+
    "\1\216\3\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\10\4\1\217\17\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\13\4"+
    "\1\220\14\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\17\4\1\221\10\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\222\21\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\26\4\1\223\1\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\1\224"+
    "\27\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\225\24\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\13\4\1\226"+
    "\14\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\1\227\27\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\1\230\6\4\1\231"+
    "\20\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\232\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\10\4\1\233"+
    "\17\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\234\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\235\6\4"+
    "\1\236\20\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\24\4\1\237\3\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\4\4"+
    "\1\240\23\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\2\4\1\241\25\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\1\242"+
    "\27\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\13\4\1\243\3\4\1\244\10\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\11\4\1\245\16\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\12\4\1\246\15\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\247\10\4\1\250\10\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\17\4\1\251"+
    "\10\4\102\0\1\252\25\0\2\170\7\0\1\170\2\0"+
    "\1\63\1\64\12\0\1\63\13\0\1\64\34\0\10\171"+
    "\1\253\71\171\7\254\1\255\1\172\71\254\1\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\256\24\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\10\4\1\257\17\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\13\4"+
    "\1\260\14\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\7\4\1\261\20\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\2\4"+
    "\1\262\25\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\263\24\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\21\4"+
    "\1\264\6\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\265\24\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\7\4"+
    "\1\266\20\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\5\4\1\267\22\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\5\4"+
    "\1\270\22\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\271\24\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\1\272"+
    "\27\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\23\4\1\273\4\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\17\4\1\274"+
    "\10\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\1\275\27\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\3\4\1\276\24\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\12\4\1\277\15\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\1\4\1\300\26\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\301\27\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\6\4\1\302\21\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\17\4\1\303\10\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\5\4\1\304\22\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\305\21\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\306\24\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\12\4\1\307\15\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\310\24\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\7\4\1\311\20\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\312\6\4\1\313\20\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\314\26\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\3\4\1\315\24\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\316\27\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\6\4\1\317\4\4\1\320"+
    "\14\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\321\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\11\4\1\322"+
    "\16\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\13\4\1\323\14\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\324\27\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\25\4\1\325\2\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\6\4\1\326\21\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\14\4\1\327\13\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\5\4\1\330\22\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\20\4\1\331\7\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\6\4\1\332\21\4"+
    "\25\0\7\171\1\333\1\253\71\171\10\254\1\334\71\254"+
    "\1\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\7\4\1\335\20\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\26\4\1\336\1\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\337\26\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\10\4\1\340\17\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\341\24\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\1\342\27\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\343\21\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\344\26\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\1\4\1\345\26\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\12\4\1\346\15\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\17\4\1\347\10\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\350\26\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\16\4\1\351\11\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\352\27\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\12\4"+
    "\1\353\15\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\25\4\1\354\2\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\14\4"+
    "\1\355\13\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\356\24\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\16\4"+
    "\1\357\11\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\7\4\1\360\20\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\17\4"+
    "\1\361\10\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\1\362\27\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\4\1\363"+
    "\26\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\364\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\3\4\1\365"+
    "\24\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\366\26\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\2\4\1\367"+
    "\25\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\6\4\1\370\21\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\3\4\1\371"+
    "\24\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\372\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\17\4\1\373"+
    "\10\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\374\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\375\27\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\376\24\4\25\0\7\254\1\255\1\334"+
    "\71\254\1\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\17\4\1\377\10\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\7\4\1\u0100"+
    "\20\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\10\4\1\u0101\17\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\20\4\1\u0102"+
    "\7\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\6\4\1\u0103\21\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\u0104\27\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\u0105\22\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\1\u0106\27\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\12\4\1\u0107\15\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\u0108\26\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\16\4\1\u0109\11\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\u010a\24\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\5\4\1\u010b\22\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\10\4\1\u010c\17\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\4\4\1\u010d\23\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\10\4\1\u010e\17\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\21\4\1\u010f\6\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\u0110\27\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\u0111\21\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\u0112\24\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\12\4"+
    "\1\u0113\15\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\1\u0114\27\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\12\4\1\u0115"+
    "\15\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\23\4\1\u0116\4\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\17\4\1\u0117"+
    "\10\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\u0118\24\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\7\4\1\u0119"+
    "\20\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\15\4\1\u011a\12\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\12\4\1\u011b"+
    "\15\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\4\4\1\u011c\23\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\13\4\1\u011d"+
    "\14\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\10\4\1\u011e\17\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\2\4\1\u011f"+
    "\25\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\5\4\1\u0120\22\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\12\4\1\u0121"+
    "\15\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\u0122\24\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\u0123\27\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\1\u0124\27\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\u0125\24\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\u0126\24\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\6\4\1\u0127\21\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\10\4\1\u0128\17\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\1\u0129\27\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\24\4"+
    "\1\u012a\3\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\10\4\1\u012b\17\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u012c\24\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\12\4\1\u012d\15\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u012e\24\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\10\4\1\u012f\17\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u0130\24\4\26\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\u0131\24\4\26\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\4\0\1\u0132"+
    "\27\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\17\4\1\u0133\10\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\3\4\1\u0134"+
    "\24\4\26\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\4\0\13\4\1\u0135\14\4\26\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\4\0\1\u0136\27\4"+
    "\26\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\4\0\20\4\1\u0137\7\4\26\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\4\0\27\4\1\u0138\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\4\4\1\u0139\23\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\7\4\1\u013a\20\4\26\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\u013b\24\4\26\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\4\0\20\4\1\u013c\7\4\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\3\1\17\11\4\1\2\11"+
    "\1\0\2\1\1\0\3\11\2\1\1\11\47\1\7\11"+
    "\1\1\4\11\3\1\1\11\56\1\1\11\1\0\1\1"+
    "\1\11\55\1\1\11\1\0\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myAssertKeywordEnabled;
  private boolean myJdk15Enabled;

  public _JavaLexer(boolean isAssertKeywordEnabled, boolean jdk15Enabled){
    this((java.io.Reader)null);
    myAssertKeywordEnabled = isAssertKeywordEnabled;
    myJdk15Enabled = jdk15Enabled;
  }


  _JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1656) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66:
          { return JavaTokenType.LONG_KEYWORD;
          }
        case 109: break;
        case 97:
          { return JavaTokenType.PRIVATE_KEYWORD;
          }
        case 110: break;
        case 27:
          { return JavaTokenType.COMMA;
          }
        case 111: break;
        case 23:
          { return JavaTokenType.RBRACE;
          }
        case 112: break;
        case 22:
          { return JavaTokenType.LBRACE;
          }
        case 113: break;
        case 65:
          { return myJdk15Enabled ? JavaTokenType.ENUM_KEYWORD : JavaTokenType.IDENTIFIER;
          }
        case 114: break;
        case 55:
          { return JavaTokenType.DOC_COMMENT;
          }
        case 115: break;
        case 63:
          { return JavaTokenType.THIS_KEYWORD;
          }
        case 116: break;
        case 81:
          { return JavaTokenType.CLASS_KEYWORD;
          }
        case 117: break;
        case 14:
          { return JavaTokenType.PLUS;
          }
        case 118: break;
        case 53:
          { return JavaTokenType.XOREQ;
          }
        case 119: break;
        case 60:
          { return JavaTokenType.INT_KEYWORD;
          }
        case 120: break;
        case 78:
          { return JavaTokenType.SHORT_KEYWORD;
          }
        case 121: break;
        case 43:
          { return JavaTokenType.EQEQ;
          }
        case 122: break;
        case 99:
          { return JavaTokenType.ABSTRACT_KEYWORD;
          }
        case 123: break;
        case 67:
          { return JavaTokenType.NULL_KEYWORD;
          }
        case 124: break;
        case 93:
          { return JavaTokenType.EXTENDS_KEYWORD;
          }
        case 125: break;
        case 50:
          { return JavaTokenType.LTLT;
          }
        case 126: break;
        case 20:
          { return JavaTokenType.LPARENTH;
          }
        case 127: break;
        case 12:
          { return JavaTokenType.EXCL;
          }
        case 128: break;
        case 100:
          { return JavaTokenType.STRICTFP_KEYWORD;
          }
        case 129: break;
        case 37:
          { return JavaTokenType.DIVEQ;
          }
        case 130: break;
        case 87:
          { return JavaTokenType.STATIC_KEYWORD;
          }
        case 131: break;
        case 39:
          { return JavaTokenType.MINUSMINUS;
          }
        case 132: break;
        case 74:
          { return JavaTokenType.FALSE_KEYWORD;
          }
        case 133: break;
        case 1:
          { return JavaTokenType.BAD_CHARACTER;
          }
        case 134: break;
        case 88:
          { return JavaTokenType.SWITCH_KEYWORD;
          }
        case 135: break;
        case 26:
          { return JavaTokenType.SEMICOLON;
          }
        case 136: break;
        case 18:
          { return JavaTokenType.XOR;
          }
        case 137: break;
        case 34:
          { return JavaTokenType.DOUBLE_LITERAL;
          }
        case 138: break;
        case 45:
          { return JavaTokenType.OREQ;
          }
        case 139: break;
        case 11:
          { return JavaTokenType.EQ;
          }
        case 140: break;
        case 5:
          { return JavaTokenType.DIV;
          }
        case 141: break;
        case 64:
          { return JavaTokenType.ELSE_KEYWORD;
          }
        case 142: break;
        case 59:
          { return JavaTokenType.NEW_KEYWORD;
          }
        case 143: break;
        case 56:
          { return JavaTokenType.ELLIPSIS;
          }
        case 144: break;
        case 52:
          { return JavaTokenType.ANDAND;
          }
        case 145: break;
        case 79:
          { return JavaTokenType.BREAK_KEYWORD;
          }
        case 146: break;
        case 9:
          { return JavaTokenType.CHARACTER_LITERAL;
          }
        case 147: break;
        case 51:
          { return JavaTokenType.ANDEQ;
          }
        case 148: break;
        case 2:
          { return JavaTokenType.INTEGER_LITERAL;
          }
        case 149: break;
        case 75:
          { return JavaTokenType.FLOAT_KEYWORD;
          }
        case 150: break;
        case 10:
          { return JavaTokenType.STRING_LITERAL;
          }
        case 151: break;
        case 70:
          { return JavaTokenType.CHAR_KEYWORD;
          }
        case 152: break;
        case 89:
          { return JavaTokenType.NATIVE_KEYWORD;
          }
        case 153: break;
        case 42:
          { return JavaTokenType.DO_KEYWORD;
          }
        case 154: break;
        case 7:
          { return JavaTokenType.DOT;
          }
        case 155: break;
        case 28:
          { return JavaTokenType.TILDE;
          }
        case 156: break;
        case 108:
          { return JavaTokenType.SYNCHRONIZED_KEYWORD;
          }
        case 157: break;
        case 35:
          { return JavaTokenType.END_OF_LINE_COMMENT;
          }
        case 158: break;
        case 38:
          { return JavaTokenType.ASTERISKEQ;
          }
        case 159: break;
        case 77:
          { return JavaTokenType.SUPER_KEYWORD;
          }
        case 160: break;
        case 40:
          { return JavaTokenType.MINUSEQ;
          }
        case 161: break;
        case 61:
          { return JavaTokenType.LTLTEQ;
          }
        case 162: break;
        case 71:
          { return JavaTokenType.GOTO_KEYWORD;
          }
        case 163: break;
        case 25:
          { return JavaTokenType.RBRACKET;
          }
        case 164: break;
        case 86:
          { return myAssertKeywordEnabled ? JavaTokenType.ASSERT_KEYWORD : JavaTokenType.IDENTIFIER;
          }
        case 165: break;
        case 36:
          { return JavaTokenType.C_STYLE_COMMENT;
          }
        case 166: break;
        case 15:
          { return JavaTokenType.LT;
          }
        case 167: break;
        case 41:
          { return JavaTokenType.IF_KEYWORD;
          }
        case 168: break;
        case 8:
          { return JavaTokenType.MINUS;
          }
        case 169: break;
        case 83:
          { return JavaTokenType.WHILE_KEYWORD;
          }
        case 170: break;
        case 68:
          { return JavaTokenType.BYTE_KEYWORD;
          }
        case 171: break;
        case 94:
          { return JavaTokenType.FINALLY_KEYWORD;
          }
        case 172: break;
        case 72:
          { return JavaTokenType.VOID_KEYWORD;
          }
        case 173: break;
        case 29:
          { return JavaTokenType.QUEST;
          }
        case 174: break;
        case 19:
          { return JavaTokenType.PERC;
          }
        case 175: break;
        case 107:
          { return JavaTokenType.IMPLEMENTS_KEYWORD;
          }
        case 176: break;
        case 84:
          { return JavaTokenType.THROWS_KEYWORD;
          }
        case 177: break;
        case 76:
          { return JavaTokenType.FINAL_KEYWORD;
          }
        case 178: break;
        case 91:
          { return JavaTokenType.DOUBLE_KEYWORD;
          }
        case 179: break;
        case 105:
          { return JavaTokenType.PROTECTED_KEYWORD;
          }
        case 180: break;
        case 101:
          { return JavaTokenType.CONTINUE_KEYWORD;
          }
        case 181: break;
        case 98:
          { return JavaTokenType.PACKAGE_KEYWORD;
          }
        case 182: break;
        case 16:
          { return JavaTokenType.GT;
          }
        case 183: break;
        case 24:
          { return JavaTokenType.LBRACKET;
          }
        case 184: break;
        case 32:
          { return JavaTokenType.LONG_LITERAL;
          }
        case 185: break;
        case 58:
          { return JavaTokenType.FOR_KEYWORD;
          }
        case 186: break;
        case 96:
          { return JavaTokenType.DEFAULT_KEYWORD;
          }
        case 187: break;
        case 47:
          { return JavaTokenType.PLUSEQ;
          }
        case 188: break;
        case 85:
          { return JavaTokenType.RETURN_KEYWORD;
          }
        case 189: break;
        case 62:
          { return JavaTokenType.TRUE_KEYWORD;
          }
        case 190: break;
        case 48:
          { return JavaTokenType.PLUSPLUS;
          }
        case 191: break;
        case 46:
          { return JavaTokenType.OROR;
          }
        case 192: break;
        case 13:
          { return JavaTokenType.OR;
          }
        case 193: break;
        case 3:
          { return JavaTokenType.IDENTIFIER;
          }
        case 194: break;
        case 54:
          { return JavaTokenType.PERCEQ;
          }
        case 195: break;
        case 30:
          { return JavaTokenType.COLON;
          }
        case 196: break;
        case 102:
          { return JavaTokenType.VOLATILE_KEYWORD;
          }
        case 197: break;
        case 104:
          { return JavaTokenType.INTERFACE_KEYWORD;
          }
        case 198: break;
        case 106:
          { return JavaTokenType.INSTANCEOF_KEYWORD;
          }
        case 199: break;
        case 103:
          { return JavaTokenType.TRANSIENT_KEYWORD;
          }
        case 200: break;
        case 95:
          { return JavaTokenType.BOOLEAN_KEYWORD;
          }
        case 201: break;
        case 69:
          { return JavaTokenType.CASE_KEYWORD;
          }
        case 202: break;
        case 6:
          { return JavaTokenType.ASTERISK;
          }
        case 203: break;
        case 90:
          { return JavaTokenType.IMPORT_KEYWORD;
          }
        case 204: break;
        case 31:
          { return JavaTokenType.AT;
          }
        case 205: break;
        case 44:
          { return JavaTokenType.NE;
          }
        case 206: break;
        case 57:
          { return JavaTokenType.TRY_KEYWORD;
          }
        case 207: break;
        case 80:
          { return JavaTokenType.CATCH_KEYWORD;
          }
        case 208: break;
        case 33:
          { return JavaTokenType.FLOAT_LITERAL;
          }
        case 209: break;
        case 17:
          { return JavaTokenType.AND;
          }
        case 210: break;
        case 73:
          { return JavaTokenType.THROW_KEYWORD;
          }
        case 211: break;
        case 21:
          { return JavaTokenType.RPARENTH;
          }
        case 212: break;
        case 4:
          { return JavaTokenType.WHITE_SPACE;
          }
        case 213: break;
        case 92:
          { return JavaTokenType.PUBLIC_KEYWORD;
          }
        case 214: break;
        case 49:
          { return JavaTokenType.LE;
          }
        case 215: break;
        case 82:
          { return JavaTokenType.CONST_KEYWORD;
          }
        case 216: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
