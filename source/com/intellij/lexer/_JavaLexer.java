/* The following code was generated by JFlex 1.4 on 3/26/05 5:38 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;
import com.intellij.psi.*;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 3/26/05 5:38 PM from the specification file
 * <tt>C:/Irida/tools/lexer/_JavaLexer.flex</tt>
 */
class _JavaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\5\1\10\1\0\1\5\1\10\22\0\1\5\1\55\1\23"+
    "\1\0\1\1\1\64\1\62\1\21\1\65\1\66\1\7\1\57\1\74"+
    "\1\20\1\16\1\6\1\11\7\3\2\2\1\77\1\73\1\60\1\54"+
    "\1\61\1\76\1\100\3\4\1\15\1\17\1\14\5\1\1\13\13\1"+
    "\1\12\2\1\1\71\1\22\1\72\1\63\1\1\1\0\1\31\1\35"+
    "\1\36\1\44\1\27\1\30\1\47\1\42\1\43\1\1\1\40\1\32"+
    "\1\45\1\34\1\37\1\50\1\1\1\25\1\33\1\24\1\26\1\51"+
    "\1\52\1\46\1\41\1\53\1\67\1\56\1\70\1\75\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\11\1\12\20\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\3\42\1\43\1\44\1\45"+
    "\1\46\1\0\2\3\1\0\1\47\1\50\2\11\2\12"+
    "\34\2\1\51\3\2\1\52\6\2\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\42\1\44\1\67\1\70\2\2\1\71\10\2"+
    "\1\72\13\2\1\73\11\2\1\74\14\2\1\75\1\0"+
    "\2\67\1\76\2\2\1\77\1\2\1\100\1\101\6\2"+
    "\1\102\6\2\1\103\3\2\1\104\1\2\1\105\3\2"+
    "\1\106\6\2\1\107\5\2\1\110\1\2\1\44\1\0"+
    "\1\2\1\111\2\2\1\112\1\113\1\114\4\2\1\115"+
    "\1\2\1\116\2\2\1\117\1\2\1\120\1\121\1\2"+
    "\1\122\13\2\1\123\1\2\1\124\1\125\2\2\1\126"+
    "\2\2\1\127\1\2\1\130\1\131\5\2\1\132\1\2"+
    "\1\133\2\2\1\134\3\2\1\135\1\136\3\2\1\137"+
    "\4\2\1\140\1\2\1\141\1\142\2\2\1\143\1\144"+
    "\1\2\1\145\4\2\1\146\1\147\1\2\1\150\2\2"+
    "\1\151\1\2\1\152\1\153\1\2\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\101\0\u0861\0\u08a2\0\u08e3\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\101\0\101\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\101\0\101"+
    "\0\101\0\u0b2c\0\u0b6d\0\101\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\202\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\u1554\0\101\0\101\0\101\0\101\0\u1595"+
    "\0\u15d6\0\u1617\0\101\0\u1658\0\u1699\0\202\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\202\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\202\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\101\0\u2143\0\u2184\0\101\0\202\0\u21c5\0\u2206"+
    "\0\202\0\u2247\0\202\0\202\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\202\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512"+
    "\0\u2553\0\202\0\u2594\0\u25d5\0\u2616\0\202\0\u2657\0\202"+
    "\0\u2698\0\u26d9\0\u271a\0\202\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\202\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\202\0\u2a26\0\101\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b"+
    "\0\202\0\202\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\202"+
    "\0\u2cf1\0\202\0\u2d32\0\u2d73\0\202\0\u2db4\0\202\0\202"+
    "\0\u2df5\0\202\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b"+
    "\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\202\0\u3101\0\202"+
    "\0\202\0\u3142\0\u3183\0\202\0\u31c4\0\u3205\0\202\0\u3246"+
    "\0\202\0\202\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\202"+
    "\0\u33cc\0\202\0\u340d\0\u344e\0\202\0\u348f\0\u34d0\0\u3511"+
    "\0\202\0\202\0\u3552\0\u3593\0\u35d4\0\202\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\202\0\u3719\0\202\0\202\0\u375a\0\u379b"+
    "\0\202\0\202\0\u37dc\0\202\0\u381d\0\u385e\0\u389f\0\u38e0"+
    "\0\202\0\202\0\u3921\0\202\0\u3962\0\u39a3\0\202\0\u39e4"+
    "\0\202\0\202\0\u3a25\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\3\1\5\1\6\1\7\1\5"+
    "\1\10\4\3\1\11\1\3\1\12\1\13\1\2\1\14"+
    "\1\15\1\16\1\3\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\4\3\1\27\1\30\2\3\1\31"+
    "\1\32\1\33\1\34\1\3\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\102\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\30\3\27\0\2\4\5\0\1\4\1\0\1\62\1\63"+
    "\1\64\1\65\1\66\7\0\1\66\1\63\1\0\1\62"+
    "\11\0\1\64\41\0\1\5\2\0\1\5\76\0\1\67"+
    "\1\70\44\0\1\71\100\0\1\72\26\0\1\73\1\74"+
    "\5\0\1\74\1\75\1\62\1\63\1\64\1\65\1\66"+
    "\7\0\1\66\1\63\1\0\1\62\11\0\1\64\1\0"+
    "\1\75\34\0\2\65\5\0\1\65\4\0\1\76\102\0"+
    "\1\77\33\0\1\100\24\0\10\13\1\0\10\13\1\101"+
    "\1\102\56\13\10\14\1\0\11\14\1\103\1\104\55\14"+
    "\1\0\4\3\4\0\5\3\1\0\1\3\4\0\1\3"+
    "\1\105\14\3\1\106\11\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\3\3\1\107\24\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\6\3\1\110\1\3"+
    "\1\111\11\3\1\112\5\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\5\3\1\113\1\114\4\3\1\115"+
    "\3\3\1\116\10\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\7\3\1\117\1\3\1\120\16\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\13\3\1\121"+
    "\14\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\1\122\1\3\1\123\12\3\1\124\1\125\7\3\1\126"+
    "\1\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\2\3\1\127\1\130\1\3\1\131\22\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\1\3\1\132\11\3"+
    "\1\133\1\3\1\134\12\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\5\3\1\135\1\136\4\3\1\137"+
    "\2\3\1\140\11\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\4\3\1\141\3\3\1\142\10\3\1\143"+
    "\6\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\3\3\1\144\7\3\1\145\14\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\13\3\1\146\14\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\3\1\147"+
    "\1\150\2\3\1\151\22\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\13\3\1\152\14\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\16\3\1\153\11\3"+
    "\101\0\1\154\100\0\1\155\100\0\1\156\1\0\1\157"+
    "\76\0\1\160\2\0\1\161\75\0\1\162\3\0\1\163"+
    "\74\0\1\164\5\0\1\165\72\0\1\166\100\0\1\167"+
    "\26\0\2\65\5\0\1\65\2\0\1\63\1\64\1\0"+
    "\1\66\7\0\1\66\1\63\13\0\1\64\36\0\2\170"+
    "\5\0\1\170\2\0\1\63\1\64\2\0\1\170\7\0"+
    "\1\63\13\0\1\64\12\0\1\170\21\0\10\67\1\0"+
    "\70\67\7\171\1\172\71\171\2\0\2\73\5\0\1\73"+
    "\2\0\1\63\1\64\1\65\1\66\7\0\1\66\1\63"+
    "\13\0\1\64\36\0\1\73\1\74\5\0\1\74\1\0"+
    "\1\62\1\63\1\64\1\65\1\66\7\0\1\66\1\63"+
    "\1\0\1\62\11\0\1\64\36\0\3\75\4\0\1\75"+
    "\1\0\1\62\2\75\1\0\1\75\7\0\3\75\1\62"+
    "\2\0\2\75\5\0\1\75\52\0\1\173\62\0\10\13"+
    "\1\0\70\13\10\14\1\0\70\14\1\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\2\3\1\174\2\3\1\175"+
    "\7\3\1\176\12\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\3\1\177\15\3\1\200\10\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\201\27\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\7\3"+
    "\1\202\20\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\2\3\1\203\25\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\1\204\27\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\6\3\1\205\21\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\13\3\1\206"+
    "\14\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\1\3\1\207\26\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\10\3\1\210\17\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\7\3\1\211\20\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\7\3\1\212"+
    "\20\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\10\3\1\213\17\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\3\1\214\3\3\1\215\22\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\24\3\1\216"+
    "\3\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\10\3\1\217\17\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\13\3\1\220\14\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\17\3\1\221\10\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\6\3\1\222"+
    "\21\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\26\3\1\223\1\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\224\27\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\3\3\1\225\24\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\13\3\1\226\14\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\1\227"+
    "\27\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\1\230\6\3\1\231\20\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\5\3\1\232\22\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\10\3\1\233\17\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\5\3"+
    "\1\234\22\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\1\235\6\3\1\236\20\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\24\3\1\237\3\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\4\3\1\240"+
    "\23\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\2\3\1\241\25\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\242\27\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\13\3\1\243\3\3\1\244\10\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\11\3"+
    "\1\245\16\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\12\3\1\246\15\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\6\3\1\247\10\3\1\250\10\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\17\3"+
    "\1\251\10\3\101\0\1\252\26\0\2\170\5\0\1\170"+
    "\2\0\1\63\1\64\12\0\1\63\13\0\1\64\34\0"+
    "\7\171\1\253\71\171\6\254\1\255\1\172\71\254\1\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\3\3\1\256"+
    "\24\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\10\3\1\257\17\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\13\3\1\260\14\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\7\3\1\261\20\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\2\3\1\262"+
    "\25\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\3\3\1\263\24\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\21\3\1\264\6\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\3\3\1\265\24\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\7\3\1\266"+
    "\20\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\5\3\1\267\22\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\5\3\1\270\22\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\3\3\1\271\24\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\272\27\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\23\3"+
    "\1\273\4\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\17\3\1\274\10\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\1\275\27\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\3\3\1\276\24\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\12\3\1\277"+
    "\15\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\1\3\1\300\26\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\301\27\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\6\3\1\302\21\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\17\3\1\303\10\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\5\3"+
    "\1\304\22\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\6\3\1\305\21\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\3\3\1\306\24\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\12\3\1\307\15\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\3\3"+
    "\1\310\24\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\7\3\1\311\20\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\1\312\6\3\1\313\20\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\3\1\314"+
    "\26\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\3\3\1\315\24\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\316\27\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\6\3\1\317\4\3\1\320\14\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\5\3"+
    "\1\321\22\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\11\3\1\322\16\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\13\3\1\323\14\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\1\324\27\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\25\3\1\325"+
    "\2\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\6\3\1\326\21\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\14\3\1\327\13\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\5\3\1\330\22\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\20\3\1\331"+
    "\7\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\6\3\1\332\21\3\25\0\6\171\1\333\1\253\71\171"+
    "\7\254\1\334\71\254\1\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\7\3\1\335\20\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\26\3\1\336\1\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\3\1\337"+
    "\26\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\10\3\1\340\17\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\3\3\1\341\24\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\1\342\27\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\6\3\1\343\21\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\1\3"+
    "\1\344\26\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\1\3\1\345\26\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\12\3\1\346\15\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\17\3\1\347\10\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\1\3"+
    "\1\350\26\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\16\3\1\351\11\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\1\352\27\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\12\3\1\353\15\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\25\3\1\354"+
    "\2\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\14\3\1\355\13\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\3\3\1\356\24\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\16\3\1\357\11\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\7\3\1\360"+
    "\20\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\17\3\1\361\10\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\1\362\27\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\1\3\1\363\26\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\5\3\1\364\22\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\3\3"+
    "\1\365\24\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\1\3\1\366\26\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\2\3\1\367\25\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\6\3\1\370\21\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\3\3"+
    "\1\371\24\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\5\3\1\372\22\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\17\3\1\373\10\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\5\3\1\374\22\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\1\375"+
    "\27\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\3\3\1\376\24\3\25\0\6\254\1\255\1\334\71\254"+
    "\1\0\4\3\4\0\5\3\1\0\1\3\4\0\17\3"+
    "\1\377\10\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\7\3\1\u0100\20\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\10\3\1\u0101\17\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\20\3\1\u0102\7\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\6\3"+
    "\1\u0103\21\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\1\u0104\27\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\5\3\1\u0105\22\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\1\u0106\27\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\12\3\1\u0107\15\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\1\3"+
    "\1\u0108\26\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\16\3\1\u0109\11\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\3\3\1\u010a\24\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\5\3\1\u010b\22\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\10\3"+
    "\1\u010c\17\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\4\3\1\u010d\23\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\10\3\1\u010e\17\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\21\3\1\u010f\6\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\1\u0110"+
    "\27\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\6\3\1\u0111\21\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\3\3\1\u0112\24\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\12\3\1\u0113\15\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\u0114\27\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\12\3"+
    "\1\u0115\15\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\23\3\1\u0116\4\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\17\3\1\u0117\10\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\3\3\1\u0118\24\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\7\3"+
    "\1\u0119\20\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\15\3\1\u011a\12\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\12\3\1\u011b\15\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\4\3\1\u011c\23\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\13\3"+
    "\1\u011d\14\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\10\3\1\u011e\17\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\2\3\1\u011f\25\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\5\3\1\u0120\22\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\12\3"+
    "\1\u0121\15\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\3\3\1\u0122\24\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\1\u0123\27\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\1\u0124\27\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\3\3\1\u0125\24\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\3\3"+
    "\1\u0126\24\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\6\3\1\u0127\21\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\10\3\1\u0128\17\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\1\u0129\27\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\24\3\1\u012a"+
    "\3\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\10\3\1\u012b\17\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\3\3\1\u012c\24\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\12\3\1\u012d\15\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\3\3\1\u012e"+
    "\24\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\10\3\1\u012f\17\3\26\0\4\3\4\0\5\3\1\0"+
    "\1\3\4\0\3\3\1\u0130\24\3\26\0\4\3\4\0"+
    "\5\3\1\0\1\3\4\0\3\3\1\u0131\24\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\1\u0132\27\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\17\3"+
    "\1\u0133\10\3\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\3\3\1\u0134\24\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\13\3\1\u0135\14\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\1\u0136\27\3\26\0"+
    "\4\3\4\0\5\3\1\0\1\3\4\0\20\3\1\u0137"+
    "\7\3\26\0\4\3\4\0\5\3\1\0\1\3\4\0"+
    "\27\3\1\u0138\26\0\4\3\4\0\5\3\1\0\1\3"+
    "\4\0\4\3\1\u0139\23\3\26\0\4\3\4\0\5\3"+
    "\1\0\1\3\4\0\7\3\1\u013a\20\3\26\0\4\3"+
    "\4\0\5\3\1\0\1\3\4\0\3\3\1\u013b\24\3"+
    "\26\0\4\3\4\0\5\3\1\0\1\3\4\0\20\3"+
    "\1\u013c\7\3\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\3\1\17\11\4\1\2\11"+
    "\1\0\2\1\1\0\3\11\2\1\1\11\47\1\7\11"+
    "\1\1\4\11\3\1\1\11\56\1\1\11\1\0\1\1"+
    "\1\11\55\1\1\11\1\0\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myAssertKeywordEnabled;
  private boolean myJdk15Enabled;

  public _JavaLexer(boolean isAssertKeywordEnabled, boolean jdk15Enabled){
    this((java.io.Reader)null);
    myAssertKeywordEnabled = isAssertKeywordEnabled;
    myJdk15Enabled = jdk15Enabled;
  }


  _JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66:
          { return JavaTokenType.LONG_KEYWORD;
          }
        case 109: break;
        case 97:
          { return JavaTokenType.PRIVATE_KEYWORD;
          }
        case 110: break;
        case 27:
          { return JavaTokenType.COMMA;
          }
        case 111: break;
        case 23:
          { return JavaTokenType.RBRACE;
          }
        case 112: break;
        case 22:
          { return JavaTokenType.LBRACE;
          }
        case 113: break;
        case 65:
          { return myJdk15Enabled ? JavaTokenType.ENUM_KEYWORD : JavaTokenType.IDENTIFIER;
          }
        case 114: break;
        case 55:
          { return JavaTokenType.DOC_COMMENT;
          }
        case 115: break;
        case 63:
          { return JavaTokenType.THIS_KEYWORD;
          }
        case 116: break;
        case 81:
          { return JavaTokenType.CLASS_KEYWORD;
          }
        case 117: break;
        case 14:
          { return JavaTokenType.PLUS;
          }
        case 118: break;
        case 53:
          { return JavaTokenType.XOREQ;
          }
        case 119: break;
        case 60:
          { return JavaTokenType.INT_KEYWORD;
          }
        case 120: break;
        case 78:
          { return JavaTokenType.SHORT_KEYWORD;
          }
        case 121: break;
        case 43:
          { return JavaTokenType.EQEQ;
          }
        case 122: break;
        case 99:
          { return JavaTokenType.ABSTRACT_KEYWORD;
          }
        case 123: break;
        case 67:
          { return JavaTokenType.NULL_KEYWORD;
          }
        case 124: break;
        case 93:
          { return JavaTokenType.EXTENDS_KEYWORD;
          }
        case 125: break;
        case 50:
          { return JavaTokenType.LTLT;
          }
        case 126: break;
        case 20:
          { return JavaTokenType.LPARENTH;
          }
        case 127: break;
        case 12:
          { return JavaTokenType.EXCL;
          }
        case 128: break;
        case 100:
          { return JavaTokenType.STRICTFP_KEYWORD;
          }
        case 129: break;
        case 37:
          { return JavaTokenType.DIVEQ;
          }
        case 130: break;
        case 87:
          { return JavaTokenType.STATIC_KEYWORD;
          }
        case 131: break;
        case 39:
          { return JavaTokenType.MINUSMINUS;
          }
        case 132: break;
        case 74:
          { return JavaTokenType.FALSE_KEYWORD;
          }
        case 133: break;
        case 1:
          { return JavaTokenType.BAD_CHARACTER;
          }
        case 134: break;
        case 88:
          { return JavaTokenType.SWITCH_KEYWORD;
          }
        case 135: break;
        case 26:
          { return JavaTokenType.SEMICOLON;
          }
        case 136: break;
        case 18:
          { return JavaTokenType.XOR;
          }
        case 137: break;
        case 34:
          { return JavaTokenType.DOUBLE_LITERAL;
          }
        case 138: break;
        case 45:
          { return JavaTokenType.OREQ;
          }
        case 139: break;
        case 11:
          { return JavaTokenType.EQ;
          }
        case 140: break;
        case 5:
          { return JavaTokenType.DIV;
          }
        case 141: break;
        case 64:
          { return JavaTokenType.ELSE_KEYWORD;
          }
        case 142: break;
        case 59:
          { return JavaTokenType.NEW_KEYWORD;
          }
        case 143: break;
        case 56:
          { return JavaTokenType.ELLIPSIS;
          }
        case 144: break;
        case 52:
          { return JavaTokenType.ANDAND;
          }
        case 145: break;
        case 79:
          { return JavaTokenType.BREAK_KEYWORD;
          }
        case 146: break;
        case 9:
          { return JavaTokenType.CHARACTER_LITERAL;
          }
        case 147: break;
        case 51:
          { return JavaTokenType.ANDEQ;
          }
        case 148: break;
        case 3:
          { return JavaTokenType.INTEGER_LITERAL;
          }
        case 149: break;
        case 75:
          { return JavaTokenType.FLOAT_KEYWORD;
          }
        case 150: break;
        case 10:
          { return JavaTokenType.STRING_LITERAL;
          }
        case 151: break;
        case 70:
          { return JavaTokenType.CHAR_KEYWORD;
          }
        case 152: break;
        case 89:
          { return JavaTokenType.NATIVE_KEYWORD;
          }
        case 153: break;
        case 42:
          { return JavaTokenType.DO_KEYWORD;
          }
        case 154: break;
        case 7:
          { return JavaTokenType.DOT;
          }
        case 155: break;
        case 28:
          { return JavaTokenType.TILDE;
          }
        case 156: break;
        case 108:
          { return JavaTokenType.SYNCHRONIZED_KEYWORD;
          }
        case 157: break;
        case 35:
          { return JavaTokenType.END_OF_LINE_COMMENT;
          }
        case 158: break;
        case 38:
          { return JavaTokenType.ASTERISKEQ;
          }
        case 159: break;
        case 77:
          { return JavaTokenType.SUPER_KEYWORD;
          }
        case 160: break;
        case 40:
          { return JavaTokenType.MINUSEQ;
          }
        case 161: break;
        case 61:
          { return JavaTokenType.LTLTEQ;
          }
        case 162: break;
        case 71:
          { return JavaTokenType.GOTO_KEYWORD;
          }
        case 163: break;
        case 25:
          { return JavaTokenType.RBRACKET;
          }
        case 164: break;
        case 86:
          { return myAssertKeywordEnabled ? JavaTokenType.ASSERT_KEYWORD : JavaTokenType.IDENTIFIER;
          }
        case 165: break;
        case 36:
          { return JavaTokenType.C_STYLE_COMMENT;
          }
        case 166: break;
        case 15:
          { return JavaTokenType.LT;
          }
        case 167: break;
        case 41:
          { return JavaTokenType.IF_KEYWORD;
          }
        case 168: break;
        case 8:
          { return JavaTokenType.MINUS;
          }
        case 169: break;
        case 83:
          { return JavaTokenType.WHILE_KEYWORD;
          }
        case 170: break;
        case 68:
          { return JavaTokenType.BYTE_KEYWORD;
          }
        case 171: break;
        case 94:
          { return JavaTokenType.FINALLY_KEYWORD;
          }
        case 172: break;
        case 72:
          { return JavaTokenType.VOID_KEYWORD;
          }
        case 173: break;
        case 29:
          { return JavaTokenType.QUEST;
          }
        case 174: break;
        case 19:
          { return JavaTokenType.PERC;
          }
        case 175: break;
        case 107:
          { return JavaTokenType.IMPLEMENTS_KEYWORD;
          }
        case 176: break;
        case 84:
          { return JavaTokenType.THROWS_KEYWORD;
          }
        case 177: break;
        case 76:
          { return JavaTokenType.FINAL_KEYWORD;
          }
        case 178: break;
        case 91:
          { return JavaTokenType.DOUBLE_KEYWORD;
          }
        case 179: break;
        case 105:
          { return JavaTokenType.PROTECTED_KEYWORD;
          }
        case 180: break;
        case 101:
          { return JavaTokenType.CONTINUE_KEYWORD;
          }
        case 181: break;
        case 98:
          { return JavaTokenType.PACKAGE_KEYWORD;
          }
        case 182: break;
        case 16:
          { return JavaTokenType.GT;
          }
        case 183: break;
        case 24:
          { return JavaTokenType.LBRACKET;
          }
        case 184: break;
        case 32:
          { return JavaTokenType.LONG_LITERAL;
          }
        case 185: break;
        case 58:
          { return JavaTokenType.FOR_KEYWORD;
          }
        case 186: break;
        case 96:
          { return JavaTokenType.DEFAULT_KEYWORD;
          }
        case 187: break;
        case 47:
          { return JavaTokenType.PLUSEQ;
          }
        case 188: break;
        case 85:
          { return JavaTokenType.RETURN_KEYWORD;
          }
        case 189: break;
        case 62:
          { return JavaTokenType.TRUE_KEYWORD;
          }
        case 190: break;
        case 48:
          { return JavaTokenType.PLUSPLUS;
          }
        case 191: break;
        case 46:
          { return JavaTokenType.OROR;
          }
        case 192: break;
        case 13:
          { return JavaTokenType.OR;
          }
        case 193: break;
        case 2:
          { return JavaTokenType.IDENTIFIER;
          }
        case 194: break;
        case 54:
          { return JavaTokenType.PERCEQ;
          }
        case 195: break;
        case 30:
          { return JavaTokenType.COLON;
          }
        case 196: break;
        case 102:
          { return JavaTokenType.VOLATILE_KEYWORD;
          }
        case 197: break;
        case 104:
          { return JavaTokenType.INTERFACE_KEYWORD;
          }
        case 198: break;
        case 106:
          { return JavaTokenType.INSTANCEOF_KEYWORD;
          }
        case 199: break;
        case 103:
          { return JavaTokenType.TRANSIENT_KEYWORD;
          }
        case 200: break;
        case 95:
          { return JavaTokenType.BOOLEAN_KEYWORD;
          }
        case 201: break;
        case 69:
          { return JavaTokenType.CASE_KEYWORD;
          }
        case 202: break;
        case 6:
          { return JavaTokenType.ASTERISK;
          }
        case 203: break;
        case 90:
          { return JavaTokenType.IMPORT_KEYWORD;
          }
        case 204: break;
        case 31:
          { return JavaTokenType.AT;
          }
        case 205: break;
        case 44:
          { return JavaTokenType.NE;
          }
        case 206: break;
        case 57:
          { return JavaTokenType.TRY_KEYWORD;
          }
        case 207: break;
        case 80:
          { return JavaTokenType.CATCH_KEYWORD;
          }
        case 208: break;
        case 33:
          { return JavaTokenType.FLOAT_LITERAL;
          }
        case 209: break;
        case 17:
          { return JavaTokenType.AND;
          }
        case 210: break;
        case 73:
          { return JavaTokenType.THROW_KEYWORD;
          }
        case 211: break;
        case 21:
          { return JavaTokenType.RPARENTH;
          }
        case 212: break;
        case 4:
          { return JavaTokenType.WHITE_SPACE;
          }
        case 213: break;
        case 92:
          { return JavaTokenType.PUBLIC_KEYWORD;
          }
        case 214: break;
        case 49:
          { return JavaTokenType.LE;
          }
        case 215: break;
        case 82:
          { return JavaTokenType.CONST_KEYWORD;
          }
        case 216: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
