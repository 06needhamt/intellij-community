/* The following code was generated by JFlex 1.4.1 on 1/13/06 7:29 PM */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/13/06 7:29 PM from the specification file
 * <tt>C:/work/Irida/tools/lexer/_OldXmlLexer.flex</tt>
 */
public class _OldXmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 11;
  public static final int DECL_ATTR_VALUE_DQ = 3;
  public static final int DECL_ATTR = 2;
  public static final int ATTRIBUTE_VALUE_START = 8;
  public static final int DECL_ATTR_VALUE_SQ = 4;
  public static final int ATTRIBUTE_VALUE_DQ = 9;
  public static final int CONDITIONAL = 18;
  public static final int DECL = 1;
  public static final int ATTRIBUTE_VALUE_SQ = 10;
  public static final int DOCTYPE_EXTERNAL_ID = 13;
  public static final int CDATA = 17;
  public static final int COMMENT = 7;
  public static final int TAG_NAME = 5;
  public static final int DOCTYPE_MARKUP = 14;
  public static final int DOCTYPE_MARKUP_DQ = 15;
  public static final int YYINITIAL = 0;
  public static final int TAG_ATTRIBUTES = 6;
  public static final int DOCTYPE = 12;
  public static final int DOCTYPE_MARKUP_SQ = 16;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\43\1\12\1\4\1\35\1\0"+
    "\1\34\1\32\1\5\1\52\1\53\1\55\1\54\1\57\1\7\1\6"+
    "\1\11\12\2\1\1\1\33\1\10\1\44\1\21\1\40\1\0\1\16"+
    "\1\51\1\14\1\15\1\26\1\61\1\27\1\1\1\22\2\1\1\24"+
    "\1\50\1\23\1\30\1\46\1\60\1\31\1\47\1\17\1\25\2\1"+
    "\1\62\1\45\1\1\1\13\1\0\1\20\1\0\1\1\1\0\6\37"+
    "\5\1\1\42\1\41\12\1\1\36\2\1\1\0\1\56\55\0\1\1"+
    "\12\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u013f\1"+
    "\31\0\162\1\4\0\14\1\16\0\5\1\11\0\1\1\213\0\1\1"+
    "\13\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\54\1"+
    "\1\0\46\1\1\0\5\1\4\0\202\1\10\0\105\1\1\0\46\1"+
    "\2\0\2\1\6\0\20\1\41\0\46\1\2\0\1\1\7\0\47\1"+
    "\110\0\33\1\5\0\3\1\56\0\32\1\5\0\13\1\43\0\2\1"+
    "\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1"+
    "\2\0\1\1\20\0\1\1\1\0\36\1\35\0\3\1\60\0\46\1"+
    "\13\0\1\1\u0152\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1"+
    "\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"+
    "\3\0\4\1\3\0\1\1\36\0\2\1\1\0\3\1\16\0\2\1"+
    "\23\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\37\0\4\1\1\0\1\1\23\0\3\1"+
    "\20\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\5\1\3\0\1\1\22\0\1\1\17\0\2\1\43\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\3\0\1\1\36\0\2\1\1\0\3\1\17\0\1\1\21\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\10\1\1\0\3\1"+
    "\113\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\46\0\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
    "\1\0\5\1\3\0\1\1\40\0\1\1\1\0\2\1\43\0\10\1"+
    "\1\0\3\1\1\0\27\1\1\0\20\1\46\0\2\1\43\0\22\1"+
    "\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1"+
    "\1\0\2\1\14\0\7\1\72\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\25\0\2\1\42\0\1\1"+
    "\77\0\10\1\1\0\42\1\35\0\4\1\164\0\42\1\1\0\5\1"+
    "\1\0\2\1\45\0\6\1\112\0\46\1\12\0\51\1\7\0\132\1"+
    "\5\0\104\1\5\0\122\1\6\0\7\1\1\0\77\1\1\0\1\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\47\1"+
    "\1\0\1\1\1\0\4\1\2\0\37\1\1\0\1\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\7\1"+
    "\1\0\27\1\1\0\37\1\1\0\1\1\1\0\4\1\2\0\7\1"+
    "\1\0\47\1\1\0\23\1\105\0\125\1\14\0\u026c\1\2\0\10\1"+
    "\12\0\32\1\5\0\113\1\25\0\15\1\1\0\4\1\16\0\22\1"+
    "\16\0\22\1\16\0\15\1\1\0\3\1\17\0\64\1\43\0\1\1"+
    "\4\0\1\1\103\0\130\1\10\0\51\1\127\0\35\1\63\0\36\1"+
    "\2\0\5\1\u038b\0\154\1\224\0\234\1\4\0\132\1\6\0\26\1"+
    "\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1"+
    "\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
    "\4\0\15\1\5\0\3\1\1\0\7\1\164\0\1\1\15\0\1\1"+
    "\202\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\3\1"+
    "\1\0\7\1\3\0\3\1\5\0\5\1\u0ebb\0\2\1\52\0\5\1"+
    "\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0\4\1"+
    "\5\0\50\1\4\0\136\1\21\0\30\1\70\0\20\1\u0200\0\u19b6\1"+
    "\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0\u012e\1\2\0\73\1"+
    "\225\0\7\1\14\0\5\1\5\0\1\1\1\0\12\1\1\0\15\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1"+
    "\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1\164\0\5\1"+
    "\1\0\207\1\44\0\32\1\6\0\32\1\13\0\131\1\3\0\6\1"+
    "\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\0\1\2\13\0\1\3\1\4\1\5"+
    "\1\3\1\6\1\3\1\6\1\7\2\6\1\10\2\6"+
    "\1\11\1\12\1\13\1\1\1\14\11\1\1\15\1\5"+
    "\1\16\1\6\1\17\1\20\1\2\1\6\4\2\1\21"+
    "\1\22\1\1\1\23\3\1\6\24\1\25\1\26\2\16"+
    "\2\6\1\27\1\30\1\6\1\16\1\31\1\32\1\16"+
    "\1\33\1\34\1\35\1\6\1\36\2\16\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\3\3\1\6\1\46"+
    "\1\0\1\47\4\0\1\50\10\1\1\51\2\0\4\2"+
    "\1\52\2\16\3\0\2\16\4\0\2\16\5\0\1\53"+
    "\5\0\1\54\1\55\2\0\1\53\1\54\1\55\2\1"+
    "\1\53\1\54\1\55\2\1\1\56\1\0\1\53\1\54"+
    "\1\0\1\55\2\2\2\16\1\57\1\16\4\0\2\16"+
    "\1\0\1\60\2\0\1\61\7\0\1\62\1\0\1\1"+
    "\1\62\2\1\1\62\1\1\1\2\1\62\1\2\3\16"+
    "\4\0\2\16\11\0\2\1\1\2\2\16\1\63\4\0"+
    "\2\16\10\0\1\64\2\1\1\2\1\65\1\66\3\0"+
    "\1\67\1\70\1\71\1\0\1\72\6\0\2\1\1\2"+
    "\2\0\1\73\1\74\4\0\1\75\1\0\2\1\1\2"+
    "\1\76\1\0\1\77\1\100\1\101\1\0\1\102\3\77"+
    "\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u03c9\0\u04fb\0\u052e\0\u0462\0\u03c9\0\u04c8\0\u0561"+
    "\0\u03c9\0\u03c9\0\u03c9\0\u0594\0\u03c9\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u03c9\0\u03c9\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u0462\0\u0495"+
    "\0\u04c8\0\u03c9\0\u052e\0\u0462\0\u0495\0\u04c8\0\u0990\0\u03c9"+
    "\0\u03c9\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u03c9\0\u03c9\0\u0a8f"+
    "\0\u0ac2\0\u0462\0\u03c9\0\u0af5\0\u0495\0\u03c9\0\u04c8\0\u0b28"+
    "\0\u03c9\0\u0b5b\0\u0b8e\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u03c9"+
    "\0\u03c9\0\u03c9\0\u0bc1\0\u0bf4\0\u0495\0\u0c27\0\u03c9\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u03c9\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u03c9\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u03c9\0\u1056\0\u1089"+
    "\0\u0a29\0\u0a5c\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb"+
    "\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u03c9\0\u03c9"+
    "\0\u14b8\0\u14eb\0\u151e\0\u0594\0\u0594\0\u1551\0\u1584\0\u15b7"+
    "\0\u0693\0\u0693\0\u15ea\0\u161d\0\u03c9\0\u1650\0\u1683\0\u085e"+
    "\0\u16b6\0\u085e\0\u16e9\0\u171c\0\u174f\0\u1782\0\u07f8\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u03c9"+
    "\0\u194d\0\u1980\0\u03c9\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u03c9\0\u1b18\0\u1b4b\0\u0594\0\u1b7e\0\u1bb1"+
    "\0\u0693\0\u1be4\0\u1c17\0\u085e\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013"+
    "\0\u2046\0\u2079\0\u20ac\0\u20df\0\u07f8\0\u2112\0\u2145\0\u2178"+
    "\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310"+
    "\0\u2343\0\u2376\0\u23a9\0\u03c9\0\u23dc\0\u240f\0\u2442\0\u07f8"+
    "\0\u07f8\0\u2475\0\u24a8\0\u24db\0\u03c9\0\u07f8\0\u07f8\0\u250e"+
    "\0\u03c9\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u03c9\0\u03c9\0\u2772\0\u27a5"+
    "\0\u27d8\0\u280b\0\u03c9\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u03c9"+
    "\0\u290a\0\u03c9\0\u03c9\0\u03c9\0\u293d\0\u03c9\0\u0594\0\u0693"+
    "\0\u085e\0\u03c9\0\u03c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\24\1\25\4\24\1\26\7\24\1\27\11\24\1\30"+
    "\1\24\1\31\6\24\1\25\17\24\1\32\1\33\1\32"+
    "\1\25\4\32\1\34\3\32\4\33\1\35\1\36\10\33"+
    "\1\30\1\32\1\37\1\32\2\33\1\40\2\33\1\25"+
    "\1\32\5\33\6\32\3\33\3\32\1\25\1\41\1\42"+
    "\2\32\1\34\7\32\1\35\11\32\1\30\1\32\1\37"+
    "\6\32\1\25\1\43\16\32\4\44\1\45\3\44\1\46"+
    "\7\44\1\47\11\44\1\50\1\44\1\51\26\44\5\52"+
    "\1\45\2\52\1\53\7\52\1\54\11\52\1\55\1\52"+
    "\1\56\26\52\1\32\1\57\1\32\1\25\4\32\1\60"+
    "\3\32\4\57\1\35\1\32\10\57\1\30\1\32\1\37"+
    "\1\32\2\57\1\32\2\57\1\25\1\32\5\57\6\32"+
    "\3\57\1\32\1\61\1\32\1\25\4\32\1\60\1\62"+
    "\2\32\4\61\1\35\1\63\10\61\1\30\1\32\1\37"+
    "\1\32\2\61\1\32\2\61\1\25\1\64\5\61\6\32"+
    "\3\61\7\65\1\66\1\67\7\65\1\70\11\65\1\71"+
    "\1\65\1\72\26\65\3\32\1\25\1\73\1\74\2\32"+
    "\1\60\1\62\6\32\1\35\1\63\10\32\1\30\1\32"+
    "\1\37\6\32\1\25\17\32\4\75\1\76\3\75\1\60"+
    "\7\75\1\77\11\75\1\100\1\75\1\101\33\75\1\76"+
    "\2\75\1\60\7\75\1\77\11\75\1\100\1\75\1\101"+
    "\26\75\10\102\1\103\7\102\1\104\11\102\1\105\1\102"+
    "\1\106\3\102\1\107\22\102\1\32\1\61\1\32\1\25"+
    "\4\32\1\34\2\32\1\110\4\61\1\35\1\111\10\61"+
    "\1\30\1\32\1\37\1\32\2\61\1\32\2\61\1\25"+
    "\1\32\1\61\1\112\1\113\2\61\6\32\3\61\3\32"+
    "\1\25\1\114\1\115\2\32\1\34\2\32\1\110\4\32"+
    "\1\35\1\111\10\32\1\30\1\32\1\37\6\32\1\25"+
    "\20\32\2\61\1\25\1\116\1\117\2\61\1\120\3\32"+
    "\2\61\1\121\1\61\1\122\1\123\4\61\1\124\3\61"+
    "\1\125\1\126\1\127\1\130\2\61\1\131\2\61\1\25"+
    "\1\32\1\61\1\132\1\133\2\61\1\134\1\135\1\136"+
    "\1\137\1\140\1\141\3\61\4\44\1\142\3\44\1\46"+
    "\7\44\1\47\11\44\1\50\1\44\1\51\26\44\5\52"+
    "\1\142\2\52\1\53\7\52\1\54\11\52\1\55\1\52"+
    "\1\56\26\52\10\24\1\143\7\24\1\144\11\24\1\145"+
    "\1\24\1\31\26\24\3\32\1\25\4\32\1\34\2\32"+
    "\1\110\4\32\1\35\1\32\1\146\7\32\1\30\1\32"+
    "\1\37\6\32\1\25\17\32\66\0\1\25\37\0\1\25"+
    "\30\0\1\147\1\150\25\0\1\151\42\0\1\152\43\0"+
    "\1\153\12\0\4\153\2\0\10\153\3\0\1\154\2\153"+
    "\1\0\2\153\2\0\5\153\6\0\3\153\1\0\1\153"+
    "\12\0\4\153\2\0\10\153\4\0\2\153\1\0\2\153"+
    "\2\0\5\153\6\0\3\153\1\0\2\33\3\0\2\33"+
    "\4\0\4\33\2\0\10\33\4\0\2\33\1\0\2\33"+
    "\2\0\5\33\6\0\3\33\12\0\1\155\71\0\1\156"+
    "\41\0\4\44\1\0\62\44\1\0\5\44\1\157\54\44"+
    "\1\0\13\44\1\160\43\44\1\161\2\44\1\0\7\44"+
    "\4\161\2\44\10\161\3\44\1\162\2\161\1\44\2\161"+
    "\2\44\5\161\6\44\3\161\1\44\1\161\2\44\1\0"+
    "\7\44\4\161\2\44\10\161\4\44\2\161\1\44\2\161"+
    "\2\44\5\161\6\44\3\161\5\52\1\0\62\52\1\0"+
    "\4\52\1\163\55\52\1\0\12\52\1\164\43\52\1\165"+
    "\3\52\1\0\6\52\4\165\2\52\10\165\3\52\1\166"+
    "\2\165\1\52\2\165\2\52\5\165\6\52\3\165\1\52"+
    "\1\165\3\52\1\0\6\52\4\165\2\52\10\165\4\52"+
    "\2\165\1\52\2\165\2\52\5\165\6\52\3\165\1\0"+
    "\2\57\3\0\2\57\4\0\4\57\2\0\10\57\4\0"+
    "\2\57\1\0\2\57\2\0\5\57\6\0\3\57\11\0"+
    "\1\147\1\155\51\0\2\61\3\0\2\61\4\0\4\61"+
    "\2\0\10\61\4\0\2\61\1\0\2\61\2\0\5\61"+
    "\6\0\3\61\21\0\1\167\41\0\7\65\1\170\62\65"+
    "\1\171\62\65\1\170\2\65\1\172\57\65\1\170\10\65"+
    "\1\173\43\65\1\174\5\65\1\170\4\65\4\174\2\65"+
    "\10\174\3\65\1\175\2\174\1\65\2\174\2\65\5\174"+
    "\6\65\3\174\1\65\1\174\5\65\1\170\4\65\4\174"+
    "\2\65\10\174\4\65\2\174\1\65\2\174\2\65\5\174"+
    "\6\65\3\174\21\0\1\176\42\0\2\61\3\0\2\61"+
    "\4\0\4\61\2\0\3\61\1\177\4\61\4\0\2\61"+
    "\1\0\2\61\2\0\5\61\6\0\3\61\1\0\2\61"+
    "\3\0\2\61\4\0\4\61\2\0\10\61\4\0\2\61"+
    "\1\0\2\61\2\0\1\200\4\61\6\0\3\61\4\201"+
    "\1\75\56\201\5\202\1\75\55\202\12\0\1\203\51\0"+
    "\2\61\3\0\2\61\4\0\4\61\2\0\1\61\1\204"+
    "\6\61\4\0\2\61\1\0\2\61\2\0\5\61\6\0"+
    "\3\61\1\0\2\61\3\0\2\61\4\0\4\61\2\0"+
    "\10\61\4\0\2\61\1\0\2\61\2\0\3\61\1\205"+
    "\1\61\6\0\3\61\22\0\1\206\6\0\1\207\14\0"+
    "\1\210\12\0\1\211\2\0\2\61\3\0\2\61\4\0"+
    "\4\61\2\0\3\61\1\212\4\61\4\0\2\61\1\0"+
    "\2\61\2\0\5\61\6\0\3\61\1\0\2\61\3\0"+
    "\2\61\4\0\4\61\2\0\10\61\4\0\2\61\1\0"+
    "\2\61\2\0\1\213\4\61\6\0\3\61\12\0\1\214"+
    "\70\0\1\215\65\0\1\216\3\0\1\217\42\0\1\220"+
    "\3\0\1\221\1\0\1\222\1\223\4\0\1\224\2\0"+
    "\1\225\72\0\1\226\45\0\1\227\42\0\2\153\3\0"+
    "\2\153\4\0\4\153\2\0\10\153\1\0\1\230\2\0"+
    "\2\153\1\0\2\153\2\0\5\153\6\0\3\153\2\0"+
    "\1\231\33\0\1\232\33\0\1\220\3\0\1\221\47\0"+
    "\4\44\1\0\6\44\1\233\53\44\1\0\14\44\1\234"+
    "\42\44\2\161\1\44\1\0\1\44\2\161\4\44\4\161"+
    "\2\44\10\161\1\44\1\235\2\44\2\161\1\44\2\161"+
    "\2\44\5\161\6\44\3\161\2\44\1\236\1\44\1\0"+
    "\31\44\1\237\24\44\5\52\1\0\5\52\1\240\54\52"+
    "\1\0\13\52\1\241\42\52\2\165\2\52\1\0\2\165"+
    "\4\52\4\165\2\52\10\165\1\52\1\242\2\52\2\165"+
    "\1\52\2\165\2\52\5\165\6\52\3\165\2\52\1\243"+
    "\2\52\1\0\30\52\1\244\24\52\7\65\1\0\53\65"+
    "\21\0\1\245\41\0\7\65\1\246\3\65\1\247\56\65"+
    "\1\170\11\65\1\250\42\65\2\174\3\65\1\174\1\251"+
    "\4\65\4\174\2\65\10\174\1\65\1\252\2\65\2\174"+
    "\1\65\2\174\2\65\5\174\6\65\3\174\2\65\1\253"+
    "\4\65\1\170\26\65\1\254\24\65\1\0\2\61\3\0"+
    "\2\61\4\0\4\61\2\0\10\61\4\0\2\61\1\0"+
    "\2\61\2\0\4\61\1\255\6\0\3\61\1\0\2\61"+
    "\3\0\2\61\4\0\4\61\2\0\10\61\4\0\2\61"+
    "\1\0\2\61\2\0\2\61\1\256\2\61\6\0\3\61"+
    "\7\0\1\220\3\0\1\221\2\0\1\223\4\0\1\224"+
    "\2\0\1\225\35\0\2\61\3\0\2\61\4\0\4\61"+
    "\2\0\10\61\4\0\2\61\1\0\2\61\2\0\1\257"+
    "\4\61\6\0\3\61\1\0\2\61\3\0\2\61\4\0"+
    "\4\61\2\0\10\61\4\0\2\61\1\0\2\61\2\0"+
    "\1\61\1\260\3\61\6\0\3\61\50\0\1\261\40\0"+
    "\1\262\50\0\1\263\70\0\1\264\41\0\2\61\3\0"+
    "\2\61\4\0\4\61\2\0\10\61\4\0\2\61\1\0"+
    "\2\61\2\0\4\61\1\265\6\0\3\61\1\0\2\61"+
    "\3\0\2\61\4\0\4\61\2\0\10\61\4\0\2\61"+
    "\1\0\2\61\2\0\2\61\1\266\2\61\6\0\3\61"+
    "\7\0\1\267\3\0\1\221\70\0\1\270\55\0\1\271"+
    "\71\0\1\272\46\0\1\273\67\0\1\274\76\0\1\275"+
    "\51\0\1\276\73\0\1\277\55\0\1\300\1\301\77\0"+
    "\1\302\23\0\1\231\30\0\1\303\31\0\1\304\11\0"+
    "\3\304\7\0\1\304\10\0\1\304\11\0\1\304\7\0"+
    "\1\304\1\0\4\44\1\0\7\44\1\305\50\44\1\236"+
    "\1\44\1\0\26\44\1\306\31\44\1\307\1\44\1\0"+
    "\7\44\3\307\7\44\1\307\10\44\1\307\11\44\1\307"+
    "\7\44\1\307\1\44\5\52\1\0\6\52\1\310\50\52"+
    "\1\243\2\52\1\0\25\52\1\311\31\52\1\312\2\52"+
    "\1\0\6\52\3\312\7\52\1\312\10\52\1\312\11\52"+
    "\1\312\7\52\1\312\1\52\7\65\1\273\62\65\1\170"+
    "\4\65\1\313\47\65\2\174\3\65\1\174\1\153\4\65"+
    "\4\174\2\65\10\174\1\65\1\252\2\65\2\174\1\65"+
    "\2\174\2\65\5\174\6\65\3\174\2\65\1\253\4\65"+
    "\1\170\23\65\1\314\31\65\1\315\4\65\1\170\4\65"+
    "\3\315\7\65\1\315\10\65\1\315\11\65\1\315\7\65"+
    "\1\315\1\65\1\0\2\61\3\0\2\61\4\0\4\61"+
    "\2\0\2\61\1\316\5\61\4\0\2\61\1\0\2\61"+
    "\2\0\5\61\6\0\3\61\1\0\2\61\3\0\2\61"+
    "\4\0\3\61\1\317\2\0\10\61\4\0\2\61\1\0"+
    "\2\61\2\0\5\61\6\0\3\61\1\0\2\61\3\0"+
    "\2\61\4\0\3\61\1\320\2\0\10\61\4\0\2\61"+
    "\1\0\2\61\2\0\5\61\6\0\3\61\46\0\1\321"+
    "\74\0\1\322\17\0\1\323\127\0\1\324\1\0\2\61"+
    "\3\0\2\61\4\0\4\61\2\0\2\61\1\325\5\61"+
    "\4\0\2\61\1\0\2\61\2\0\5\61\6\0\3\61"+
    "\1\0\2\61\3\0\2\61\4\0\3\61\1\326\2\0"+
    "\10\61\4\0\2\61\1\0\2\61\2\0\5\61\6\0"+
    "\3\61\7\0\1\24\77\0\1\327\66\0\1\330\47\0"+
    "\1\331\61\0\1\332\65\0\1\333\62\0\1\334\62\0"+
    "\1\335\71\0\1\336\76\0\1\337\22\0\1\304\11\0"+
    "\3\304\7\0\1\304\4\0\1\303\3\0\1\304\11\0"+
    "\1\304\7\0\1\304\1\0\4\44\1\0\10\44\1\340"+
    "\47\44\1\307\1\44\1\0\7\44\3\307\7\44\1\307"+
    "\4\44\1\306\3\44\1\307\11\44\1\307\7\44\1\307"+
    "\1\44\5\52\1\0\7\52\1\341\47\52\1\312\2\52"+
    "\1\0\6\52\3\312\7\52\1\312\4\52\1\311\3\52"+
    "\1\312\11\52\1\312\7\52\1\312\1\52\7\65\1\170"+
    "\5\65\1\342\47\65\1\315\4\65\1\170\4\65\3\315"+
    "\7\65\1\315\4\65\1\314\3\65\1\315\11\65\1\315"+
    "\7\65\1\315\1\65\1\0\2\61\3\0\2\61\4\0"+
    "\4\61\2\0\1\343\7\61\4\0\2\61\1\0\2\61"+
    "\2\0\5\61\6\0\3\61\1\0\2\61\3\0\2\61"+
    "\4\0\4\61\2\0\4\61\1\344\3\61\4\0\2\61"+
    "\1\0\2\61\2\0\5\61\6\0\3\61\1\0\2\61"+
    "\3\0\2\61\4\0\4\61\2\0\10\61\4\0\2\61"+
    "\1\0\2\61\2\0\1\345\4\61\6\0\3\61\24\0"+
    "\1\346\63\0\1\347\53\0\1\350\72\0\1\351\35\0"+
    "\2\61\3\0\2\61\4\0\4\61\2\0\1\352\7\61"+
    "\4\0\2\61\1\0\2\61\2\0\5\61\6\0\3\61"+
    "\1\0\2\61\3\0\2\61\4\0\4\61\2\0\4\61"+
    "\1\353\3\61\4\0\2\61\1\0\2\61\2\0\5\61"+
    "\6\0\3\61\25\0\1\354\66\0\1\355\47\0\1\356"+
    "\63\0\1\357\67\0\1\360\54\0\1\361\66\0\1\362"+
    "\110\0\1\363\55\0\1\364\17\0\4\44\1\0\11\44"+
    "\1\365\44\44\5\52\1\0\10\52\1\366\44\52\7\65"+
    "\1\170\6\65\1\367\44\65\1\0\2\61\3\0\2\61"+
    "\4\0\1\370\3\61\2\0\10\61\4\0\2\61\1\0"+
    "\2\61\2\0\5\61\6\0\3\61\1\0\2\61\3\0"+
    "\2\61\4\0\4\61\2\0\10\61\4\0\2\61\1\0"+
    "\2\61\2\0\3\61\1\371\1\61\6\0\3\61\22\0"+
    "\1\372\62\0\1\373\57\0\1\374\60\0\1\375\46\0"+
    "\2\61\3\0\2\61\4\0\1\376\3\61\2\0\10\61"+
    "\4\0\2\61\1\0\2\61\2\0\5\61\6\0\3\61"+
    "\1\0\2\61\3\0\2\61\4\0\4\61\2\0\10\61"+
    "\4\0\2\61\1\0\2\61\2\0\3\61\1\377\1\61"+
    "\6\0\3\61\15\0\1\u0100\73\0\1\u0101\53\0\1\u0102"+
    "\110\0\1\u0103\37\0\1\u0104\57\0\1\u0105\62\0\1\u0106"+
    "\71\0\1\u0107\34\0\4\44\1\0\12\44\1\u0108\43\44"+
    "\5\52\1\0\11\52\1\u0109\43\52\7\65\1\170\7\65"+
    "\1\u010a\43\65\26\0\1\u010b\65\0\1\u010c\47\0\1\u010d"+
    "\72\0\1\u010e\52\0\1\u010f\112\0\1\u0110\63\0\1\u0111"+
    "\35\0\1\u0112\105\0\1\u0113\40\0\1\u0114\37\0\4\44"+
    "\1\0\11\44\1\u0115\44\44\5\52\1\0\10\52\1\u0116"+
    "\44\52\7\65\1\170\6\65\1\u0117\44\65\15\0\1\u0118"+
    "\73\0\1\u0119\47\0\1\u011a\75\0\1\u011b\53\0\1\u011c"+
    "\73\0\1\u011d\51\0\1\u011e\43\0\4\44\1\0\6\44"+
    "\1\u011f\47\44\5\52\1\0\5\52\1\u0120\47\52\7\65"+
    "\1\170\3\65\1\u0121\47\65\15\0\1\u0122\70\0\1\u0123"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\2\0\1\1\13\0\1\11\5\1\1\11"+
    "\3\1\1\11\2\1\3\11\1\1\1\11\15\1\2\11"+
    "\6\1\4\11\3\1\1\11\5\1\2\11\4\1\2\11"+
    "\3\1\1\11\2\1\1\11\2\1\1\11\2\1\7\11"+
    "\4\1\1\11\1\0\1\1\4\0\1\11\10\1\1\11"+
    "\2\0\4\1\1\11\2\1\3\0\2\1\4\0\2\1"+
    "\5\0\1\1\5\0\2\11\2\0\12\1\1\11\1\0"+
    "\2\1\1\0\7\1\4\0\2\1\1\0\1\11\2\0"+
    "\1\11\7\0\1\11\1\0\14\1\4\0\2\1\11\0"+
    "\6\1\4\0\2\1\10\0\1\11\5\1\3\0\1\11"+
    "\2\1\1\0\1\11\6\0\3\1\2\0\2\11\4\0"+
    "\1\11\1\0\3\1\1\11\1\0\3\11\1\0\1\11"+
    "\3\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   public _OldXmlLexer() {
     this((java.io.Reader)null);
   }


  public _OldXmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _OldXmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_MARKUP_START;
          }
        case 69: break;
        case 1: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 70: break;
        case 57: 
          { return XmlTokenType.XML_DOCTYPE_SYSTEM;
          }
        case 71: break;
        case 36: 
          { return XmlTokenType.XML_COMMA;
          }
        case 72: break;
        case 11: 
          { return XmlTokenType.XML_EQ;
          }
        case 73: break;
        case 63: 
          { yybegin(CDATA); return XmlTokenType.XML_CDATA_START;
          }
        case 74: break;
        case 16: 
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 75: break;
        case 58: 
          { return XmlTokenType.XML_CONDITIONAL_IGNORE;
          }
        case 76: break;
        case 28: 
          { return XmlTokenType.XML_SEMI;
          }
        case 77: break;
        case 52: 
          { yybegin(DECL); return XmlTokenType.XML_DECL_START;
          }
        case 78: break;
        case 9: 
          { yybegin(DECL_ATTR_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 79: break;
        case 66: 
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ELEMENT_DECL_START;
          }
        case 80: break;
        case 14: 
          { return XmlTokenType.XML_NAME;
          }
        case 81: break;
        case 19: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 82: break;
        case 10: 
          { yybegin(DECL_ATTR_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 83: break;
        case 56: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 84: break;
        case 49: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 85: break;
        case 7: 
          { yybegin(DECL_ATTR); return XmlTokenType.XML_NAME;
          }
        case 86: break;
        case 37: 
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 87: break;
        case 62: 
          { return XmlTokenType.XML_ATT_IMPLIED;
          }
        case 88: break;
        case 65: 
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ATTLIST_DECL_START;
          }
        case 89: break;
        case 3: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 90: break;
        case 6: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 91: break;
        case 15: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 92: break;
        case 13: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_TAG_NAME;
          }
        case 93: break;
        case 46: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 94: break;
        case 31: 
          { return XmlTokenType.XML_LEFT_PAREN;
          }
        case 95: break;
        case 59: 
          { return XmlTokenType.XML_PCDATA;
          }
        case 96: break;
        case 38: 
          { yybegin(TAG_NAME); return XmlTokenType.XML_END_TAG_START;
          }
        case 97: break;
        case 55: 
          { return XmlTokenType.XML_ATT_FIXED;
          }
        case 98: break;
        case 25: 
          { yybegin(DOCTYPE); return XmlTokenType.XML_MARKUP_END;
          }
        case 99: break;
        case 20: 
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 100: break;
        case 60: 
          { return XmlTokenType.XML_CONDITIONAL_INCLUDE;
          }
        case 101: break;
        case 41: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 102: break;
        case 32: 
          { return XmlTokenType.XML_RIGHT_PAREN;
          }
        case 103: break;
        case 8: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 104: break;
        case 39: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 105: break;
        case 61: 
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ENTITY_DECL_START;
          }
        case 106: break;
        case 24: 
          { yybegin(DOCTYPE_MARKUP_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 107: break;
        case 51: 
          { return XmlTokenType.XML_CONTENT_EMPTY;
          }
        case 108: break;
        case 33: 
          { return XmlTokenType.XML_PLUS;
          }
        case 109: break;
        case 23: 
          { yybegin(DOCTYPE_MARKUP_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 110: break;
        case 47: 
          { return XmlTokenType.XML_CONTENT_ANY;
          }
        case 111: break;
        case 22: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 112: break;
        case 50: 
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 113: break;
        case 67: 
          { return XmlTokenType.XML_ATT_REQUIRED;
          }
        case 114: break;
        case 30: 
          { return XmlTokenType.XML_QUESTION;
          }
        case 115: break;
        case 54: 
          { yybegin(DOCTYPE_EXTERNAL_ID); return XmlTokenType.XML_DOCTYPE_SYSTEM;
          }
        case 116: break;
        case 34: 
          { return XmlTokenType.XML_STAR;
          }
        case 117: break;
        case 40: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DECL_END;
          }
        case 118: break;
        case 4: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 119: break;
        case 45: 
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 120: break;
        case 29: 
          { return XmlTokenType.XML_PERCENT;
          }
        case 121: break;
        case 5: 
          { yybegin(TAG_NAME); return XmlTokenType.XML_START_TAG_START;
          }
        case 122: break;
        case 44: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_CONDITIONAL_SECTION_END;
          }
        case 123: break;
        case 48: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_CDATA_END;
          }
        case 124: break;
        case 53: 
          { yybegin(DOCTYPE_EXTERNAL_ID); return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 125: break;
        case 12: 
          { yybegin(DECL); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 126: break;
        case 27: 
          { return XmlTokenType.XML_AMP;
          }
        case 127: break;
        case 42: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 128: break;
        case 17: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 129: break;
        case 64: 
          { yybegin(DOCTYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 130: break;
        case 18: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 131: break;
        case 68: 
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_NOTATION_DECL_START;
          }
        case 132: break;
        case 26: 
          { return XmlTokenType.XML_TAG_END;
          }
        case 133: break;
        case 35: 
          { return XmlTokenType.XML_BAR;
          }
        case 134: break;
        case 2: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 135: break;
        case 43: 
          { yybegin(CONDITIONAL); return XmlTokenType.XML_CONDITIONAL_SECTION_START;
          }
        case 136: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
