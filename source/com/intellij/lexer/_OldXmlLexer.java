/* The following code was generated by JFlex 1.4 on 3/28/05 7:35 PM */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 3/28/05 7:35 PM from the specification file
 * <tt>C:/Irida/tools/lexer/_OldXmlLexer.flex</tt>
 */
public class _OldXmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 11;
  public static final int DECL_ATTR_VALUE_DQ = 3;
  public static final int DECL_ATTR = 2;
  public static final int ATTRIBUTE_VALUE_START = 8;
  public static final int DECL_ATTR_VALUE_SQ = 4;
  public static final int ATTRIBUTE_VALUE_DQ = 9;
  public static final int DECL = 1;
  public static final int ATTRIBUTE_VALUE_SQ = 10;
  public static final int DOCTYPE_EXTERNAL_ID = 13;
  public static final int CDATA = 17;
  public static final int COMMENT = 7;
  public static final int TAG_NAME = 5;
  public static final int DOCTYPE_MARKUP = 14;
  public static final int DOCTYPE_MARKUP_DQ = 15;
  public static final int YYINITIAL = 0;
  public static final int TAG_ATTRIBUTES = 6;
  public static final int DOCTYPE = 12;
  public static final int DOCTYPE_MARKUP_SQ = 16;

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  0,  3,  3,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    27, 10,  4, 21,  0, 20, 18,  5, 40, 41, 43, 42, 45,  7,  6,  9,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1, 19,  8, 28, 17, 24,
     0, 14, 36, 12, 13, 32, 48,  1,  1, 38,  1,  1, 37, 34, 39, 29,
    31, 47, 46, 33, 15, 35,  1,  1, 49, 30,  1, 11,  0, 16,  0,  1,
     0, 23, 23, 23, 23, 23, 23,  1,  1,  1,  1,  1, 26, 25,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1, 22,  1,  1,  0, 44,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\0\1\2\12\0\1\3\1\4\1\5"+
    "\1\6\1\3\1\6\1\7\1\6\1\10\2\6\1\11"+
    "\1\12\1\13\1\1\1\14\7\1\1\15\1\5\1\16"+
    "\1\6\1\17\1\20\1\2\1\6\3\2\1\21\1\22"+
    "\1\1\1\23\2\1\5\24\1\25\1\26\2\16\2\6"+
    "\1\27\1\30\1\6\1\16\1\31\1\32\1\33\1\34"+
    "\1\35\1\6\1\36\3\16\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\3\3\1\46\1\0\1\47\3\0"+
    "\1\50\6\1\1\51\2\0\3\2\1\52\2\16\3\0"+
    "\1\16\4\0\3\16\11\0\1\53\2\0\1\1\1\53"+
    "\3\1\1\53\2\1\1\54\1\0\1\2\1\0\1\53"+
    "\2\2\2\16\1\55\4\0\3\16\1\0\1\56\1\57"+
    "\7\0\1\60\1\0\1\1\1\60\2\1\1\60\1\1"+
    "\1\2\1\60\1\2\2\16\4\0\3\16\7\0\2\1"+
    "\1\2\2\16\4\0\1\16\1\61\1\16\6\0\1\62"+
    "\2\1\1\2\1\63\1\64\3\0\1\65\1\66\1\67"+
    "\6\0\2\1\1\2\1\70\6\0\1\71\1\0\2\1"+
    "\1\2\1\72\1\0\1\73\1\74\1\75\1\76\1\0"+
    "\3\73\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u0384"+
    "\0\u047e\0\u04b0\0\u0384\0\u044c\0\u04e2\0\u0384\0\u0384\0\u0384"+
    "\0\u0514\0\u0384\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u0384\0\u0384\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0384\0\u0384\0\u0384\0\u0384"+
    "\0\u041a\0\u044c\0\u0384\0\u04b0\0\u041a\0\u044c\0\u0866\0\u0384"+
    "\0\u0384\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0384\0\u0384\0\u0960"+
    "\0\u0992\0\u0384\0\u0384\0\u041a\0\u0384\0\u044c\0\u09c4\0\u0384"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384"+
    "\0\u0384\0\u0384\0\u0a8c\0\u0abe\0\u041a\0\u0384\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0384\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0384\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0384\0\u0e10\0\u0e42\0\u08fc\0\u092e\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u0384"+
    "\0\u11f8\0\u122a\0\u125c\0\u0514\0\u128e\0\u12c0\0\u12f2\0\u05dc"+
    "\0\u1324\0\u1356\0\u0384\0\u1388\0\u13ba\0\u13ec\0\u076c\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u0708\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u0384\0\u0384\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u0384\0\u17d4\0\u1806"+
    "\0\u0514\0\u1838\0\u186a\0\u05dc\0\u189c\0\u18ce\0\u076c\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u0708\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u0384\0\u1fa4\0\u1fd6\0\u2008\0\u0708\0\u0708"+
    "\0\u203a\0\u206c\0\u209e\0\u0384\0\u0708\0\u0708\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u0384"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u0384\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u0384\0\u2486\0\u0384\0\u0384\0\u0384"+
    "\0\u0384\0\u24b8\0\u0514\0\u05dc\0\u076c\0\u0384\0\u0384";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\23\1\24\4\23\1\25\11\23\1\26\1\23\1\27"+
    "\6\23\1\24\26\23\1\30\1\31\1\30\1\24\4\30"+
    "\1\32\3\30\4\31\1\30\1\33\1\26\1\30\1\34"+
    "\1\30\2\31\1\35\2\31\1\24\1\30\13\31\6\30"+
    "\4\31\3\30\1\24\1\36\1\37\2\30\1\32\11\30"+
    "\1\26\1\30\1\34\6\30\1\24\1\40\25\30\4\41"+
    "\1\42\3\41\1\43\11\41\1\44\1\41\1\45\35\41"+
    "\5\46\1\42\2\46\1\47\11\46\1\50\1\46\1\51"+
    "\35\46\1\30\1\52\1\30\1\24\4\30\1\53\3\30"+
    "\4\52\2\30\1\26\1\30\1\34\1\30\2\52\1\30"+
    "\2\52\1\24\1\30\13\52\6\30\4\52\1\30\1\54"+
    "\1\30\1\24\4\30\1\53\1\55\2\30\4\54\1\30"+
    "\1\56\1\26\1\30\1\34\1\30\2\54\1\30\2\54"+
    "\1\24\1\57\13\54\6\30\4\54\7\60\1\61\1\62"+
    "\11\60\1\63\1\60\1\64\35\60\3\30\1\24\1\65"+
    "\1\66\2\30\1\53\1\55\7\30\1\56\1\26\1\30"+
    "\1\34\6\30\1\24\26\30\4\67\1\70\3\67\1\53"+
    "\11\67\1\71\1\67\1\72\42\67\1\70\2\67\1\53"+
    "\11\67\1\71\1\67\1\72\35\67\10\73\1\74\11\73"+
    "\1\75\1\73\1\76\3\73\1\77\31\73\1\30\1\54"+
    "\1\30\1\24\4\30\1\32\2\30\1\100\4\54\1\30"+
    "\1\101\1\26\1\30\1\34\1\30\2\54\1\30\2\54"+
    "\1\24\1\30\2\54\1\102\1\54\1\103\6\54\6\30"+
    "\4\54\3\30\1\24\1\104\1\105\2\30\1\32\2\30"+
    "\1\100\5\30\1\101\1\26\1\30\1\34\6\30\1\24"+
    "\27\30\2\54\1\24\1\106\1\107\2\54\1\110\3\30"+
    "\2\54\1\111\1\54\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\2\54\1\120\2\54\1\24\1\30\2\54\1\121"+
    "\1\122\1\123\6\54\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\4\54\4\41\1\132\3\41\1\43\11\41\1\44"+
    "\1\41\1\45\35\41\5\46\1\132\2\46\1\47\11\46"+
    "\1\50\1\46\1\51\35\46\10\23\1\133\7\23\1\134"+
    "\1\23\1\135\1\23\1\27\35\23\65\0\1\24\27\0"+
    "\1\24\37\0\1\136\1\137\15\0\1\140\32\0\1\141"+
    "\12\0\4\141\5\0\1\142\2\141\1\0\2\141\2\0"+
    "\13\141\6\0\4\141\1\0\1\141\12\0\4\141\6\0"+
    "\2\141\1\0\2\141\2\0\13\141\6\0\4\141\1\0"+
    "\2\31\3\0\2\31\4\0\4\31\6\0\2\31\1\0"+
    "\2\31\2\0\13\31\6\0\4\31\12\0\1\143\70\0"+
    "\1\144\40\0\4\41\1\0\61\41\1\0\5\41\1\145"+
    "\50\41\1\146\2\41\1\0\7\41\4\146\5\41\1\147"+
    "\2\146\1\41\2\146\2\41\13\146\6\41\4\146\1\41"+
    "\1\146\2\41\1\0\7\41\4\146\6\41\2\146\1\41"+
    "\2\146\2\41\13\146\6\41\4\146\5\46\1\0\61\46"+
    "\1\0\4\46\1\150\50\46\1\151\3\46\1\0\6\46"+
    "\4\151\5\46\1\152\2\151\1\46\2\151\2\46\13\151"+
    "\6\46\4\151\1\46\1\151\3\46\1\0\6\46\4\151"+
    "\6\46\2\151\1\46\2\151\2\46\13\151\6\46\4\151"+
    "\1\0\2\52\3\0\2\52\4\0\4\52\6\0\2\52"+
    "\1\0\2\52\2\0\13\52\6\0\4\52\11\0\1\136"+
    "\1\143\50\0\2\54\3\0\2\54\4\0\4\54\6\0"+
    "\2\54\1\0\2\54\2\0\13\54\6\0\4\54\21\0"+
    "\1\153\40\0\7\60\1\154\61\60\1\155\61\60\1\154"+
    "\2\60\1\156\50\60\1\157\5\60\1\154\4\60\4\157"+
    "\5\60\1\160\2\157\1\60\2\157\2\60\13\157\6\60"+
    "\4\157\1\60\1\157\5\60\1\154\4\60\4\157\6\60"+
    "\2\157\1\60\2\157\2\60\13\157\6\60\4\157\21\0"+
    "\1\161\41\0\2\54\3\0\2\54\4\0\4\54\6\0"+
    "\2\54\1\0\2\54\2\0\6\54\1\162\4\54\6\0"+
    "\4\54\1\0\2\54\3\0\2\54\4\0\4\54\6\0"+
    "\2\54\1\0\2\54\2\0\1\54\1\163\11\54\6\0"+
    "\4\54\4\164\1\67\55\164\5\165\1\67\54\165\12\0"+
    "\1\166\50\0\2\54\3\0\2\54\4\0\4\54\6\0"+
    "\2\54\1\0\2\54\2\0\12\54\1\167\6\0\4\54"+
    "\37\0\1\170\6\0\1\171\7\0\1\172\1\0\1\173"+
    "\2\0\2\54\3\0\2\54\4\0\4\54\6\0\2\54"+
    "\1\0\2\54\2\0\6\54\1\174\4\54\6\0\4\54"+
    "\1\0\2\54\3\0\2\54\4\0\4\54\6\0\2\54"+
    "\1\0\2\54\2\0\5\54\1\175\5\54\6\0\4\54"+
    "\1\0\2\54\3\0\2\54\4\0\4\54\6\0\2\54"+
    "\1\0\2\54\2\0\1\54\1\176\11\54\6\0\4\54"+
    "\12\0\1\177\67\0\1\200\50\0\1\201\3\0\1\202"+
    "\1\0\1\203\1\204\21\0\1\205\6\0\1\206\40\0"+
    "\1\207\34\0\2\141\3\0\2\141\4\0\4\141\3\0"+
    "\1\210\2\0\2\141\1\0\2\141\2\0\13\141\6\0"+
    "\4\141\2\0\1\211\23\0\1\212\42\0\1\201\3\0"+
    "\1\202\46\0\4\41\1\0\6\41\1\213\47\41\2\146"+
    "\1\41\1\0\1\41\2\146\4\41\4\146\3\41\1\214"+
    "\2\41\2\146\1\41\2\146\2\41\13\146\6\41\4\146"+
    "\2\41\1\215\1\41\1\0\21\41\1\216\33\41\5\46"+
    "\1\0\5\46\1\217\47\46\2\151\2\46\1\0\2\151"+
    "\4\46\4\151\3\46\1\220\2\46\2\151\1\46\2\151"+
    "\2\46\13\151\6\46\4\151\2\46\1\221\2\46\1\0"+
    "\20\46\1\222\33\46\7\60\1\0\52\60\21\0\1\223"+
    "\40\0\7\60\1\224\3\60\1\225\47\60\2\157\3\60"+
    "\1\157\1\226\4\60\4\157\3\60\1\227\2\60\2\157"+
    "\1\60\2\157\2\60\13\157\6\60\4\157\2\60\1\230"+
    "\4\60\1\154\16\60\1\231\33\60\1\0\2\54\3\0"+
    "\2\54\4\0\4\54\6\0\2\54\1\0\2\54\2\0"+
    "\7\54\1\232\3\54\6\0\4\54\1\0\2\54\3\0"+
    "\2\54\4\0\4\54\6\0\2\54\1\0\2\54\2\0"+
    "\4\54\1\233\6\54\6\0\4\54\7\0\1\201\3\0"+
    "\1\202\2\0\1\204\21\0\1\205\6\0\1\206\13\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\1\54\1\234\11\54\6\0\4\54\14\0"+
    "\1\235\107\0\1\236\57\0\1\237\67\0\1\240\14\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\7\54\1\241\3\54\6\0\4\54\1\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\2\54\1\242\10\54\6\0\4\54\1\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\4\54\1\243\6\54\6\0\4\54\7\0"+
    "\1\244\3\0\1\202\67\0\1\245\47\0\1\246\66\0"+
    "\1\247\102\0\1\250\43\0\1\251\107\0\1\252\1\0"+
    "\1\253\47\0\1\254\55\0\1\255\32\0\1\211\20\0"+
    "\1\256\40\0\1\257\11\0\3\257\10\0\1\257\10\0"+
    "\1\257\3\0\1\257\13\0\1\257\1\0\4\41\1\0"+
    "\7\41\1\260\47\41\1\215\1\41\1\0\16\41\1\261"+
    "\40\41\1\262\1\41\1\0\7\41\3\262\10\41\1\262"+
    "\10\41\1\262\3\41\1\262\13\41\1\262\1\41\5\46"+
    "\1\0\6\46\1\263\47\46\1\221\2\46\1\0\15\46"+
    "\1\264\40\46\1\265\2\46\1\0\6\46\3\265\10\46"+
    "\1\265\10\46\1\265\3\46\1\265\13\46\1\265\1\46"+
    "\7\60\1\246\61\60\1\154\4\60\1\266\46\60\2\157"+
    "\3\60\1\157\1\141\4\60\4\157\3\60\1\227\2\60"+
    "\2\157\1\60\2\157\2\60\13\157\6\60\4\157\2\60"+
    "\1\230\4\60\1\154\13\60\1\267\40\60\1\270\4\60"+
    "\1\154\4\60\3\270\10\60\1\270\10\60\1\270\3\60"+
    "\1\270\13\60\1\270\1\60\1\0\2\54\3\0\2\54"+
    "\4\0\4\54\6\0\2\54\1\0\2\54\2\0\10\54"+
    "\1\271\2\54\6\0\4\54\1\0\2\54\3\0\2\54"+
    "\4\0\3\54\1\272\6\0\2\54\1\0\2\54\2\0"+
    "\13\54\6\0\4\54\15\0\1\273\103\0\1\274\101\0"+
    "\1\275\63\0\1\276\1\0\2\54\3\0\2\54\4\0"+
    "\4\54\6\0\2\54\1\0\2\54\2\0\10\54\1\277"+
    "\2\54\6\0\4\54\1\0\2\54\3\0\2\54\4\0"+
    "\3\54\1\300\6\0\2\54\1\0\2\54\2\0\13\54"+
    "\6\0\4\54\1\0\2\54\3\0\2\54\4\0\3\54"+
    "\1\301\6\0\2\54\1\0\2\54\2\0\13\54\6\0"+
    "\4\54\7\0\1\23\67\0\1\302\60\0\1\303\64\0"+
    "\1\304\102\0\1\305\40\0\1\306\61\0\1\307\74\0"+
    "\1\310\31\0\1\257\11\0\3\257\4\0\1\256\3\0"+
    "\1\257\10\0\1\257\3\0\1\257\13\0\1\257\1\0"+
    "\4\41\1\0\10\41\1\311\46\41\1\262\1\41\1\0"+
    "\7\41\3\262\4\41\1\261\3\41\1\262\10\41\1\262"+
    "\3\41\1\262\13\41\1\262\1\41\5\46\1\0\7\46"+
    "\1\312\46\46\1\265\2\46\1\0\6\46\3\265\4\46"+
    "\1\264\3\46\1\265\10\46\1\265\3\46\1\265\13\46"+
    "\1\265\1\46\7\60\1\154\5\60\1\313\46\60\1\270"+
    "\4\60\1\154\4\60\3\270\4\60\1\267\3\60\1\270"+
    "\10\60\1\270\3\60\1\270\13\60\1\270\1\60\1\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\11\54\1\314\1\54\6\0\4\54\1\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\3\54\1\315\7\54\6\0\4\54\16\0"+
    "\1\316\110\0\1\317\57\0\1\320\56\0\1\321\22\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\11\54\1\322\1\54\6\0\4\54\1\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\1\54\1\323\11\54\6\0\4\54\1\0"+
    "\2\54\3\0\2\54\4\0\4\54\6\0\2\54\1\0"+
    "\2\54\2\0\3\54\1\324\7\54\6\0\4\54\16\0"+
    "\1\325\62\0\1\326\107\0\1\327\56\0\1\330\65\0"+
    "\1\331\31\0\1\332\76\0\1\333\26\0\4\41\1\0"+
    "\11\41\1\334\43\41\5\46\1\0\10\46\1\335\43\46"+
    "\7\60\1\154\6\60\1\336\43\60\1\0\2\54\3\0"+
    "\2\54\4\0\1\337\3\54\6\0\2\54\1\0\2\54"+
    "\2\0\13\54\6\0\4\54\1\0\2\54\3\0\2\54"+
    "\4\0\4\54\6\0\2\54\1\0\2\54\2\0\5\54"+
    "\1\340\5\54\6\0\4\54\17\0\1\341\110\0\1\342"+
    "\61\0\1\343\30\0\1\344\45\0\2\54\3\0\2\54"+
    "\4\0\1\345\3\54\6\0\2\54\1\0\2\54\2\0"+
    "\13\54\6\0\4\54\1\0\2\54\3\0\2\54\4\0"+
    "\4\54\6\0\2\54\1\0\2\54\2\0\5\54\1\346"+
    "\5\54\6\0\4\54\17\0\1\347\100\0\1\350\71\0"+
    "\1\351\53\0\1\352\40\0\1\353\61\0\1\354\42\0"+
    "\4\41\1\0\12\41\1\355\42\41\5\46\1\0\11\46"+
    "\1\356\42\46\7\60\1\154\7\60\1\357\42\60\16\0"+
    "\1\360\103\0\1\361\77\0\1\362\21\0\1\363\102\0"+
    "\1\364\63\0\1\365\67\0\1\366\50\0\1\367\71\0"+
    "\1\370\13\0\4\41\1\0\11\41\1\371\43\41\5\46"+
    "\1\0\10\46\1\372\43\46\7\60\1\154\6\60\1\373"+
    "\43\60\15\0\1\374\104\0\1\375\34\0\1\376\106\0"+
    "\1\377\40\0\1\u0100\61\0\1\u0101\77\0\1\u0102\24\0"+
    "\4\41\1\0\6\41\1\u0103\46\41\5\46\1\0\5\46"+
    "\1\u0104\46\46\7\60\1\154\3\60\1\u0105\46\60\15\0"+
    "\1\u0106\113\0\1\u0107\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\2\0\1\1\12\0\1\11\4\1\1\11"+
    "\2\1\1\11\2\1\3\11\1\1\1\11\13\1\2\11"+
    "\5\1\4\11\2\1\1\11\4\1\2\11\4\1\2\11"+
    "\2\1\2\11\1\1\1\11\2\1\1\11\3\1\7\11"+
    "\3\1\1\11\1\0\1\1\3\0\1\11\6\1\1\11"+
    "\2\0\3\1\1\11\2\1\3\0\1\1\4\0\3\1"+
    "\11\0\1\11\2\0\10\1\1\11\1\0\1\1\1\0"+
    "\6\1\4\0\3\1\1\0\2\11\7\0\1\11\1\0"+
    "\13\1\4\0\3\1\7\0\5\1\4\0\3\1\6\0"+
    "\1\11\5\1\3\0\1\11\2\1\6\0\3\1\1\11"+
    "\6\0\1\11\1\0\3\1\1\11\1\0\4\11\1\0"+
    "\3\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   public _OldXmlLexer() {
     this((java.io.Reader)null);
   }


  public _OldXmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _OldXmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  public final int getTokenStart(){
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21:
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_MARKUP_START;
          }
        case 65: break;
        case 1:
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 66: break;
        case 55:
          { return XmlTokenType.XML_DOCTYPE_SYSTEM;
          }
        case 67: break;
        case 36:
          { return XmlTokenType.XML_COMMA;
          }
        case 68: break;
        case 11:
          { return XmlTokenType.XML_EQ;
          }
        case 69: break;
        case 59:
          { yybegin(CDATA); return XmlTokenType.XML_CDATA_START;
          }
        case 70: break;
        case 16:
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 71: break;
        case 28:
          { return XmlTokenType.XML_SEMI;
          }
        case 72: break;
        case 50:
          { yybegin(DECL); return XmlTokenType.XML_DECL_START;
          }
        case 73: break;
        case 9:
          { yybegin(DECL_ATTR_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 74: break;
        case 62:
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ELEMENT_DECL_START;
          }
        case 75: break;
        case 14:
          { return XmlTokenType.XML_NAME;
          }
        case 76: break;
        case 19:
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 77: break;
        case 10:
          { yybegin(DECL_ATTR_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 78: break;
        case 54:
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 79: break;
        case 47:
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 80: break;
        case 7:
          { yybegin(DECL_ATTR); return XmlTokenType.XML_NAME;
          }
        case 81: break;
        case 37:
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 82: break;
        case 58:
          { return XmlTokenType.XML_ATT_IMPLIED;
          }
        case 83: break;
        case 61:
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ATTLIST_DECL_START;
          }
        case 84: break;
        case 3:
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 85: break;
        case 6:
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 86: break;
        case 15:
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 87: break;
        case 13:
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_TAG_NAME;
          }
        case 88: break;
        case 44:
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 89: break;
        case 31:
          { return XmlTokenType.XML_LEFT_PAREN;
          }
        case 90: break;
        case 56:
          { return XmlTokenType.XML_PCDATA;
          }
        case 91: break;
        case 38:
          { yybegin(TAG_NAME); return XmlTokenType.XML_END_TAG_START;
          }
        case 92: break;
        case 53:
          { return XmlTokenType.XML_ATT_FIXED;
          }
        case 93: break;
        case 25:
          { yybegin(DOCTYPE); return XmlTokenType.XML_MARKUP_END;
          }
        case 94: break;
        case 20:
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 95: break;
        case 41:
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 96: break;
        case 32:
          { return XmlTokenType.XML_RIGHT_PAREN;
          }
        case 97: break;
        case 8:
          { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 98: break;
        case 39:
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 99: break;
        case 57:
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_ENTITY_DECL_START;
          }
        case 100: break;
        case 24:
          { yybegin(DOCTYPE_MARKUP_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 101: break;
        case 49:
          { return XmlTokenType.XML_CONTENT_EMPTY;
          }
        case 102: break;
        case 33:
          { return XmlTokenType.XML_PLUS;
          }
        case 103: break;
        case 23:
          { yybegin(DOCTYPE_MARKUP_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 104: break;
        case 45:
          { return XmlTokenType.XML_CONTENT_ANY;
          }
        case 105: break;
        case 22:
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 106: break;
        case 48:
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 107: break;
        case 63:
          { return XmlTokenType.XML_ATT_REQUIRED;
          }
        case 108: break;
        case 30:
          { return XmlTokenType.XML_QUESTION;
          }
        case 109: break;
        case 52:
          { yybegin(DOCTYPE_EXTERNAL_ID); return XmlTokenType.XML_DOCTYPE_SYSTEM;
          }
        case 110: break;
        case 34:
          { return XmlTokenType.XML_STAR;
          }
        case 111: break;
        case 40:
          { yybegin(YYINITIAL); return XmlTokenType.XML_DECL_END;
          }
        case 112: break;
        case 4:
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 113: break;
        case 43:
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 114: break;
        case 29:
          { return XmlTokenType.XML_PERCENT;
          }
        case 115: break;
        case 5:
          { yybegin(TAG_NAME); return XmlTokenType.XML_START_TAG_START;
          }
        case 116: break;
        case 46:
          { yybegin(YYINITIAL); return XmlTokenType.XML_CDATA_END;
          }
        case 117: break;
        case 51:
          { yybegin(DOCTYPE_EXTERNAL_ID); return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 118: break;
        case 12:
          { yybegin(DECL); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 119: break;
        case 27:
          { return XmlTokenType.XML_AMP;
          }
        case 120: break;
        case 42:
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 121: break;
        case 17:
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 122: break;
        case 60:
          { yybegin(DOCTYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 123: break;
        case 18:
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 124: break;
        case 64:
          { yybegin(DOCTYPE_MARKUP); return XmlTokenType.XML_NOTATION_DECL_START;
          }
        case 125: break;
        case 26:
          { return XmlTokenType.XML_TAG_END;
          }
        case 126: break;
        case 35:
          { return XmlTokenType.XML_BAR;
          }
        case 127: break;
        case 2:
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
