/* The following code was generated by JFlex 1.4 on 5/25/05 6:47 PM */

 /* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 5/25/05 6:47 PM from the specification file
 * <tt>C:/Irida/tools/lexer/_XmlLexer.flex</tt>
 */
public class __XmlLexer implements FlexLexer,ELHostLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 2;
  public static final int ATTR_LIST = 5;
  public static final int END_TAG = 3;
  public static final int ATTR_VALUE_DQ = 8;
  public static final int DTD_MARKUP = 7;
  public static final int CDATA = 11;
  public static final int ATTR = 6;
  public static final int TAG = 1;
  public static final int YYINITIAL = 0;
  public static final int ATTR_VALUE_START = 7;
  public static final int COMMENT = 4;
  public static final int DOCTYPE = 10;
  public static final int ATTR_VALUE_SQ = 9;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\12\1\54\1\37\1\4"+
    "\1\0\1\22\1\55\5\0\1\10\1\7\1\57\12\2\1\1\1\25"+
    "\1\11\1\60\1\21\1\56\1\0\1\16\1\51\1\14\1\15\1\45"+
    "\1\41\2\1\1\53\2\1\1\52\1\47\1\1\1\42\1\44\2\1"+
    "\1\46\1\17\1\50\3\1\1\43\1\1\1\13\1\0\1\20\1\0"+
    "\1\1\1\0\1\26\1\35\4\41\1\23\4\1\1\23\1\36\1\34"+
    "\1\30\1\27\1\32\1\1\1\31\1\24\1\33\2\1\1\40\2\1"+
    "\1\5\1\0\1\6\54\0\1\1\12\0\1\1\4\0\1\1\5\0"+
    "\27\1\1\0\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1\16\0"+
    "\5\1\11\0\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0"+
    "\202\1\10\0\105\1\1\0\46\1\2\0\2\1\6\0\20\1\41\0"+
    "\46\1\2\0\1\1\7\0\47\1\110\0\33\1\5\0\3\1\56\0"+
    "\32\1\5\0\13\1\43\0\2\1\1\0\143\1\1\0\1\1\17\0"+
    "\2\1\7\0\2\1\12\0\3\1\2\0\1\1\20\0\1\1\1\0"+
    "\36\1\35\0\3\1\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0"+
    "\1\1\22\0\1\1\7\0\12\1\43\0\10\1\2\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0"+
    "\2\1\1\0\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0"+
    "\4\1\1\0\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0"+
    "\1\1\17\0\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0"+
    "\3\1\17\0\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0"+
    "\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0"+
    "\3\1\3\0\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0"+
    "\1\1\1\0\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\20\1\46\0\2\1\43\0\22\1\3\0\30\1\1\0\11\1\1\0"+
    "\1\1\2\0\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0"+
    "\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0"+
    "\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0"+
    "\1\1\25\0\2\1\42\0\1\1\77\0\10\1\1\0\42\1\35\0"+
    "\4\1\164\0\42\1\1\0\5\1\1\0\2\1\45\0\6\1\112\0"+
    "\46\1\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0"+
    "\7\1\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0"+
    "\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1\105\0"+
    "\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
    "\51\1\127\0\35\1\63\0\36\1\2\0\5\1\u038b\0\154\1\224\0"+
    "\234\1\4\0\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0"+
    "\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0"+
    "\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0"+
    "\7\1\164\0\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0"+
    "\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0"+
    "\5\1\u0ebb\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0"+
    "\3\1\1\0\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0"+
    "\30\1\70\0\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0"+
    "\u2ba4\1\u215c\0\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\3\0\2\3\2\0\1\1\1\4"+
    "\1\1\1\5\2\6\1\7\1\6\1\10\1\6\1\11"+
    "\1\6\1\12\1\2\1\0\1\13\3\14\1\15\1\16"+
    "\1\17\3\3\1\20\1\21\3\3\1\6\1\22\2\12"+
    "\2\6\4\1\1\0\1\23\1\24\7\0\1\25\1\26"+
    "\2\0\2\3\1\0\4\3\1\0\1\27\1\0\2\12"+
    "\1\0\1\3\3\0\1\1\1\30\3\0\1\31\10\0"+
    "\1\32\1\33\4\3\2\12\1\34\1\30\1\35\2\0"+
    "\1\36\2\0\1\35\1\3\1\35\1\3\2\12\2\0"+
    "\2\3\2\12\2\0\2\3\1\37\1\40\2\0\2\3"+
    "\2\0\2\3\1\41\1\42\2\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u0341\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u0341\0\u03a3\0\u0310\0\u0341"+
    "\0\u0341\0\u0341\0\u052b\0\u055c\0\u058d\0\u0310\0\u0341\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0341\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0341\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u0341\0\u0341\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0341\0\u0341"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0651\0\u0341\0\u0b1a\0\u0b4b\0\u0b7c\0\u06e4\0\u0341"+
    "\0\u0715\0\u0bad\0\u0bde\0\u0c0f\0\u024c\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0341\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0341\0\u0341\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0341\0\u0341\0\u0341\0\u0f81\0\u0fb2\0\u0341\0\u0fe3"+
    "\0\u1014\0\u052b\0\u1045\0\u05be\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u0467\0\u0467\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u0341\0\u0341\0\u052b\0\u05be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\15\1\16\1\17\4\15\1\20\10\15\1\21\36\15"+
    "\1\22\1\23\1\22\1\16\5\22\1\24\2\22\4\23"+
    "\1\22\1\25\1\21\2\23\1\22\11\23\1\22\14\23"+
    "\3\22\1\26\2\22\1\27\7\22\1\24\2\22\4\27"+
    "\2\22\1\21\2\27\1\22\11\27\1\22\14\27\2\22"+
    "\1\30\3\22\1\31\1\22\1\16\5\22\1\24\2\22"+
    "\4\31\1\22\1\25\1\21\2\31\1\22\11\31\1\22"+
    "\14\31\5\22\10\32\1\33\50\32\1\22\1\34\1\22"+
    "\1\16\5\22\1\24\2\22\4\34\2\22\1\21\2\34"+
    "\1\22\11\34\1\22\14\34\5\22\3\35\1\16\5\35"+
    "\1\36\10\35\1\37\31\35\1\40\1\41\2\35\1\42"+
    "\11\22\1\24\10\22\1\21\36\22\4\43\1\44\4\43"+
    "\1\45\10\43\1\46\31\43\1\47\4\43\4\50\1\51"+
    "\4\50\1\52\10\50\1\46\32\50\1\47\3\50\1\22"+
    "\1\31\1\22\1\16\5\22\1\24\1\22\1\53\4\31"+
    "\1\22\1\54\1\21\2\31\1\22\11\31\1\22\4\31"+
    "\1\55\1\31\1\56\5\31\1\57\1\60\3\22\20\61"+
    "\1\62\40\61\3\15\1\0\1\63\4\15\1\0\10\15"+
    "\1\0\36\15\3\0\1\16\55\0\4\15\1\63\1\64"+
    "\3\15\1\0\10\15\1\0\36\15\12\0\1\65\43\0"+
    "\1\66\1\67\2\0\1\70\12\0\4\70\3\0\1\71"+
    "\1\70\1\0\1\72\3\70\1\73\1\70\1\74\2\70"+
    "\1\75\14\70\67\0\2\23\4\0\2\23\3\0\4\23"+
    "\3\0\2\23\1\0\11\23\1\0\14\23\17\0\1\76"+
    "\67\0\1\77\40\0\2\27\4\0\2\27\3\0\4\27"+
    "\3\0\2\27\1\0\11\27\1\0\14\27\26\0\1\100"+
    "\40\0\2\31\4\0\2\31\3\0\4\31\3\0\2\31"+
    "\1\0\11\31\1\0\14\31\5\0\10\32\1\101\60\32"+
    "\1\102\50\32\1\0\2\34\4\0\2\34\3\0\4\34"+
    "\3\0\2\34\1\0\11\34\1\0\14\34\5\0\4\43"+
    "\1\0\15\43\1\0\31\43\1\0\4\43\4\103\1\104"+
    "\1\105\14\103\1\0\31\103\1\0\4\103\4\43\1\0"+
    "\5\43\1\106\7\43\1\0\31\43\1\0\4\43\4\50"+
    "\1\0\15\50\1\0\32\50\1\0\3\50\4\107\1\110"+
    "\1\105\14\107\1\0\32\107\1\0\3\107\4\50\1\0"+
    "\5\50\1\111\7\50\1\0\32\50\1\0\3\50\20\112"+
    "\1\113\33\112\1\114\4\112\1\0\2\31\4\0\2\31"+
    "\3\0\4\31\3\0\2\31\1\0\11\31\1\0\10\31"+
    "\1\115\3\31\6\0\2\31\4\0\2\31\3\0\4\31"+
    "\3\0\2\31\1\0\11\31\1\0\3\31\1\116\10\31"+
    "\5\0\54\117\1\120\4\117\55\121\1\120\3\121\20\0"+
    "\1\122\40\0\4\15\1\63\4\15\1\0\10\15\1\0"+
    "\36\15\3\64\1\123\1\124\1\64\1\125\2\64\1\123"+
    "\10\64\1\123\36\64\10\0\1\126\2\0\1\127\1\0"+
    "\1\130\44\0\2\70\4\0\2\70\3\0\4\70\3\0"+
    "\2\70\1\131\11\70\1\0\14\70\6\0\2\70\4\0"+
    "\2\70\3\0\4\70\3\0\1\70\1\132\1\131\11\70"+
    "\1\0\14\70\6\0\2\70\4\0\2\70\3\0\4\70"+
    "\3\0\2\70\1\131\1\70\1\133\6\70\1\134\1\0"+
    "\14\70\6\0\2\70\4\0\2\70\3\0\4\70\3\0"+
    "\2\70\1\131\5\70\1\135\3\70\1\0\14\70\6\0"+
    "\2\70\4\0\2\70\3\0\4\70\3\0\2\70\1\131"+
    "\7\70\1\136\1\70\1\0\14\70\7\0\1\137\35\0"+
    "\1\140\30\0\1\126\2\0\1\127\45\0\10\32\1\141"+
    "\71\32\1\142\37\32\4\0\1\104\54\0\4\103\1\104"+
    "\1\0\14\103\1\0\31\103\1\0\4\103\6\105\1\143"+
    "\52\105\4\43\1\0\3\43\1\144\2\43\1\145\6\43"+
    "\1\0\31\43\1\0\4\43\4\0\1\110\54\0\4\107"+
    "\1\110\1\0\14\107\1\0\32\107\1\0\3\107\4\50"+
    "\1\0\3\50\1\146\2\50\1\147\6\50\1\0\32\50"+
    "\1\0\3\50\54\114\1\112\4\114\1\0\2\31\4\0"+
    "\2\31\3\0\4\31\3\0\2\31\1\0\11\31\1\0"+
    "\11\31\1\150\2\31\6\0\2\31\4\0\2\31\3\0"+
    "\4\31\3\0\2\31\1\0\11\31\1\0\6\31\1\151"+
    "\5\31\26\0\1\152\37\0\6\123\1\153\52\123\4\64"+
    "\1\124\1\64\1\125\2\64\1\123\10\64\1\123\36\64"+
    "\10\0\1\154\64\0\1\155\106\0\1\156\17\0\2\70"+
    "\4\0\2\70\3\0\4\70\3\0\2\70\1\157\11\70"+
    "\1\0\14\70\6\0\2\70\4\0\2\70\3\0\4\70"+
    "\3\0\2\70\1\131\2\70\1\160\6\70\1\0\14\70"+
    "\6\0\2\70\4\0\2\70\3\0\4\70\3\0\2\70"+
    "\1\131\1\70\1\132\7\70\1\0\14\70\6\0\2\70"+
    "\4\0\2\70\3\0\4\70\3\0\2\70\1\131\2\70"+
    "\1\71\6\70\1\0\14\70\6\0\2\70\4\0\2\70"+
    "\3\0\4\70\3\0\2\70\1\131\3\70\1\134\5\70"+
    "\1\0\14\70\7\0\1\137\22\0\1\157\35\0\1\161"+
    "\11\0\3\161\7\0\1\161\6\0\1\161\3\0\1\161"+
    "\3\0\1\161\3\0\1\161\7\0\21\32\1\0\37\32"+
    "\4\43\1\0\3\43\1\162\11\43\1\0\31\43\1\0"+
    "\10\43\1\0\7\43\1\163\5\43\1\0\31\43\1\0"+
    "\4\43\4\50\1\0\3\50\1\164\11\50\1\0\32\50"+
    "\1\0\7\50\1\0\7\50\1\165\5\50\1\0\32\50"+
    "\1\0\3\50\1\0\2\31\4\0\2\31\3\0\4\31"+
    "\3\0\2\31\1\0\11\31\1\0\12\31\1\166\1\31"+
    "\6\0\2\31\4\0\2\31\3\0\3\31\1\167\3\0"+
    "\2\31\1\0\11\31\1\0\14\31\22\0\1\170\57\0"+
    "\1\171\45\0\2\70\4\0\2\70\3\0\4\70\3\0"+
    "\2\70\1\131\3\70\1\132\5\70\1\0\14\70\7\0"+
    "\1\161\11\0\3\161\6\0\1\157\1\161\6\0\1\161"+
    "\3\0\1\161\3\0\1\161\3\0\1\161\7\0\4\43"+
    "\1\0\10\43\1\172\4\43\1\0\31\43\1\0\4\43"+
    "\4\50\1\0\10\50\1\173\4\50\1\0\32\50\1\0"+
    "\3\50\1\0\2\31\4\0\2\31\3\0\4\31\3\0"+
    "\2\31\1\0\11\31\1\0\13\31\1\174\6\0\2\31"+
    "\4\0\2\31\3\0\4\31\3\0\2\31\1\0\11\31"+
    "\1\0\5\31\1\175\6\31\23\0\1\176\61\0\1\177"+
    "\41\0\4\43\1\0\11\43\1\200\3\43\1\0\31\43"+
    "\1\0\4\43\4\50\1\0\11\50\1\201\3\50\1\0"+
    "\32\50\1\0\3\50\1\0\2\31\4\0\2\31\3\0"+
    "\1\202\3\31\3\0\2\31\1\0\11\31\1\0\14\31"+
    "\6\0\2\31\4\0\2\31\3\0\4\31\3\0\2\31"+
    "\1\0\11\31\1\0\7\31\1\203\4\31\24\0\1\204"+
    "\104\0\1\205\15\0\4\43\1\0\12\43\1\206\2\43"+
    "\1\0\31\43\1\0\4\43\4\50\1\0\12\50\1\207"+
    "\2\50\1\0\32\50\1\0\3\50\16\0\1\210\106\0"+
    "\1\211\14\0\4\43\1\0\11\43\1\212\3\43\1\0"+
    "\31\43\1\0\4\43\4\50\1\0\11\50\1\213\3\50"+
    "\1\0\32\50\1\0\3\50\13\0\1\214\112\0\1\215"+
    "\13\0\4\43\1\0\6\43\1\216\6\43\1\0\31\43"+
    "\1\0\4\43\4\50\1\0\6\50\1\217\6\50\1\0"+
    "\32\50\1\0\3\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5243];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\1\3\0\2\1\2\0\5\1\1\11"+
    "\2\1\1\11\5\1\1\0\1\1\1\11\2\1\3\11"+
    "\4\1\1\11\4\1\1\11\4\1\1\11\3\1\1\0"+
    "\2\11\7\0\2\11\2\0\2\1\1\0\4\1\1\0"+
    "\1\11\1\0\2\1\1\0\1\11\3\0\2\1\3\0"+
    "\1\11\10\0\2\11\6\1\3\11\2\0\1\11\2\0"+
    "\6\1\2\0\4\1\2\0\4\1\2\0\2\1\2\0"+
    "\2\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private IElementType elTokenType = XmlTokenType.XML_DATA_CHARACTERS;
  private IElementType elTokenType2 = XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;

  public void setElTypes(IElementType _elTokenType,IElementType _elTokenType2) {
    elTokenType = _elTokenType;
    elTokenType2 = _elTokenType2;
  }

  private int myPrevState = YYINITIAL;

  public int yyprevstate() {
    return myPrevState;
  }

  private int popState(){
    final int prev = myPrevState;
    myPrevState = YYINITIAL;
    return prev;
  }

  protected void pushState(int state){
    myPrevState = state;
  }


  public __XmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public __XmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 35: break;
        case 16: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 36: break;
        case 28: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_CDATA_END;
          }
        case 37: break;
        case 27: 
          { return elTokenType2;
          }
        case 38: break;
        case 14: 
          { yybegin(ATTR_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 39: break;
        case 24: 
          { return elTokenType;
          }
        case 40: break;
        case 31: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 41: break;
        case 30: 
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 42: break;
        case 5: 
          { yybegin(TAG); return XmlTokenType.XML_START_TAG_START;
          }
        case 43: break;
        case 20: 
          { yybegin(END_TAG); return XmlTokenType.XML_END_TAG_START;
          }
        case 44: break;
        case 6: 
          { if(yystate() == YYINITIAL){
        return XmlTokenType.XML_BAD_CHARACTER;
      }
      else yybegin(popState()); yypushback(yylength());
          }
        case 45: break;
        case 7: 
          { yybegin(ATTR_LIST); pushState(TAG); return XmlTokenType.XML_NAME;
          }
        case 46: break;
        case 21: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 47: break;
        case 22: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 48: break;
        case 25: 
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 49: break;
        case 29: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 50: break;
        case 33: 
          { yybegin(CDATA); return XmlTokenType.XML_CDATA_START;
          }
        case 51: break;
        case 2: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 52: break;
        case 9: 
          { yybegin(ATTR_LIST); pushState(PROCESSING_INSTRUCTION); return XmlTokenType.XML_NAME;
          }
        case 53: break;
        case 18: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 54: break;
        case 13: 
          { yybegin(ATTR_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 55: break;
        case 15: 
          { return XmlTokenType.XML_EQ;
          }
        case 56: break;
        case 12: 
          { yybegin(ATTR_LIST); yypushback(yylength());
          }
        case 57: break;
        case 10: 
          { return XmlTokenType.XML_NAME;
          }
        case 58: break;
        case 8: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 59: break;
        case 26: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 60: break;
        case 23: 
          { return XmlElementType.XML_MARKUP;
          }
        case 61: break;
        case 11: 
          { yybegin(ATTR); return XmlTokenType.XML_NAME;
          }
        case 62: break;
        case 32: 
          { return XmlTokenType.XML_DOCTYPE_SYSTEM;
          }
        case 63: break;
        case 34: 
          { yybegin(DOCTYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 64: break;
        case 17: 
          { yybegin(ATTR_LIST); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 65: break;
        case 19: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 66: break;
        case 4: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 67: break;
        case 1: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 68: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
