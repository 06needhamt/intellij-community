/* The following code was generated by JFlex 1.4 on 4/1/05 3:32 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 4/1/05 3:32 PM from the specification file
 * <tt>C:/Irida/tools/lexer/_HtmlLexer.flex</tt>
 */
public class _HtmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 9;
  public static final int END_TAG_NAME = 4;
  public static final int START_TAG_NAME = 3;
  public static final int ATTRIBUTE_VALUE_SQ = 8;
  public static final int DOC_TYPE = 1;
  public static final int ATTRIBUTE_VALUE_DQ = 7;
  public static final int YYINITIAL = 0;
  public static final int TAG_ATTRIBUTES = 5;
  public static final int COMMENT = 2;
  public static final int ATTRIBUTE_VALUE_START = 6;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\11\1\6\4\0\1\7"+
    "\5\0\1\4\1\2\1\31\12\2\1\1\1\0\1\10\1\32\1\30"+
    "\1\27\1\0\1\1\1\25\1\14\1\12\1\20\2\1\1\21\1\26"+
    "\2\1\1\23\1\22\1\1\1\13\1\17\3\1\1\15\1\24\3\1"+
    "\1\16\1\1\1\0\1\5\2\0\1\1\1\0\1\1\1\25\1\14"+
    "\1\12\1\20\2\1\1\21\1\26\2\1\1\23\1\22\1\1\1\13"+
    "\1\17\3\1\1\15\1\24\3\1\1\16\1\1\57\0\1\1\12\0"+
    "\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u0128\1\2\0"+
    "\22\1\34\0\136\1\2\0\11\1\2\0\7\1\16\0\2\1\16\0"+
    "\5\1\11\0\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\24\1\1\0\54\1\1\0\10\1\2\0\32\1\14\0"+
    "\202\1\12\0\71\1\2\0\2\1\2\0\2\1\3\0\46\1\2\0"+
    "\2\1\67\0\46\1\2\0\1\1\7\0\47\1\110\0\33\1\5\0"+
    "\3\1\56\0\32\1\5\0\13\1\46\0\143\1\1\0\1\1\17\0"+
    "\2\1\23\0\3\1\23\0\1\1\1\0\33\1\123\0\46\1\u015f\0"+
    "\65\1\3\0\1\1\22\0\1\1\7\0\12\1\43\0\10\1\2\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\42\0"+
    "\2\1\1\0\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0"+
    "\4\1\1\0\1\1\23\0\3\1\20\0\7\1\1\0\1\1\1\0"+
    "\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0"+
    "\1\1\22\0\1\1\17\0\1\1\44\0\10\1\2\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\2\0\4\1\3\0\1\1\36\0"+
    "\2\1\1\0\3\1\43\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\44\0\1\1\1\0\2\1\43\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\20\1\46\0\2\1\43\0"+
    "\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0"+
    "\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0"+
    "\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\2\1\42\0"+
    "\1\1\77\0\10\1\1\0\42\1\35\0\4\1\164\0\42\1\1\0"+
    "\5\1\1\0\2\1\45\0\6\1\112\0\46\1\12\0\47\1\11\0"+
    "\132\1\5\0\104\1\5\0\122\1\6\0\7\1\1\0\77\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\47\1\1\0\1\1\1\0\4\1\2\0\37\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0"+
    "\7\1\1\0\27\1\1\0\37\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\47\1\1\0\23\1\105\0\125\1\14\0\u026c\1\2\0"+
    "\10\1\12\0\32\1\5\0\113\1\225\0\64\1\154\0\130\1\10\0"+
    "\51\1\u0557\0\234\1\4\0\132\1\6\0\26\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\202\0\1\1\202\0\1\1\4\0\1\1\2\0"+
    "\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\3\1\1\0\7\1\u0ecb\0\2\1\52\0"+
    "\5\1\13\0\124\1\10\0\2\1\2\0\132\1\1\0\3\1\6\0"+
    "\50\1\4\0\136\1\21\0\30\1\u0248\0\u19b6\1\112\0\u51a6\1\132\0"+
    "\u048d\1\u0773\0\u2ba4\1\u215c\0\u012e\1\322\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\3\1\1\0\1\1\1\0\207\1\44\0"+
    "\32\1\6\0\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0"+
    "\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\0\1\2\2\3\1\4\1\5\1\6"+
    "\1\7\5\10\1\11\1\1\1\10\1\12\1\13\1\14"+
    "\1\15\1\13\1\16\1\2\1\17\1\20\1\10\2\3"+
    "\1\21\2\3\1\4\1\10\1\0\1\22\1\23\1\0"+
    "\1\3\5\0\1\24\1\25\5\0\1\26\1\27\2\0"+
    "\1\14\3\0\1\30\2\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u010e\0\u015f\0\u017a"+
    "\0\u0195\0\u01b0\0\u010e\0\u01cb\0\u01e6\0\u0201\0\u010e\0\u021c"+
    "\0\u010e\0\u0237\0\u010e\0\u0252\0\u010e\0\u010e\0\u0237\0\u026d"+
    "\0\u0288\0\u010e\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u010e"+
    "\0\u010e\0\u015f\0\u010e\0\u017a\0\u032a\0\u0345\0\u0360\0\u037b"+
    "\0\u010e\0\u010e\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\u0402\0\u010e"+
    "\0\u010e\0\u041d\0\u0438\0\u010e\0\u0453\0\u046e\0\u0489\0\u010e"+
    "\0\u04a4\0\u04bf\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\13\1\14\4\13\1\15\22\13\3\16\1\14\2\16"+
    "\1\17\1\20\7\16\1\21\1\16\1\22\6\16\1\23"+
    "\2\16\4\24\1\25\26\24\1\16\1\26\10\16\15\26"+
    "\5\16\1\26\6\16\1\27\1\16\15\26\4\16\1\27"+
    "\1\30\1\27\1\14\6\27\15\30\1\27\1\31\1\32"+
    "\1\33\3\34\1\14\2\34\1\35\1\36\20\34\1\31"+
    "\1\37\1\34\5\40\1\41\1\42\24\40\5\43\1\44"+
    "\1\43\1\42\23\43\27\45\1\46\3\45\36\0\1\14"+
    "\40\0\1\47\15\0\1\50\1\0\1\51\1\0\6\52"+
    "\1\53\24\52\7\54\1\53\23\54\24\0\1\55\23\0"+
    "\1\56\15\0\4\24\1\57\32\24\1\60\26\24\1\0"+
    "\2\26\1\0\1\26\5\0\15\26\5\0\2\30\1\0"+
    "\1\30\5\0\15\30\34\0\1\61\2\0\3\34\1\0"+
    "\2\34\2\0\20\34\2\0\1\34\5\40\1\41\1\0"+
    "\31\40\1\41\25\40\5\43\1\44\1\43\1\0\30\43"+
    "\1\44\25\43\27\45\1\0\3\45\30\0\1\62\6\0"+
    "\1\63\5\0\1\64\45\0\1\65\27\0\1\66\10\0"+
    "\4\24\1\67\33\24\1\0\22\24\1\70\2\24\4\0"+
    "\1\71\41\0\1\72\42\0\1\73\32\0\1\74\7\0"+
    "\5\24\1\0\22\24\1\0\2\24\14\0\1\75\44\0"+
    "\1\76\21\0\1\77\31\0\1\100\34\0\1\101\33\0"+
    "\1\102\33\0\1\103\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1242];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\3\0\4\1\1\11\2\1\1\11\4\1"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\3\1\1\11\4\1\1\0\2\11\1\0\1\11"+
    "\5\0\2\11\5\0\2\11\2\0\1\11\3\0\1\11"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HtmlLexer() {
    this((java.io.Reader)null);
  }


  public _HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HtmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 26: break;
        case 8: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 27: break;
        case 11: 
          { yybegin(YYINITIAL); yypushback(1); break;
          }
        case 28: break;
        case 15: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 29: break;
        case 24: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 30: break;
        case 25: 
          { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 31: break;
        case 4: 
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 32: break;
        case 20: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 33: break;
        case 21: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 34: break;
        case 17: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 35: break;
        case 23: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 36: break;
        case 2: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 37: break;
        case 1: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 38: break;
        case 14: 
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 39: break;
        case 19: 
          { yybegin(END_TAG_NAME); return XmlTokenType.XML_END_TAG_START;
          }
        case 40: break;
        case 9: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 41: break;
        case 16: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 42: break;
        case 7: 
          { yybegin(START_TAG_NAME); return XmlTokenType.XML_START_TAG_START;
          }
        case 43: break;
        case 12: 
          { return XmlTokenType.XML_NAME;
          }
        case 44: break;
        case 13: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 45: break;
        case 22: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 46: break;
        case 10: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
          }
        case 47: break;
        case 18: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 48: break;
        case 6: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 49: break;
        case 5: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 50: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
