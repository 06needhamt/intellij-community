/* The following code was generated by JFlex 1.4 on 3/26/05 8:57 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 3/26/05 8:57 PM from the specification file
 * <tt>C:/Irida/tools/lexer/_HtmlLexer.flex</tt>
 */
public class _HtmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 9;
  public static final int END_TAG_NAME = 4;
  public static final int START_TAG_NAME = 3;
  public static final int ATTRIBUTE_VALUE_SQ = 8;
  public static final int DOC_TYPE = 1;
  public static final int ATTRIBUTE_VALUE_DQ = 7;
  public static final int YYINITIAL = 0;
  public static final int TAG_ATTRIBUTES = 5;
  public static final int COMMENT = 2;
  public static final int ATTRIBUTE_VALUE_START = 6;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\33\1\11\1\0\1\7"+
    "\1\0\1\5\1\12\5\0\1\4\1\2\1\32\12\2\1\1\1\0"+
    "\1\13\1\34\1\10\1\31\1\0\1\1\1\27\1\16\1\14\1\22"+
    "\2\1\1\23\1\30\2\1\1\25\1\24\1\1\1\15\1\21\3\1"+
    "\1\17\1\26\3\1\1\20\1\1\1\0\1\6\2\0\1\1\1\0"+
    "\1\1\1\27\1\16\1\14\1\22\2\1\1\23\1\30\2\1\1\25"+
    "\1\24\1\1\1\15\1\21\3\1\1\17\1\26\3\1\1\20\1\1"+
    "\1\0\uff84\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\3\0\1\3\2\4\1\5\1\1"+
    "\1\6\1\7\1\1\1\10\1\11\4\7\1\2\1\7"+
    "\1\12\1\13\1\1\1\14\1\15\1\1\1\16\1\3"+
    "\1\17\1\20\1\7\2\4\1\21\2\4\1\5\1\7"+
    "\3\0\1\22\1\23\2\0\1\4\5\0\1\24\1\25"+
    "\5\0\1\26\1\0\1\27\1\0\1\14\3\0\1\30"+
    "\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[70];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u015c"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u015c"+
    "\0\u015c\0\u027e\0\u015c\0\u029b\0\u015c\0\u02b8\0\u015c\0\u015c"+
    "\0\u029b\0\u02d5\0\u02f2\0\u015c\0\u030f\0\u032c\0\u0349\0\u0366"+
    "\0\u0383\0\u03a0\0\u03bd\0\u0383\0\u0383\0\u03da\0\u01b3\0\u015c"+
    "\0\u01d0\0\u03f7\0\u0414\0\u0431\0\u044e\0\u015c\0\u015c\0\u046b"+
    "\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u015c\0\u04fc\0\u0383\0\u0519"+
    "\0\u015c\0\u0536\0\u0553\0\u0570\0\u015c\0\u0383";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[70];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\13\1\14\1\13\1\15\1\13\1\16\3\13\1\17"+
    "\21\13\3\15\1\14\4\15\1\20\1\21\1\22\6\15"+
    "\1\23\1\15\1\24\11\15\4\25\1\26\30\25\1\15"+
    "\1\27\12\15\15\27\5\15\1\27\11\15\1\30\15\27"+
    "\4\15\1\31\1\32\1\31\1\14\4\31\1\33\2\31"+
    "\1\30\15\32\1\31\1\34\1\31\1\35\3\36\1\14"+
    "\4\36\1\33\1\37\1\40\17\36\1\41\2\36\6\42"+
    "\1\43\2\42\1\44\23\42\6\45\1\46\3\45\1\44"+
    "\22\45\31\47\1\50\3\47\3\13\1\0\1\13\1\0"+
    "\1\13\1\16\3\13\1\0\21\13\3\0\1\14\66\0"+
    "\5\13\1\0\1\13\1\16\3\13\1\0\21\13\14\51"+
    "\1\52\1\53\13\51\1\54\1\55\1\56\1\51\11\57"+
    "\1\60\23\57\12\61\1\60\22\61\26\0\1\62\25\0"+
    "\1\63\15\0\4\25\1\64\34\25\1\65\30\25\1\0"+
    "\2\27\1\0\1\27\7\0\15\27\5\0\2\32\1\0"+
    "\1\32\7\0\15\32\14\0\1\66\24\0\3\36\1\0"+
    "\4\36\3\0\17\36\1\0\2\36\11\42\1\0\34\42"+
    "\1\60\23\42\12\45\1\0\34\45\1\60\22\45\31\47"+
    "\1\0\3\47\10\0\1\67\24\0\15\51\1\53\71\51"+
    "\1\53\1\70\22\51\1\71\10\51\1\53\17\51\27\0"+
    "\1\72\31\0\1\73\10\0\4\25\1\74\40\25\1\75"+
    "\24\25\15\51\1\53\1\51\1\76\21\51\1\77\10\51"+
    "\1\53\17\51\25\0\1\100\34\0\1\101\7\0\10\25"+
    "\1\0\24\25\15\51\1\53\2\51\1\102\14\51\30\0"+
    "\1\103\4\0\15\51\1\53\3\51\1\104\13\51\16\0"+
    "\1\105\16\0\15\51\1\53\4\51\1\106\12\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1421];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\3\0\6\1\1\11\2\1\1\11"+
    "\7\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\3\1\1\11\4\1\3\0\2\1\2\0\1\11\5\0"+
    "\2\11\5\0\1\11\1\0\1\1\1\0\1\11\3\0"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[70];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HtmlLexer() {
    this((java.io.Reader)null);
  }


  public _HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HtmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4:
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 26: break;
        case 7:
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 27: break;
        case 11:
          { yybegin(YYINITIAL); yypushback(1); break;
          }
        case 28: break;
        case 15:
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 29: break;
        case 24:
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 30: break;
        case 25:
          { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 31: break;
        case 5:
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 32: break;
        case 20: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 33: break;
        case 21:
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 34: break;
        case 17:
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 35: break;
        case 23:
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 36: break;
        case 3:
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 37: break;
        case 2:
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 38: break;
        case 14:
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 39: break;
        case 19:
          { yybegin(END_TAG_NAME); return XmlTokenType.XML_END_TAG_START;
          }
        case 40: break;
        case 9:
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 41: break;
        case 16:
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 42: break;
        case 8:
          { yybegin(START_TAG_NAME); return XmlTokenType.XML_START_TAG_START;
          }
        case 43: break;
        case 12:
          { return XmlTokenType.XML_NAME;
          }
        case 44: break;
        case 13:
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 45: break;
        case 22:
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 46: break;
        case 10:
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
          }
        case 47: break;
        case 18:
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 48: break;
        case 6:
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 49: break;
        case 1:
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 50: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
