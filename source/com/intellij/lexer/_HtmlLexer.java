/* The following code was generated by JFlex 1.4.1 on 10/18/06 6:15 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/18/06 6:15 PM from the specification file
 * <tt>C:/work/Irida/tools/lexer/_HtmlLexer.flex</tt>
 */
public class _HtmlLexer implements FlexLexer,ELHostLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 9;
  public static final int END_TAG_NAME = 4;
  public static final int START_TAG_NAME = 3;
  public static final int ATTRIBUTE_VALUE_SQ = 8;
  public static final int DOC_TYPE = 1;
  public static final int ATTRIBUTE_VALUE_DQ = 7;
  public static final int YYINITIAL = 0;
  public static final int TAG_ATTRIBUTES = 5;
  public static final int COMMENT = 2;
  public static final int ATTRIBUTE_VALUE_START = 6;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\12\1\7\1\4\1\37"+
    "\1\0\1\47\1\10\5\0\1\6\1\5\1\44\12\2\1\1\1\50"+
    "\1\11\1\46\1\43\1\42\1\0\1\57\1\34\1\16\1\13\1\24"+
    "\1\57\1\1\1\25\1\36\2\1\1\30\1\26\1\1\1\14\1\22"+
    "\3\1\1\17\1\32\3\1\1\21\1\1\1\0\1\45\2\0\1\1"+
    "\1\0\1\52\1\35\1\16\1\13\1\24\1\57\1\51\1\25\1\36"+
    "\2\1\1\31\1\27\1\55\1\15\1\23\1\54\1\1\1\53\1\20"+
    "\1\33\2\1\1\56\1\21\1\1\1\40\1\0\1\41\54\0\1\1"+
    "\12\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u013f\1"+
    "\31\0\162\1\4\0\14\1\16\0\5\1\11\0\1\1\213\0\1\1"+
    "\13\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\54\1"+
    "\1\0\46\1\1\0\5\1\4\0\202\1\10\0\105\1\1\0\46\1"+
    "\2\0\2\1\6\0\20\1\41\0\46\1\2\0\1\1\7\0\47\1"+
    "\110\0\33\1\5\0\3\1\56\0\32\1\5\0\13\1\43\0\2\1"+
    "\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1"+
    "\2\0\1\1\20\0\1\1\1\0\36\1\35\0\3\1\60\0\46\1"+
    "\13\0\1\1\u0152\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1"+
    "\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"+
    "\3\0\4\1\3\0\1\1\36\0\2\1\1\0\3\1\16\0\2\1"+
    "\23\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\37\0\4\1\1\0\1\1\23\0\3\1"+
    "\20\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\5\1\3\0\1\1\22\0\1\1\17\0\2\1\43\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\3\0\1\1\36\0\2\1\1\0\3\1\17\0\1\1\21\0\1\1"+
    "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\10\1\1\0\3\1"+
    "\113\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\46\0\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
    "\1\0\5\1\3\0\1\1\40\0\1\1\1\0\2\1\43\0\10\1"+
    "\1\0\3\1\1\0\27\1\1\0\20\1\46\0\2\1\43\0\22\1"+
    "\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0\60\1"+
    "\1\0\2\1\14\0\7\1\72\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1"+
    "\11\0\1\1\2\0\5\1\1\0\1\1\25\0\2\1\42\0\1\1"+
    "\77\0\10\1\1\0\42\1\35\0\4\1\164\0\42\1\1\0\5\1"+
    "\1\0\2\1\45\0\6\1\112\0\46\1\12\0\51\1\7\0\132\1"+
    "\5\0\104\1\5\0\122\1\6\0\7\1\1\0\77\1\1\0\1\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\47\1"+
    "\1\0\1\1\1\0\4\1\2\0\37\1\1\0\1\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\7\1"+
    "\1\0\27\1\1\0\37\1\1\0\1\1\1\0\4\1\2\0\7\1"+
    "\1\0\47\1\1\0\23\1\105\0\125\1\14\0\u026c\1\2\0\10\1"+
    "\12\0\32\1\5\0\113\1\25\0\15\1\1\0\4\1\16\0\22\1"+
    "\16\0\22\1\16\0\15\1\1\0\3\1\17\0\64\1\43\0\1\1"+
    "\4\0\1\1\103\0\130\1\10\0\51\1\127\0\35\1\63\0\36\1"+
    "\2\0\5\1\u038b\0\154\1\224\0\234\1\4\0\132\1\6\0\26\1"+
    "\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1"+
    "\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
    "\4\0\15\1\5\0\3\1\1\0\7\1\164\0\1\1\15\0\1\1"+
    "\202\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\3\1"+
    "\1\0\7\1\3\0\3\1\5\0\5\1\u0ebb\0\2\1\52\0\5\1"+
    "\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0\4\1"+
    "\5\0\50\1\4\0\136\1\21\0\30\1\70\0\20\1\u0200\0\u19b6\1"+
    "\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0\u012e\1\2\0\73\1"+
    "\225\0\7\1\14\0\5\1\5\0\1\1\1\0\12\1\1\0\15\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1"+
    "\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1\164\0\5\1"+
    "\1\0\207\1\44\0\32\1\6\0\32\1\13\0\131\1\3\0\6\1"+
    "\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\0\1\2\1\3\1\4\4\3\5\5"+
    "\1\6\1\5\3\7\1\10\1\11\1\12\1\10\1\13"+
    "\1\14\1\10\1\15\1\1\1\16\1\17\2\1\1\20"+
    "\1\21\4\20\1\2\1\5\1\22\1\23\1\0\1\24"+
    "\1\25\14\0\1\26\2\1\5\0\1\27\1\30\11\0"+
    "\1\31\1\0\1\32\1\1\1\32\1\33\1\0\1\34"+
    "\3\0\1\13\3\0\1\35\2\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u01e0\0\u0300\0\u0330\0\u0360\0\u0390\0\u01e0\0\u02d0\0\u01e0"+
    "\0\u03c0\0\u02d0\0\u01e0\0\u03f0\0\u01e0\0\u02d0\0\u0420\0\u01e0"+
    "\0\u0450\0\u01e0\0\u0480\0\u01e0\0\u01e0\0\u04b0\0\u04e0\0\u01e0"+
    "\0\u01e0\0\u0510\0\u0540\0\u02d0\0\u0570\0\u05a0\0\u05d0\0\u01e0"+
    "\0\u0600\0\u0630\0\u01e0\0\u01e0\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u0300\0\u0330\0\u07b0\0\u07e0\0\u0810"+
    "\0\u01e0\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u01e0\0\u01e0\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u01e0\0\u0b40\0\u0480\0\u0b70\0\u01e0"+
    "\0\u01e0\0\u0ba0\0\u01e0\0\u0bd0\0\u0c00\0\u0c30\0\u01e0\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u01e0\0\u0cf0\0\u0d20\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\13\1\14\5\13\1\15\25\13\1\16\5\13\1\17"+
    "\1\13\1\20\10\13\3\21\1\14\3\21\1\22\1\23"+
    "\11\21\2\24\1\21\1\25\15\21\1\26\3\21\1\27"+
    "\10\21\6\30\1\31\40\30\1\32\10\30\1\33\1\34"+
    "\1\33\1\14\1\34\4\33\1\35\1\33\24\34\10\33"+
    "\1\36\1\33\7\34\1\33\1\34\1\33\1\14\1\34"+
    "\6\33\24\34\10\33\1\36\1\33\7\34\1\33\1\37"+
    "\1\33\1\14\7\33\24\37\4\33\1\40\1\41\1\33"+
    "\1\42\1\36\1\33\7\37\3\43\1\14\3\43\1\44"+
    "\1\45\26\43\1\46\3\43\1\40\1\47\13\43\7\50"+
    "\1\51\27\50\1\52\5\50\1\53\1\50\1\54\20\50"+
    "\1\51\26\50\1\55\5\50\1\53\1\50\1\54\10\50"+
    "\42\56\1\57\1\60\14\56\63\0\1\14\55\0\1\61"+
    "\2\0\1\61\5\0\1\62\24\61\3\0\1\63\1\0"+
    "\1\64\4\0\7\61\40\0\1\65\56\0\1\13\21\0"+
    "\1\66\2\0\1\67\6\0\16\66\1\70\5\66\12\0"+
    "\1\70\1\71\1\66\1\72\1\73\2\66\7\74\1\50"+
    "\50\74\10\75\1\50\47\75\32\0\2\76\43\0\2\77"+
    "\45\0\1\100\52\0\2\34\2\0\2\34\4\0\24\34"+
    "\12\0\7\34\1\0\2\37\2\0\2\37\4\0\24\37"+
    "\12\0\7\37\43\0\1\101\14\0\3\43\1\0\3\43"+
    "\2\0\32\43\1\0\1\102\16\43\1\0\3\43\2\0"+
    "\27\43\1\103\2\43\1\0\1\102\56\43\1\101\1\102"+
    "\13\43\40\0\1\104\56\0\1\50\60\0\1\105\17\0"+
    "\42\56\1\106\1\0\57\56\1\60\14\56\1\0\2\61"+
    "\2\0\2\61\4\0\24\61\12\0\7\61\6\0\1\107"+
    "\4\0\1\110\44\0\41\65\1\111\16\65\1\0\2\66"+
    "\2\0\2\66\4\0\24\66\11\0\1\112\7\66\1\0"+
    "\1\66\1\113\2\0\2\66\4\0\24\66\11\0\1\112"+
    "\5\66\1\114\1\66\1\0\2\66\2\0\2\66\4\0"+
    "\5\66\1\115\16\66\11\0\1\112\7\66\1\0\2\66"+
    "\2\0\2\66\4\0\10\66\1\116\3\66\1\117\7\66"+
    "\11\0\1\112\7\66\1\0\2\66\2\0\2\66\4\0"+
    "\20\66\1\120\3\66\11\0\1\112\7\66\1\0\2\66"+
    "\2\0\2\66\4\0\22\66\1\121\1\66\11\0\1\112"+
    "\7\66\34\0\2\122\50\0\2\123\73\0\1\124\14\0"+
    "\43\43\1\0\1\102\13\43\3\103\1\125\3\103\2\125"+
    "\30\103\1\126\1\103\1\125\1\127\13\103\7\104\1\0"+
    "\31\104\1\130\16\104\10\105\1\0\30\105\1\130\16\105"+
    "\43\56\1\0\14\56\6\0\1\131\65\0\2\132\43\0"+
    "\1\66\1\113\2\0\2\66\4\0\24\66\11\0\1\133"+
    "\7\66\1\0\1\66\1\134\2\0\2\66\4\0\1\134"+
    "\2\66\1\134\5\66\1\134\7\66\2\134\1\66\11\0"+
    "\1\112\1\66\1\134\4\66\1\134\1\0\2\66\2\0"+
    "\2\66\4\0\24\66\11\0\1\133\7\66\1\0\2\66"+
    "\2\0\2\66\4\0\2\66\1\135\21\66\11\0\1\112"+
    "\7\66\1\0\2\66\2\0\2\66\4\0\10\66\1\115"+
    "\13\66\11\0\1\112\7\66\1\0\2\66\2\0\2\66"+
    "\4\0\2\66\1\70\21\66\11\0\1\112\7\66\1\0"+
    "\2\66\2\0\2\66\4\0\24\66\11\0\1\112\2\66"+
    "\1\117\4\66\30\0\2\136\56\0\2\137\26\0\41\125"+
    "\1\130\16\125\41\103\1\126\1\103\1\125\1\127\13\103"+
    "\16\0\1\140\42\0\1\66\1\134\2\0\2\66\4\0"+
    "\1\134\2\66\1\134\5\66\1\134\7\66\2\134\1\66"+
    "\11\0\1\133\1\66\1\134\4\66\1\134\1\0\2\66"+
    "\2\0\2\66\4\0\24\66\11\0\1\112\2\66\1\115"+
    "\4\66\36\0\1\141\40\0\2\142\55\0\1\143\62\0"+
    "\1\144\60\0\2\145\60\0\1\146\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\2\0\1\1\1\11\5\1\1\11\4\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\2\11\2\1\2\11\6\1"+
    "\1\11\1\1\1\0\2\11\14\0\1\11\2\1\5\0"+
    "\2\11\11\0\1\11\1\0\2\1\2\11\1\0\1\11"+
    "\3\0\1\11\3\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private IElementType elTokenType = XmlTokenType.XML_DATA_CHARACTERS;
  private IElementType elTokenType2 = XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;

  public void setElTypes(IElementType _elTokenType,IElementType _elTokenType2) {
    elTokenType = _elTokenType;
    elTokenType2 = _elTokenType2;
  }

  public _HtmlLexer() {
    this((java.io.Reader)null);
  }


  public _HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HtmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1254) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 31: break;
        case 5: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 32: break;
        case 26: 
          { return elTokenType2;
          }
        case 33: break;
        case 8: 
          { yybegin(YYINITIAL); yypushback(1); break;
          }
        case 34: break;
        case 23: 
          { return elTokenType;
          }
        case 35: break;
        case 14: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 36: break;
        case 29: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 37: break;
        case 28: 
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 38: break;
        case 10: 
          { return XmlTokenType.XML_START_TAG_START;
          }
        case 39: break;
        case 30: 
          { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 40: break;
        case 2: 
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 41: break;
        case 22: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 42: break;
        case 18: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 43: break;
        case 24: 
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 44: break;
        case 17: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 45: break;
        case 27: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 46: break;
        case 1: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 47: break;
        case 7: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 48: break;
        case 13: 
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 49: break;
        case 21: 
          { yybegin(END_TAG_NAME); return XmlTokenType.XML_END_TAG_START;
          }
        case 50: break;
        case 6: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 51: break;
        case 15: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 52: break;
        case 11: 
          { return XmlTokenType.XML_NAME;
          }
        case 53: break;
        case 12: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 54: break;
        case 25: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 55: break;
        case 9: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
          }
        case 56: break;
        case 19: 
          { yybegin(START_TAG_NAME); yypushback(yylength());
          }
        case 57: break;
        case 20: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 58: break;
        case 4: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 59: break;
        case 3: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
