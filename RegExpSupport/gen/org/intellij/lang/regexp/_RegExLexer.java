/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.regexp;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.StringEscapesTokenTypes;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayList;
import java.util.EnumSet;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>regexp-lexer.flex</tt>
 */
class _RegExLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED = 2;
  public static final int EMBRACED = 4;
  public static final int CLASS1 = 6;
  public static final int NEGATE_CLASS1 = 8;
  public static final int CLASS2 = 10;
  public static final int PROP = 12;
  public static final int OPTIONS = 14;
  public static final int COMMENT = 16;
  public static final int NAMED_GROUP = 18;
  public static final int QUOTED_NAMED_GROUP = 20;
  public static final int PY_NAMED_GROUP_REF = 22;
  public static final int PY_COND_REF = 24;
  public static final int BRACKET_EXPRESSION = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\65\1\60\1\61\1\62\1\60\22\0\1\55\1\70\1\0"+
    "\1\71\1\17\1\0\1\64\1\53\1\4\1\5\1\21\1\22\1\57"+
    "\1\47\1\3\1\0\1\2\7\46\2\1\1\63\1\0\1\52\1\67"+
    "\1\66\1\20\1\0\1\26\1\26\1\35\1\33\1\43\1\41\1\27"+
    "\1\50\1\36\2\13\1\56\1\56\1\56\1\13\1\40\1\42\1\31"+
    "\1\32\2\13\1\31\1\31\1\31\1\13\1\30\1\10\1\12\1\11"+
    "\1\16\1\14\1\0\1\25\1\26\1\34\1\33\1\25\1\25\1\54"+
    "\1\50\1\36\1\13\1\51\2\13\1\24\1\13\1\37\1\13\1\24"+
    "\1\31\1\24\1\45\1\31\1\31\1\44\1\13\1\27\1\6\1\23"+
    "\1\7\7\0\1\61\44\0\1\13\12\0\1\13\4\0\1\13\5\0"+
    "\27\13\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13\7\0"+
    "\1\13\1\0\1\13\201\0\5\13\1\0\2\13\2\0\4\13\1\0"+
    "\1\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0"+
    "\123\13\1\0\213\13\10\0\246\13\1\0\46\13\2\0\1\13\7\0"+
    "\47\13\110\0\33\13\5\0\3\13\55\0\53\13\25\0\12\15\4\0"+
    "\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13\12\15"+
    "\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\131\13\13\0"+
    "\1\13\16\0\12\15\41\13\11\0\2\13\4\0\1\13\5\0\26\13"+
    "\4\0\1\13\11\0\1\13\3\0\1\13\27\0\31\13\107\0\25\13"+
    "\117\0\66\13\3\0\1\13\22\0\1\13\7\0\12\13\4\0\12\15"+
    "\1\0\20\13\4\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\1\13\3\0\4\13\3\0\1\13\20\0\1\13\15\0\2\13"+
    "\1\0\3\13\4\0\12\15\2\13\23\0\6\13\4\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\2\13\1\0\2\13\37\0"+
    "\4\13\1\0\1\13\7\0\12\15\2\0\3\13\20\0\11\13\1\0"+
    "\3\13\1\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\3\0"+
    "\1\13\22\0\1\13\17\0\2\13\4\0\12\15\11\0\1\13\13\0"+
    "\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\5\13\3\0\1\13\36\0\2\13\1\0\3\13\4\0\12\15\1\0"+
    "\1\13\21\0\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0"+
    "\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0"+
    "\14\13\26\0\1\13\25\0\12\15\25\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\20\13\3\0\1\13\32\0\3\13\5\0\2\13\4\0"+
    "\12\15\25\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13\1\0"+
    "\5\13\3\0\1\13\40\0\1\13\1\0\2\13\4\0\12\15\1\0"+
    "\2\13\22\0\10\13\1\0\3\13\1\0\51\13\2\0\1\13\20\0"+
    "\1\13\20\0\3\13\4\0\12\15\12\0\6\13\5\0\22\13\3\0"+
    "\30\13\1\0\11\13\1\0\1\13\2\0\7\13\37\0\12\15\21\0"+
    "\60\13\1\0\2\13\14\0\7\13\11\0\12\15\47\0\2\13\1\0"+
    "\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0"+
    "\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0"+
    "\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0\1\13\11\0"+
    "\12\15\2\0\4\13\40\0\1\13\37\0\12\15\26\0\10\13\1\0"+
    "\44\13\33\0\5\13\163\0\53\13\24\0\1\13\12\15\6\0\6\13"+
    "\4\0\4\13\3\0\1\13\3\0\2\13\7\0\3\13\4\0\15\13"+
    "\14\0\1\13\1\0\12\15\6\0\46\13\1\0\1\13\5\0\1\13"+
    "\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0\7\13\1\0\1\13"+
    "\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13\1\0\71\13"+
    "\1\0\4\13\2\0\103\13\45\0\20\13\20\0\126\13\2\0\6\13"+
    "\3\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\6\0\10\13"+
    "\7\0\15\13\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13"+
    "\1\0\3\13\17\0\64\13\43\0\1\13\4\0\1\13\3\0\12\15"+
    "\46\0\12\15\6\0\130\13\10\0\51\13\1\0\1\13\5\0\106\13"+
    "\12\0\37\13\47\0\12\15\36\13\2\0\5\13\13\0\54\13\4\0"+
    "\32\13\6\0\12\15\46\0\27\13\11\0\65\13\53\0\12\15\6\0"+
    "\12\15\15\0\1\13\135\0\57\13\21\0\7\13\4\0\12\15\51\0"+
    "\36\13\15\0\2\13\12\15\54\13\32\0\44\13\34\0\12\15\3\0"+
    "\3\13\12\15\44\13\153\0\4\13\1\0\4\13\3\0\2\13\11\0"+
    "\300\13\100\0\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0"+
    "\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0"+
    "\65\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0"+
    "\4\13\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13\53\0"+
    "\1\61\1\61\107\0\1\13\15\0\1\13\20\0\15\13\145\0\1\13"+
    "\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\4\13\1\0\13\13\2\0\4\13"+
    "\5\0\5\13\4\0\1\13\64\0\2\13\u0a7b\0\57\13\1\0\57\13"+
    "\1\0\205\13\6\0\4\13\3\0\2\13\14\0\46\13\1\0\1\13"+
    "\5\0\1\13\2\0\70\13\7\0\1\13\20\0\27\13\11\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\120\0\1\13\u01d5\0\2\13\52\0\5\13"+
    "\5\0\2\13\4\0\126\13\6\0\3\13\1\0\132\13\1\0\4\13"+
    "\5\0\51\13\3\0\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13"+
    "\112\0\u51d6\13\52\0\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13"+
    "\12\15\2\13\24\0\57\13\20\0\37\13\2\0\106\13\61\0\11\13"+
    "\2\0\147\13\2\0\43\13\2\0\10\13\77\0\13\13\1\0\3\13"+
    "\1\0\4\13\1\0\27\13\35\0\64\13\16\0\62\13\34\0\12\15"+
    "\30\0\6\13\3\0\1\13\1\0\1\13\2\0\12\15\34\13\12\0"+
    "\27\13\31\0\35\13\7\0\57\13\34\0\1\13\12\15\6\0\5\13"+
    "\1\0\12\13\12\15\5\13\1\0\51\13\27\0\3\13\1\0\10\13"+
    "\4\0\12\15\6\0\27\13\3\0\1\13\3\0\62\13\1\0\1\13"+
    "\3\0\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13"+
    "\2\0\13\13\7\0\3\13\14\0\6\13\2\0\6\13\2\0\6\13"+
    "\11\0\7\13\1\0\7\13\1\0\53\13\1\0\12\13\12\0\163\13"+
    "\15\0\12\15\6\0\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u016e\13"+
    "\2\0\152\13\46\0\7\13\14\0\5\13\5\0\1\13\1\0\12\13"+
    "\1\0\15\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2\13"+
    "\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0\66\13\50\0\14\13"+
    "\164\0\5\13\1\0\207\13\23\0\12\15\7\0\32\13\6\0\32\13"+
    "\13\0\131\13\3\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13"+
    "\43\0\14\13\1\0\32\13\1\0\23\13\1\0\2\13\1\0\17\13"+
    "\2\0\16\13\42\0\173\13\u0185\0\35\13\3\0\61\13\57\0\40\13"+
    "\20\0\21\13\1\0\10\13\6\0\46\13\12\0\36\13\2\0\44\13"+
    "\4\0\10\13\60\0\236\13\2\0\12\15\126\0\50\13\10\0\64\13"+
    "\234\0\u0137\13\11\0\26\13\12\0\10\13\230\0\6\13\2\0\1\13"+
    "\1\0\54\13\1\0\2\13\3\0\1\13\2\0\27\13\12\0\27\13"+
    "\11\0\37\13\101\0\23\13\1\0\2\13\12\0\26\13\12\0\32\13"+
    "\106\0\70\13\6\0\2\13\100\0\1\13\17\0\4\13\1\0\3\13"+
    "\1\0\33\13\54\0\35\13\3\0\35\13\43\0\10\13\1\0\34\13"+
    "\33\0\66\13\12\0\26\13\12\0\23\13\15\0\22\13\156\0\111\13"+
    "\67\0\63\13\15\0\63\13\u0310\0\65\13\56\0\12\15\23\0\55\13"+
    "\40\0\31\13\7\0\12\15\11\0\44\13\17\0\12\15\20\0\43\13"+
    "\3\0\1\13\14\0\60\13\16\0\4\13\13\0\12\15\1\13\1\0"+
    "\1\13\43\0\22\13\1\0\31\13\124\0\7\13\1\0\1\13\1\0"+
    "\4\13\1\0\17\13\1\0\12\13\7\0\57\13\21\0\12\15\13\0"+
    "\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\5\13\3\0\1\13\22\0\1\13\14\0\5\13\u011e\0\60\13\24\0"+
    "\2\13\1\0\1\13\10\0\12\15\246\0\57\13\51\0\4\13\44\0"+
    "\60\13\24\0\1\13\13\0\12\15\46\0\53\13\25\0\12\15\66\0"+
    "\32\13\26\0\12\15\u0166\0\100\13\12\15\25\0\1\13\u01c0\0\71\13"+
    "\u0507\0\u039a\13\346\0\304\13\u0abc\0\u042f\13\u0fd1\0\u0247\13\u21b9\0\u0239\13"+
    "\7\0\37\13\1\0\12\15\146\0\36\13\22\0\60\13\20\0\4\13"+
    "\14\0\12\15\11\0\25\13\5\0\23\13\u0370\0\105\13\13\0\1\13"+
    "\102\0\15\13\u4060\0\2\13\u0bfe\0\153\13\5\0\15\13\3\0\11\13"+
    "\7\0\12\13\u1766\0\125\13\1\0\107\13\1\0\2\13\2\0\1\13"+
    "\2\0\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13"+
    "\1\0\101\13\1\0\4\13\2\0\10\13\1\0\7\13\1\0\34\13"+
    "\1\0\4\13\1\0\5\13\1\0\1\13\3\0\7\13\1\0\u0154\13"+
    "\2\0\31\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13"+
    "\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13"+
    "\1\0\10\13\2\0\62\15\u1000\0\305\13\u053b\0\4\13\1\0\33\13"+
    "\1\0\2\13\1\0\1\13\2\0\1\13\1\0\12\13\1\0\4\13"+
    "\1\0\1\13\1\0\1\13\6\0\1\13\4\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\3\13\1\0\2\13\1\0\1\13\2\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\2\0\4\13\1\0\7\13\1\0\4\13\1\0\4\13"+
    "\1\0\1\13\1\0\12\13\1\0\21\13\5\0\3\13\1\0\5\13"+
    "\1\0\21\13\u1144\0\ua6d7\13\51\0\u1035\13\13\0\336\13\2\0\u1682\13"+
    "\u295e\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final int ZZ_SX = 0x0700;
  private static final int ZZ_MX = 0x10000;
  private static final int ZZ_LX = 0x110000;
  private static char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_SX);
  private static class M { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_MX); }
  private static class L { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_LX); }

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\5\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\10"+
    "\1\35\1\2\1\36\1\37\1\36\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\1\1\46\1\47\2\50\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\56\1\10\1\57"+
    "\1\60\1\61\2\62\1\63\1\64\1\65\1\66\1\54"+
    "\1\67\2\10\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\0\1\100\1\101\1\102\1\103\1\104"+
    "\1\0\1\105\1\106\1\107\2\65\1\66\1\54\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\0"+
    "\1\106\1\120\2\65\1\66\1\121\1\122\1\106\1\65"+
    "\1\66\1\65\1\123\4\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u032c"+
    "\0\u0366\0\u032c\0\u032c\0\u03a0\0\u03da\0\u032c\0\u032c\0\u032c"+
    "\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u0414"+
    "\0\u032c\0\u044e\0\u032c\0\u0488\0\u032c\0\u032c\0\u032c\0\u032c"+
    "\0\u04c2\0\u032c\0\u04fc\0\u032c\0\u0536\0\u032c\0\u032c\0\u03a0"+
    "\0\u032c\0\u032c\0\u032c\0\u0570\0\u05aa\0\u032c\0\u032c\0\u032c"+
    "\0\u032c\0\u032c\0\u05e4\0\u061e\0\u032c\0\u0658\0\u032c\0\u0692"+
    "\0\u06cc\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u0706\0\u032c"+
    "\0\u032c\0\u032c\0\u0740\0\u077a\0\u07b4\0\u032c\0\u07ee\0\u0828"+
    "\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c"+
    "\0\u0862\0\u089c\0\u032c\0\u032c\0\u032c\0\u032c\0\u08d6\0\u032c"+
    "\0\u0910\0\u032c\0\u094a\0\u0984\0\u09be\0\u09f8\0\u032c\0\u032c"+
    "\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u032c\0\u0a32\0\u0a6c"+
    "\0\u032c\0\u0aa6\0\u032c\0\u0ae0\0\u0692\0\u032c\0\u032c\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u032c\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\17\1\20\1\21\1\22\1\23\1\17\1\24\1\17"+
    "\1\25\3\17\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\23\17\1\34\5\17\1\35\2\17\1\36\1\17\1\36"+
    "\2\17\1\36\3\17\1\37\12\17\1\40\57\17\1\41"+
    "\2\42\4\41\1\43\3\41\1\44\1\41\1\42\6\41"+
    "\22\44\1\42\1\41\2\44\2\41\1\44\1\41\1\44"+
    "\1\45\12\41\11\46\1\47\46\46\3\0\25\46\1\50"+
    "\41\46\3\0\7\46\6\17\1\23\1\17\1\51\1\52"+
    "\1\53\3\17\1\26\30\17\1\34\10\17\1\54\1\17"+
    "\1\54\1\17\1\55\1\54\4\17\6\56\1\57\1\56"+
    "\1\60\1\56\1\25\15\56\1\61\1\56\1\61\2\56"+
    "\1\61\2\56\1\61\15\56\1\61\13\56\5\62\1\63"+
    "\5\62\1\64\10\62\22\64\1\62\1\65\2\64\2\62"+
    "\1\64\1\62\1\64\4\62\1\66\6\62\60\11\1\67"+
    "\11\11\13\62\1\44\10\62\22\44\2\62\2\44\2\62"+
    "\1\44\1\62\1\44\7\62\1\70\16\62\1\44\10\62"+
    "\22\44\2\62\2\44\1\62\1\71\1\44\1\62\1\44"+
    "\20\62\1\63\5\62\1\44\10\62\22\44\2\62\2\44"+
    "\2\62\1\44\1\62\1\44\14\62\2\42\2\62\1\63"+
    "\5\62\1\44\1\62\1\42\6\62\22\44\1\42\1\62"+
    "\2\44\2\62\1\44\1\62\1\44\13\62\13\72\1\44"+
    "\10\72\22\44\2\72\2\44\2\72\1\44\1\72\1\44"+
    "\4\72\1\73\6\72\112\0\1\74\62\0\1\75\4\0"+
    "\1\76\53\0\1\77\1\100\1\101\4\102\1\77\1\102"+
    "\1\77\1\102\1\103\2\77\6\102\2\104\3\105\3\106"+
    "\1\107\2\110\2\111\1\103\1\112\1\103\1\113\1\114"+
    "\1\115\1\102\1\116\1\117\2\77\1\120\1\121\1\103"+
    "\1\77\1\121\1\77\1\121\2\77\1\121\4\77\43\0"+
    "\1\122\27\0\2\42\12\0\1\42\30\0\1\42\24\0"+
    "\2\44\10\0\3\44\6\0\23\44\1\0\2\44\2\0"+
    "\1\44\1\0\1\44\24\0\1\123\4\0\1\76\44\0"+
    "\1\124\6\0\1\77\1\100\1\101\4\102\1\77\1\102"+
    "\1\125\1\102\1\103\2\77\6\102\2\104\3\105\3\106"+
    "\1\107\2\110\2\111\1\103\1\112\1\103\1\113\1\114"+
    "\1\115\1\102\1\116\1\117\2\77\1\120\1\121\1\103"+
    "\1\77\1\121\1\77\1\121\2\77\1\121\4\77\64\0"+
    "\1\126\20\0\1\64\10\0\22\64\2\0\2\64\2\0"+
    "\1\64\1\0\1\64\26\0\1\65\10\0\22\65\2\0"+
    "\2\65\2\0\1\65\1\0\1\65\24\0\1\127\64\0"+
    "\1\130\33\0\1\131\11\0\1\132\1\133\7\0\1\134"+
    "\2\0\1\134\1\135\1\136\1\137\11\0\1\140\61\0"+
    "\2\100\43\0\1\100\25\0\1\141\43\0\1\141\23\0"+
    "\72\142\1\0\2\143\3\0\1\144\16\0\2\143\4\0"+
    "\3\143\3\0\1\143\1\0\1\143\2\0\1\143\24\0"+
    "\2\145\22\0\2\145\4\0\3\145\3\0\1\145\1\0"+
    "\1\145\2\0\1\145\24\0\1\100\1\146\43\0\1\146"+
    "\75\0\1\147\1\150\70\0\1\151\1\152\70\0\1\153"+
    "\14\0\1\154\71\0\1\155\1\156\1\0\5\157\1\0"+
    "\64\157\2\0\1\160\43\0\1\160\24\0\2\161\22\0"+
    "\2\161\4\0\3\161\3\0\1\161\1\0\1\161\2\0"+
    "\1\161\24\0\2\162\4\0\1\163\15\0\2\162\4\0"+
    "\3\162\3\0\1\162\1\0\1\162\2\0\1\162\24\0"+
    "\2\164\22\0\2\164\4\0\3\164\3\0\1\164\1\0"+
    "\1\164\2\0\1\164\24\0\1\100\1\165\43\0\1\165"+
    "\23\0\5\157\1\166\64\157\2\0\1\167\43\0\1\167"+
    "\24\0\2\170\4\0\1\161\15\0\2\170\4\0\3\170"+
    "\3\0\1\170\1\0\1\170\2\0\1\170\24\0\2\171"+
    "\22\0\2\171\4\0\3\171\3\0\1\171\1\0\1\171"+
    "\2\0\1\171\24\0\2\172\4\0\1\161\15\0\2\172"+
    "\4\0\3\172\3\0\1\172\1\0\1\172\2\0\1\172"+
    "\24\0\2\173\22\0\2\173\4\0\3\173\3\0\1\173"+
    "\1\0\1\173\2\0\1\173\24\0\2\174\4\0\1\161"+
    "\15\0\2\174\4\0\3\174\3\0\1\174\1\0\1\174"+
    "\2\0\1\174\24\0\2\175\4\0\1\161\15\0\2\175"+
    "\4\0\3\175\3\0\1\175\1\0\1\175\2\0\1\175"+
    "\24\0\2\176\4\0\1\161\15\0\2\176\4\0\3\176"+
    "\3\0\1\176\1\0\1\176\2\0\1\176\24\0\2\177"+
    "\4\0\1\161\15\0\2\177\4\0\3\177\3\0\1\177"+
    "\1\0\1\177\2\0\1\177\24\0\2\177\4\0\1\163"+
    "\15\0\2\177\4\0\3\177\3\0\1\177\1\0\1\177"+
    "\2\0\1\177\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\5\0\2\11\1\1\2\11\2\1\12\11"+
    "\1\1\1\11\1\1\1\11\1\1\4\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\3\11\2\1\5\11"+
    "\2\1\1\11\1\0\1\11\2\1\5\11\1\1\3\11"+
    "\3\1\1\11\2\1\10\11\1\0\1\1\4\11\1\0"+
    "\1\11\1\1\1\11\4\1\10\11\1\0\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    final ArrayList<Integer> states = new ArrayList();

    // This was an idea to use the regex implementation for XML schema regexes (which use a slightly different syntax)
    // as well, but is currently unfinished as it requires to tweak more places than just the lexer.
    private boolean xmlSchemaMode;

    int capturingGroupCount = 0;

    private boolean allowDanglingMetacharacters;
    private boolean allowNestedCharacterClasses;
    private boolean allowOctalNoLeadingZero;
    private boolean allowHexDigitClass;
    private boolean allowEmptyCharacterClass;
    private boolean allowHorizontalWhitespaceClass;
    private boolean allowCategoryShorthand;
    private boolean allowPosixBracketExpressions;

    _RegExLexer(EnumSet<RegExpCapability> capabilities) {
      this((java.io.Reader)null);
      this.xmlSchemaMode = capabilities.contains(RegExpCapability.XML_SCHEMA_MODE);
      this.allowDanglingMetacharacters = capabilities.contains(RegExpCapability.DANGLING_METACHARACTERS);
      this.allowNestedCharacterClasses = capabilities.contains(RegExpCapability.NESTED_CHARACTER_CLASSES);
      this.allowOctalNoLeadingZero = capabilities.contains(RegExpCapability.OCTAL_NO_LEADING_ZERO);
      this.commentMode = capabilities.contains(RegExpCapability.COMMENT_MODE);
      this.allowHexDigitClass = capabilities.contains(RegExpCapability.ALLOW_HEX_DIGIT_CLASS);
      this.allowHorizontalWhitespaceClass = capabilities.contains(RegExpCapability.ALLOW_HORIZONTAL_WHITESPACE_CLASS);
      this.allowEmptyCharacterClass = capabilities.contains(RegExpCapability.ALLOW_EMPTY_CHARACTER_CLASS);
      this.allowCategoryShorthand = capabilities.contains(RegExpCapability.UNICODE_CATEGORY_SHORTHAND);
      this.allowPosixBracketExpressions = capabilities.contains(RegExpCapability.POSIX_BRACKET_EXPRESSIONS);
    }

    private void yypushstate(int state) {
        states.add(yystate());
        yybegin(state);
    }

    private void yypopstate() {
        final int state = states.remove(states.size() - 1);
        yybegin(state);
    }

    private void handleOptions() {
      final String o = yytext().toString();
      if (o.contains("x")) {
        commentMode = !o.startsWith("-");
      }
    }

    // tracks whether the lexer is in comment mode, i.e. whether whitespace is not significant and whether to ignore
    // text after '#' till EOL
    boolean commentMode = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RegExLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed, int limit) {
    char [] map = new char[limit];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2594 && j < limit) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0 && j < limit);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          if (zzInput >= zzCMapL.length) ZZ_CMAP = zzCMapL = zzInput >= ZZ_MX ? L.MAP : M.MAP;
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypopstate(); return RegExpTT.COMMENT;
            }
          case 84: break;
          case 2: 
            { return RegExpTT.CHARACTER;
            }
          case 85: break;
          case 3: 
            { return RegExpTT.DOT;
            }
          case 86: break;
          case 4: 
            { capturingGroupCount++; return RegExpTT.GROUP_BEGIN;
            }
          case 87: break;
          case 5: 
            { return RegExpTT.GROUP_END;
            }
          case 88: break;
          case 6: 
            { if (yystate() != CLASS2) yypushstate(EMBRACED); return RegExpTT.LBRACE;
            }
          case 89: break;
          case 7: 
            { yypushstate(CLASS2);
                            return RegExpTT.CLASS_BEGIN;
            }
          case 90: break;
          case 8: 
            { return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            }
          case 91: break;
          case 9: 
            { return RegExpTT.CARET;
            }
          case 92: break;
          case 10: 
            { return RegExpTT.DOLLAR;
            }
          case 93: break;
          case 11: 
            { return RegExpTT.QUEST;
            }
          case 94: break;
          case 12: 
            { return RegExpTT.STAR;
            }
          case 95: break;
          case 13: 
            { return RegExpTT.PLUS;
            }
          case 96: break;
          case 14: 
            { return RegExpTT.UNION;
            }
          case 97: break;
          case 15: 
            { return RegExpTT.MINUS;
            }
          case 98: break;
          case 16: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CHARACTER;
            }
          case 99: break;
          case 17: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CTRL_CHARACTER;
            }
          case 100: break;
          case 18: 
            { if (commentMode) { yypushstate(COMMENT); return RegExpTT.COMMENT; } else return RegExpTT.CHARACTER;
            }
          case 101: break;
          case 19: 
            { if (allowDanglingMetacharacters) {
                          yypopstate(); yypushback(1);
                        } else {
                          return RegExpTT.BAD_CHARACTER;
                        }
            }
          case 102: break;
          case 20: 
            { return RegExpTT.NUMBER;
            }
          case 103: break;
          case 21: 
            { yypopstate(); return RegExpTT.RBRACE;
            }
          case 104: break;
          case 22: 
            { return RegExpTT.NAME;
            }
          case 105: break;
          case 23: 
            { return RegExpTT.COMMA;
            }
          case 106: break;
          case 24: 
            { assert false : yytext();
            }
          case 107: break;
          case 25: 
            { yybegin(CLASS2); return RegExpTT.CHARACTER;
            }
          case 108: break;
          case 26: 
            { yybegin(CLASS1); return RegExpTT.CARET;
            }
          case 109: break;
          case 27: 
            { if (allowNestedCharacterClasses) {
                           yypushstate(CLASS2);
                           return RegExpTT.CLASS_BEGIN;
                        }
                        return RegExpTT.CHARACTER;
            }
          case 110: break;
          case 28: 
            { yypopstate(); return RegExpTT.CLASS_END;
            }
          case 111: break;
          case 29: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.ESC_CHARACTER;
            }
          case 112: break;
          case 30: 
            { yypopstate(); yypushback(1);
            }
          case 113: break;
          case 31: 
            { yypopstate(); yypushstate(EMBRACED); return RegExpTT.LBRACE;
            }
          case 114: break;
          case 32: 
            { yypopstate(); if (allowCategoryShorthand) return RegExpTT.CATEGORY_SHORT_HAND; else yypushback(1);
            }
          case 115: break;
          case 33: 
            { yybegin(YYINITIAL); return RegExpTT.BAD_CHARACTER;
            }
          case 116: break;
          case 34: 
            { yybegin(YYINITIAL); return RegExpTT.GROUP_END;
            }
          case 117: break;
          case 35: 
            { handleOptions(); return RegExpTT.OPTIONS_ON;
            }
          case 118: break;
          case 36: 
            { handleOptions(); return RegExpTT.OPTIONS_OFF;
            }
          case 119: break;
          case 37: 
            { yybegin(YYINITIAL); return RegExpTT.COLON;
            }
          case 120: break;
          case 38: 
            { yybegin(YYINITIAL); return RegExpTT.GT;
            }
          case 121: break;
          case 39: 
            { yybegin(YYINITIAL); return RegExpTT.QUOTE;
            }
          case 122: break;
          case 40: 
            { return RegExpTT.BAD_CHARACTER;
            }
          case 123: break;
          case 41: 
            { yybegin(OPTIONS); return RegExpTT.SET_OPTIONS;
            }
          case 124: break;
          case 42: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(CLASS1);
                            return RegExpTT.CLASS_BEGIN;
            }
          case 125: break;
          case 43: 
            { return RegExpTT.REDUNDANT_ESCAPE;
            }
          case 126: break;
          case 44: 
            { if (yystate() == CLASS2) return RegExpTT.ESC_CHARACTER;
                                while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {
                                  yypushback(1);
                                }
                                return RegExpTT.BACKREF;
            }
          case 127: break;
          case 45: 
            { return (allowOctalNoLeadingZero ? RegExpTT.OCT_CHAR : RegExpTT.BAD_OCT_VALUE);
            }
          case 128: break;
          case 46: 
            { return RegExpTT.ESC_CHARACTER;
            }
          case 129: break;
          case 47: 
            { return RegExpTT.ESC_CTRL_CHARACTER;
            }
          case 130: break;
          case 48: 
            { return yystate() != CLASS2 ? RegExpTT.BOUNDARY : RegExpTT.ESC_CHARACTER;
            }
          case 131: break;
          case 49: 
            { return RegExpTT.CHAR_CLASS;
            }
          case 132: break;
          case 50: 
            { if (xmlSchemaMode) return RegExpTT.CHAR_CLASS; else return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            }
          case 133: break;
          case 51: 
            { yypushstate(PROP); return RegExpTT.PROPERTY;
            }
          case 134: break;
          case 52: 
            { yypushstate(QUOTED); return RegExpTT.QUOTE_BEGIN;
            }
          case 135: break;
          case 53: 
            { return RegExpTT.BAD_HEX_VALUE;
            }
          case 136: break;
          case 54: 
            { return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
            }
          case 137: break;
          case 55: 
            { return (allowHexDigitClass || allowHorizontalWhitespaceClass ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN);
            }
          case 138: break;
          case 56: 
            { return commentMode ? RegExpTT.CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            }
          case 139: break;
          case 57: 
            { yypopstate(); return RegExpTT.QUOTE_END;
            }
          case 140: break;
          case 58: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowNestedCharacterClasses) {
                              yypushstate(CLASS1);
                              return RegExpTT.CLASS_BEGIN;
                            }
                            return RegExpTT.CHARACTER;
            }
          case 141: break;
          case 59: 
            { if (allowPosixBracketExpressions) {
                            yybegin(BRACKET_EXPRESSION);
                            return RegExpTT.BRACKET_EXPRESSION_BEGIN;
                          } else {
                            yypushback(1);
                            return RegExpTT.CHARACTER;
                          }
            }
          case 142: break;
          case 60: 
            { if (!allowNestedCharacterClasses) return RegExpTT.CHARACTER;
                                return RegExpTT.REDUNDANT_ESCAPE;
            }
          case 143: break;
          case 61: 
            { if (allowNestedCharacterClasses) return RegExpTT.ANDAND; else yypushback(1); return RegExpTT.CHARACTER;
            }
          case 144: break;
          case 62: 
            { yybegin(CLASS2); return RegExpTT.BRACKET_EXPRESSION_END;
            }
          case 145: break;
          case 63: 
            { yybegin(PY_COND_REF); return RegExpTT.PYTHON_COND_REF;
            }
          case 146: break;
          case 64: 
            { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_NAMED_GROUP;
            }
          case 147: break;
          case 65: 
            { yybegin(QUOTED_NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_QUOTED_NAMED_GROUP;
            }
          case 148: break;
          case 66: 
            { return RegExpTT.NON_CAPT_GROUP;
            }
          case 149: break;
          case 67: 
            { return RegExpTT.POS_LOOKAHEAD;
            }
          case 150: break;
          case 68: 
            { return RegExpTT.NEG_LOOKAHEAD;
            }
          case 151: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(NEGATE_CLASS1);
                              return RegExpTT.CLASS_BEGIN;
            }
          case 152: break;
          case 70: 
            { return RegExpTT.OCT_CHAR;
            }
          case 153: break;
          case 71: 
            { if (xmlSchemaMode) { yypushback(1); return RegExpTT.CHAR_CLASS; } else return RegExpTT.CTRL;
            }
          case 154: break;
          case 72: 
            { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_REF;
            }
          case 155: break;
          case 73: 
            { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_REF;
            }
          case 156: break;
          case 74: 
            { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_CALL;
            }
          case 157: break;
          case 75: 
            { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_CALL;
            }
          case 158: break;
          case 76: 
            { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.PYTHON_NAMED_GROUP;
            }
          case 159: break;
          case 77: 
            { yybegin(PY_NAMED_GROUP_REF); return RegExpTT.PYTHON_NAMED_GROUP_REF;
            }
          case 160: break;
          case 78: 
            { return RegExpTT.POS_LOOKBEHIND;
            }
          case 161: break;
          case 79: 
            { return RegExpTT.NEG_LOOKBEHIND;
            }
          case 162: break;
          case 80: 
            { return RegExpTT.HEX_CHAR;
            }
          case 163: break;
          case 81: 
            { if (allowOctalNoLeadingZero) return RegExpTT.OCT_CHAR;
                                if (yystate() == CLASS2) return RegExpTT.ESC_CHARACTER;
                                while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {
                                  yypushback(1);
                                }
                                return RegExpTT.BACKREF;
            }
          case 164: break;
          case 82: 
            { return RegExpTT.COMMENT;
            }
          case 165: break;
          case 83: 
            { return RegExpTT.UNICODE_CHAR;
            }
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
